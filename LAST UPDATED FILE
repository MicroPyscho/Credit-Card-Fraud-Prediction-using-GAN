{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MicroPyscho/Credit-Card-Fraud-Prediction-using-GAN/blob/main/LAST%20UPDATED%20FILE\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zN3SdubUnBqo",
        "outputId": "54e9ea1b-900a-4fe0-d280-04bfb18ffc5c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: tensorflow-gan in /usr/local/lib/python3.10/dist-packages (2.1.0)\n",
            "Requirement already satisfied: tensorflow-hub>=0.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow-gan) (0.16.1)\n",
            "Requirement already satisfied: tensorflow-probability>=0.7 in /usr/local/lib/python3.10/dist-packages (from tensorflow-gan) (0.23.0)\n",
            "Requirement already satisfied: numpy>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow-hub>=0.2->tensorflow-gan) (1.25.2)\n",
            "Requirement already satisfied: protobuf>=3.19.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow-hub>=0.2->tensorflow-gan) (3.20.3)\n",
            "Requirement already satisfied: tf-keras>=2.14.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow-hub>=0.2->tensorflow-gan) (2.15.1)\n",
            "Requirement already satisfied: absl-py in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (1.4.0)\n",
            "Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (1.16.0)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (4.4.2)\n",
            "Requirement already satisfied: cloudpickle>=1.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (2.2.1)\n",
            "Requirement already satisfied: gast>=0.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (0.5.4)\n",
            "Requirement already satisfied: dm-tree in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (0.1.8)\n",
            "Requirement already satisfied: tensorflow<2.16,>=2.15 in /usr/local/lib/python3.10/dist-packages (from tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.15.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=23.5.26 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (24.3.7)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.2.0)\n",
            "Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.9.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (18.1.1)\n",
            "Requirement already satisfied: ml-dtypes~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.2.0)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.3.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (24.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (67.7.2)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.4.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (4.10.0)\n",
            "Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (1.14.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.36.0)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (1.62.1)\n",
            "Requirement already satisfied: tensorboard<2.16,>=2.15 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.15.2)\n",
            "Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.15.0)\n",
            "Requirement already satisfied: keras<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.15.0)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.43.0)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.27.0)\n",
            "Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (1.2.0)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.6)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.31.0)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.0.1)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (5.3.3)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.3.0)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (4.9)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (1.4.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2024.2.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.1.5)\n",
            "Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.5.1)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.2.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.8.3)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.13.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.50.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n",
            "Requirement already satisfied: numpy<2,>=1.21 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.0)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.10/dist-packages (from seaborn) (1.5.3)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2023.4)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n",
            "\u001b[31mERROR: Could not find a version that satisfies the requirement ssgan (from versions: none)\u001b[0m\u001b[31m\n",
            "\u001b[0m\u001b[31mERROR: No matching distribution found for ssgan\u001b[0m\u001b[31m\n",
            "\u001b[0mRequirement already satisfied: pyarrow in /usr/local/lib/python3.10/dist-packages (14.0.2)\n",
            "Requirement already satisfied: numpy>=1.16.6 in /usr/local/lib/python3.10/dist-packages (from pyarrow) (1.25.2)\n"
          ]
        }
      ],
      "source": [
        "!pip install tensorflow-gan\n",
        "!pip install matplotlib seaborn\n",
        "!pip install ssgan\n",
        "!pip install pyarrow\n",
        "#!pip install tabgan\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import tensorflow_gan as tfgan\n",
        "import tensorflow_datasets as tfds\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "%matplotlib inline\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.linear_model import Lasso\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "from torchvision import transforms\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from scipy.sparse import hstack\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.linear_model import Lasso\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "import pandas as pd\n",
        "from keras.models import Model\n",
        "from keras.layers import Input\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Flatten\n",
        "from keras.layers import LeakyReLU\n",
        "from keras.layers import Dense\n",
        "from keras.optimizers import Adam\n",
        "from tensorflow.keras.utils import plot_model\n",
        "#from keras.utils.vis_utils import plot_model\n",
        "#from ssgan.ssgan import SemiSupervisedGAN\n",
        "from datetime import datetime"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wu8Juc4pnJkC",
        "outputId": "f845fa7f-cf0e-4887-e778-a68044489f1b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "import os\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "4xBRGYX6nO1x"
      },
      "outputs": [],
      "source": [
        "file_path = '/content/drive/MyDrive/df_train.csv'\n",
        "df_train_contd = pd.read_csv(file_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        },
        "id": "40-usPNMnS4L",
        "outputId": "8351988a-458f-4e7f-fd1b-bfc6cfe61c4d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0            cc_num       category     amt gender    zip      lat  \\\n",
              "0           0  2703186189652095       misc_net    4.97      F  28654  36.0788   \n",
              "1           1      630423337322    grocery_pos  107.23      F  99160  48.8878   \n",
              "2           2    38859492057661  entertainment  220.11      M  83252  42.1808   \n",
              "3           3  3534093764340240  gas_transport   45.00      M  59632  46.2306   \n",
              "4           4   375534208663984       misc_pos   41.96      M  24433  38.4207   \n",
              "\n",
              "       long  city_pop  merch_lat  merch_long  is_fraud   tx_time  age  \n",
              "0  -81.1781      3495  36.011293  -82.048315         0  00:00:18   36  \n",
              "1 -118.2105       149  49.159047 -118.186462         0  00:00:44   45  \n",
              "2 -112.2620      4154  43.150704 -112.154481         0  00:00:51   62  \n",
              "3 -112.1138      1939  47.034331 -112.561071         0  00:01:16   57  \n",
              "4  -79.4629        99  38.674999  -78.632459         0  00:03:06   37  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-de69d15d-acd0-4a56-aee8-df54e4c9422a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>cc_num</th>\n",
              "      <th>category</th>\n",
              "      <th>amt</th>\n",
              "      <th>gender</th>\n",
              "      <th>zip</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>city_pop</th>\n",
              "      <th>merch_lat</th>\n",
              "      <th>merch_long</th>\n",
              "      <th>is_fraud</th>\n",
              "      <th>tx_time</th>\n",
              "      <th>age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>2703186189652095</td>\n",
              "      <td>misc_net</td>\n",
              "      <td>4.97</td>\n",
              "      <td>F</td>\n",
              "      <td>28654</td>\n",
              "      <td>36.0788</td>\n",
              "      <td>-81.1781</td>\n",
              "      <td>3495</td>\n",
              "      <td>36.011293</td>\n",
              "      <td>-82.048315</td>\n",
              "      <td>0</td>\n",
              "      <td>00:00:18</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>630423337322</td>\n",
              "      <td>grocery_pos</td>\n",
              "      <td>107.23</td>\n",
              "      <td>F</td>\n",
              "      <td>99160</td>\n",
              "      <td>48.8878</td>\n",
              "      <td>-118.2105</td>\n",
              "      <td>149</td>\n",
              "      <td>49.159047</td>\n",
              "      <td>-118.186462</td>\n",
              "      <td>0</td>\n",
              "      <td>00:00:44</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>38859492057661</td>\n",
              "      <td>entertainment</td>\n",
              "      <td>220.11</td>\n",
              "      <td>M</td>\n",
              "      <td>83252</td>\n",
              "      <td>42.1808</td>\n",
              "      <td>-112.2620</td>\n",
              "      <td>4154</td>\n",
              "      <td>43.150704</td>\n",
              "      <td>-112.154481</td>\n",
              "      <td>0</td>\n",
              "      <td>00:00:51</td>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>3534093764340240</td>\n",
              "      <td>gas_transport</td>\n",
              "      <td>45.00</td>\n",
              "      <td>M</td>\n",
              "      <td>59632</td>\n",
              "      <td>46.2306</td>\n",
              "      <td>-112.1138</td>\n",
              "      <td>1939</td>\n",
              "      <td>47.034331</td>\n",
              "      <td>-112.561071</td>\n",
              "      <td>0</td>\n",
              "      <td>00:01:16</td>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>375534208663984</td>\n",
              "      <td>misc_pos</td>\n",
              "      <td>41.96</td>\n",
              "      <td>M</td>\n",
              "      <td>24433</td>\n",
              "      <td>38.4207</td>\n",
              "      <td>-79.4629</td>\n",
              "      <td>99</td>\n",
              "      <td>38.674999</td>\n",
              "      <td>-78.632459</td>\n",
              "      <td>0</td>\n",
              "      <td>00:03:06</td>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de69d15d-acd0-4a56-aee8-df54e4c9422a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-de69d15d-acd0-4a56-aee8-df54e4c9422a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-de69d15d-acd0-4a56-aee8-df54e4c9422a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-14ef79a6-29a7-4dd3-8581-ec1fa8109e83\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-14ef79a6-29a7-4dd3-8581-ec1fa8109e83')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-14ef79a6-29a7-4dd3-8581-ec1fa8109e83 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_train_contd"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "df_train_contd.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Create a sample of dataset"
      ],
      "metadata": {
        "id": "cEXl_74z89kK"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b4mrmlcenT_m",
        "outputId": "19db334c-2b03-467b-f8ef-e69ec15423d3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sampled dataset info:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 50000 entries, 0 to 49999\n",
            "Data columns (total 14 columns):\n",
            " #   Column      Non-Null Count  Dtype  \n",
            "---  ------      --------------  -----  \n",
            " 0   Unnamed: 0  50000 non-null  int64  \n",
            " 1   cc_num      50000 non-null  int64  \n",
            " 2   category    50000 non-null  object \n",
            " 3   amt         50000 non-null  float64\n",
            " 4   gender      50000 non-null  object \n",
            " 5   zip         50000 non-null  int64  \n",
            " 6   lat         50000 non-null  float64\n",
            " 7   long        50000 non-null  float64\n",
            " 8   city_pop    50000 non-null  int64  \n",
            " 9   merch_lat   50000 non-null  float64\n",
            " 10  merch_long  50000 non-null  float64\n",
            " 11  is_fraud    50000 non-null  int64  \n",
            " 12  tx_time     50000 non-null  object \n",
            " 13  age         50000 non-null  int64  \n",
            "dtypes: float64(5), int64(6), object(3)\n",
            "memory usage: 5.3+ MB\n",
            "None\n"
          ]
        }
      ],
      "source": [
        "df_train_contd.reset_index(drop=True, inplace=True)\n",
        "\n",
        "minor_class = df_train_contd[df_train_contd['is_fraud'] == 1]\n",
        "major_class = df_train_contd[df_train_contd['is_fraud'] == 0]\n",
        "\n",
        "num_minority = minor_class.shape[0]\n",
        "num_majority = major_class.shape[0]\n",
        "\n",
        "minor_sample_prop = 0.7\n",
        "\n",
        "num_minor_samples = min(int(50000 * minor_sample_prop), num_minority)\n",
        "num_major_samples = 50000 - num_minor_samples\n",
        "\n",
        "# Sample from each class separately\n",
        "minor_samp = minor_class.sample(n=num_minor_samples, random_state=42, replace=num_minor_samples > num_minority)\n",
        "major_samp = major_class.sample(n=num_major_samples, random_state=42, replace=num_major_samples > num_majority)\n",
        "\n",
        "# Concatenate the samples\n",
        "df_train_contd_eg = pd.concat([minor_samp, major_samp], ignore_index=True)\n",
        "\n",
        "print(\"Sampled dataset info:\")\n",
        "print(df_train_contd_eg.info())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "DQlHJA3BsKw2",
        "outputId": "9dbfbf18-269e-483f-83b7-21e97975bc35"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Group by category and count fraud cases in each category\n",
        "fraud_by_category = df_train_contd_eg.groupby(\"category\")[\"is_fraud\"].agg(fraud_cases='sum', total_cases='count').sort_values(by=\"fraud_cases\")\n",
        "\n",
        "# Plot the graph\n",
        "plt.figure(figsize=(12, 8))\n",
        "fraud_by_category.plot(kind='bar', color=['blue', 'lightgrey'])\n",
        "plt.xlabel(\"Transaction Category\")\n",
        "plt.ylabel(\"Number of Cases\")\n",
        "plt.title(\"Fraud Distribution and Total Transactions by Transaction Category\")\n",
        "plt.legend([\"Fraud Cases\", \"Total Cases\"], loc=\"upper right\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        },
        "id": "rVcfGaN0oOF3",
        "outputId": "fcbc8019-e496-4e2e-e1ba-8331fd477858"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0               cc_num      category     amt gender    zip  \\\n",
              "0      758837     4365382885912355   grocery_pos  312.51      M  55771   \n",
              "1      981412      180048185037117     kids_pets   20.53      F   7060   \n",
              "2      799445  4102003771126577611   grocery_pos  264.10      M  76248   \n",
              "3      112813     2657850734909997  shopping_net  987.73      M  48206   \n",
              "4      833901     3557442674264531  shopping_net  868.00      F  43136   \n",
              "\n",
              "       lat     long  city_pop  merch_lat  merch_long  is_fraud   tx_time  age  \n",
              "0  48.1439 -92.8561      1680  48.488032  -92.519786         1  22:18:56   47  \n",
              "1  40.6152 -74.4150     71485  40.151652  -75.278513         1  23:13:33   49  \n",
              "2  32.9276 -97.2489     95035  33.098306  -97.968694         1  01:53:21   36  \n",
              "3  42.3749 -83.1087    673342  42.814546  -82.624587         1  22:11:30   77  \n",
              "4  39.8013 -82.8125       460  38.819028  -82.364296         1  22:37:25   19  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cbbdf84c-2abd-4ce6-a092-7f67ab783e75\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>cc_num</th>\n",
              "      <th>category</th>\n",
              "      <th>amt</th>\n",
              "      <th>gender</th>\n",
              "      <th>zip</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>city_pop</th>\n",
              "      <th>merch_lat</th>\n",
              "      <th>merch_long</th>\n",
              "      <th>is_fraud</th>\n",
              "      <th>tx_time</th>\n",
              "      <th>age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>758837</td>\n",
              "      <td>4365382885912355</td>\n",
              "      <td>grocery_pos</td>\n",
              "      <td>312.51</td>\n",
              "      <td>M</td>\n",
              "      <td>55771</td>\n",
              "      <td>48.1439</td>\n",
              "      <td>-92.8561</td>\n",
              "      <td>1680</td>\n",
              "      <td>48.488032</td>\n",
              "      <td>-92.519786</td>\n",
              "      <td>1</td>\n",
              "      <td>22:18:56</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>981412</td>\n",
              "      <td>180048185037117</td>\n",
              "      <td>kids_pets</td>\n",
              "      <td>20.53</td>\n",
              "      <td>F</td>\n",
              "      <td>7060</td>\n",
              "      <td>40.6152</td>\n",
              "      <td>-74.4150</td>\n",
              "      <td>71485</td>\n",
              "      <td>40.151652</td>\n",
              "      <td>-75.278513</td>\n",
              "      <td>1</td>\n",
              "      <td>23:13:33</td>\n",
              "      <td>49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>799445</td>\n",
              "      <td>4102003771126577611</td>\n",
              "      <td>grocery_pos</td>\n",
              "      <td>264.10</td>\n",
              "      <td>M</td>\n",
              "      <td>76248</td>\n",
              "      <td>32.9276</td>\n",
              "      <td>-97.2489</td>\n",
              "      <td>95035</td>\n",
              "      <td>33.098306</td>\n",
              "      <td>-97.968694</td>\n",
              "      <td>1</td>\n",
              "      <td>01:53:21</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>112813</td>\n",
              "      <td>2657850734909997</td>\n",
              "      <td>shopping_net</td>\n",
              "      <td>987.73</td>\n",
              "      <td>M</td>\n",
              "      <td>48206</td>\n",
              "      <td>42.3749</td>\n",
              "      <td>-83.1087</td>\n",
              "      <td>673342</td>\n",
              "      <td>42.814546</td>\n",
              "      <td>-82.624587</td>\n",
              "      <td>1</td>\n",
              "      <td>22:11:30</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>833901</td>\n",
              "      <td>3557442674264531</td>\n",
              "      <td>shopping_net</td>\n",
              "      <td>868.00</td>\n",
              "      <td>F</td>\n",
              "      <td>43136</td>\n",
              "      <td>39.8013</td>\n",
              "      <td>-82.8125</td>\n",
              "      <td>460</td>\n",
              "      <td>38.819028</td>\n",
              "      <td>-82.364296</td>\n",
              "      <td>1</td>\n",
              "      <td>22:37:25</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cbbdf84c-2abd-4ce6-a092-7f67ab783e75')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cbbdf84c-2abd-4ce6-a092-7f67ab783e75 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cbbdf84c-2abd-4ce6-a092-7f67ab783e75');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a506c2cf-9f67-4ac0-ab0b-fc4b686f80f6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a506c2cf-9f67-4ac0-ab0b-fc4b686f80f6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a506c2cf-9f67-4ac0-ab0b-fc4b686f80f6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_train_contd_eg",
              "summary": "{\n  \"name\": \"df_train_contd_eg\",\n  \"rows\": 50000,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 376924,\n        \"min\": 23,\n        \"max\": 1296642,\n        \"num_unique_values\": 50000,\n        \"samples\": [\n          1247665,\n          1136263,\n          626399\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cc_num\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1303686051489968896,\n        \"min\": 60416207185,\n        \"max\": 4992346398065154184,\n        \"num_unique_values\": 983,\n        \"samples\": [\n          4570636521433188,\n          4427805710168,\n          374125201044065\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"health_fitness\",\n          \"grocery_net\",\n          \"grocery_pos\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 255.4663762952516,\n        \"min\": 1.0,\n        \"max\": 9999.39,\n        \"num_unique_values\": 20338,\n        \"samples\": [\n          293.68,\n          48.43,\n          985.41\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"F\",\n          \"M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26997,\n        \"min\": 1257,\n        \"max\": 99783,\n        \"num_unique_values\": 970,\n        \"samples\": [\n          4616,\n          4364\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.087477249777939,\n        \"min\": 20.0271,\n        \"max\": 66.6933,\n        \"num_unique_values\": 968,\n        \"samples\": [\n          44.3566,\n          44.3229\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.923274548779187,\n        \"min\": -165.6723,\n        \"max\": -67.9503,\n        \"num_unique_values\": 969,\n        \"samples\": [\n          -103.6999,\n          -69.9576\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 303761,\n        \"min\": 23,\n        \"max\": 2906700,\n        \"num_unique_values\": 879,\n        \"samples\": [\n          459921,\n          6025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.120583086725056,\n        \"min\": 19.04188,\n        \"max\": 67.510267,\n        \"num_unique_values\": 49916,\n        \"samples\": [\n          39.973882,\n          32.861662\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.93709910275609,\n        \"min\": -166.65656,\n        \"max\": -66.962913,\n        \"num_unique_values\": 49970,\n        \"samples\": [\n          -86.000404,\n          -98.567552\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tx_time\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 37098,\n        \"samples\": [\n          \"20:07:18\",\n          \"06:30:49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 19,\n        \"max\": 99,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          64,\n          47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "df_train_contd_eg.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lSUMrIFFxVqD",
        "outputId": "7a6713a4-df7b-4c2a-ee79-db36c64381f5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "missing values per column:\n",
            "Unnamed: 0    0\n",
            "cc_num        0\n",
            "category      0\n",
            "amt           0\n",
            "gender        0\n",
            "zip           0\n",
            "lat           0\n",
            "long          0\n",
            "city_pop      0\n",
            "merch_lat     0\n",
            "merch_long    0\n",
            "is_fraud      0\n",
            "tx_time       0\n",
            "age           0\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "#check for missing values\n",
        "missing_values = df_train_contd_eg.isna().sum()\n",
        "\n",
        "df_train_contd = df_train_contd_eg.reset_index(drop=True)\n",
        "print(\"missing values per column:\")\n",
        "print (missing_values)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Drop all problematic columns\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "CB10qIsk80_C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#drop problematic columns\n",
        "real_dataset = df_train_contd.drop(columns=[\"Unnamed: 0\", \"cc_num\", \"category\"])\n",
        "print(real_dataset.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P2la9CKGhz4r",
        "outputId": "0f00e319-75be-49bb-f126-6d55c3a5129a"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(50000, 11)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Scale and Transform the dataset"
      ],
      "metadata": {
        "id": "_t1INprW8qqp"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "mDapEgIx3k5L",
        "outputId": "8a8ca100-64bc-4cf0-c2cc-34543435bb86"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Dataframe shape: (50000, 11)\n",
            "Encoded DataFrame shape: (50000, 10)\n",
            "feature_names length: 10\n",
            "z_encoded shape: 10\n",
            "First few rows of z_encoded:\n",
            "Original Dataframe shape: (50000, 11)\n",
            "Encoded DataFrame shape: (50000, 12)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   is_fraud   tx_time  gender_F  gender_M     amt      zip      lat     long  \\\n",
              "0         1  22:18:56       0.0       1.0  312.51  55771.0  48.1439 -92.8561   \n",
              "1         1  23:13:33       1.0       0.0   20.53   7060.0  40.6152 -74.4150   \n",
              "2         1  01:53:21       0.0       1.0  264.10  76248.0  32.9276 -97.2489   \n",
              "3         1  22:11:30       0.0       1.0  987.73  48206.0  42.3749 -83.1087   \n",
              "4         1  22:37:25       1.0       0.0  868.00  43136.0  39.8013 -82.8125   \n",
              "\n",
              "   city_pop  merch_lat  merch_long   age  \n",
              "0    1680.0  48.488032  -92.519786  47.0  \n",
              "1   71485.0  40.151652  -75.278513  49.0  \n",
              "2   95035.0  33.098306  -97.968694  36.0  \n",
              "3  673342.0  42.814546  -82.624587  77.0  \n",
              "4     460.0  38.819028  -82.364296  19.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fc20796e-fcf9-41f8-8aad-e62147dd5444\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_fraud</th>\n",
              "      <th>tx_time</th>\n",
              "      <th>gender_F</th>\n",
              "      <th>gender_M</th>\n",
              "      <th>amt</th>\n",
              "      <th>zip</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>city_pop</th>\n",
              "      <th>merch_lat</th>\n",
              "      <th>merch_long</th>\n",
              "      <th>age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>22:18:56</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>312.51</td>\n",
              "      <td>55771.0</td>\n",
              "      <td>48.1439</td>\n",
              "      <td>-92.8561</td>\n",
              "      <td>1680.0</td>\n",
              "      <td>48.488032</td>\n",
              "      <td>-92.519786</td>\n",
              "      <td>47.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>23:13:33</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>20.53</td>\n",
              "      <td>7060.0</td>\n",
              "      <td>40.6152</td>\n",
              "      <td>-74.4150</td>\n",
              "      <td>71485.0</td>\n",
              "      <td>40.151652</td>\n",
              "      <td>-75.278513</td>\n",
              "      <td>49.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>01:53:21</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>264.10</td>\n",
              "      <td>76248.0</td>\n",
              "      <td>32.9276</td>\n",
              "      <td>-97.2489</td>\n",
              "      <td>95035.0</td>\n",
              "      <td>33.098306</td>\n",
              "      <td>-97.968694</td>\n",
              "      <td>36.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>22:11:30</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>987.73</td>\n",
              "      <td>48206.0</td>\n",
              "      <td>42.3749</td>\n",
              "      <td>-83.1087</td>\n",
              "      <td>673342.0</td>\n",
              "      <td>42.814546</td>\n",
              "      <td>-82.624587</td>\n",
              "      <td>77.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>22:37:25</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>868.00</td>\n",
              "      <td>43136.0</td>\n",
              "      <td>39.8013</td>\n",
              "      <td>-82.8125</td>\n",
              "      <td>460.0</td>\n",
              "      <td>38.819028</td>\n",
              "      <td>-82.364296</td>\n",
              "      <td>19.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc20796e-fcf9-41f8-8aad-e62147dd5444')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fc20796e-fcf9-41f8-8aad-e62147dd5444 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fc20796e-fcf9-41f8-8aad-e62147dd5444');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6d93e697-5035-4ae2-b383-7f34c69a8e75\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6d93e697-5035-4ae2-b383-7f34c69a8e75')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6d93e697-5035-4ae2-b383-7f34c69a8e75 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_train_contd",
              "summary": "{\n  \"name\": \"df_train_contd\",\n  \"rows\": 50000,\n  \"fields\": [\n    {\n      \"column\": \"is_fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tx_time\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 37098,\n        \"samples\": [\n          \"20:07:18\",\n          \"06:30:49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.49863113727506153,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_M\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4986311372750615,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 255.4663762952516,\n        \"min\": 1.0,\n        \"max\": 9999.39,\n        \"num_unique_values\": 20338,\n        \"samples\": [\n          293.68,\n          48.43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26997.39801727495,\n        \"min\": 1257.0,\n        \"max\": 99783.0,\n        \"num_unique_values\": 970,\n        \"samples\": [\n          4616.0,\n          4364.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.087477249777939,\n        \"min\": 20.0271,\n        \"max\": 66.6933,\n        \"num_unique_values\": 968,\n        \"samples\": [\n          44.3566,\n          44.3229\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.923274548779187,\n        \"min\": -165.6723,\n        \"max\": -67.9503,\n        \"num_unique_values\": 969,\n        \"samples\": [\n          -103.6999,\n          -69.9576\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 303761.32655676507,\n        \"min\": 23.0,\n        \"max\": 2906700.0,\n        \"num_unique_values\": 879,\n        \"samples\": [\n          459921.0,\n          6025.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.120583086725056,\n        \"min\": 19.04188,\n        \"max\": 67.510267,\n        \"num_unique_values\": 49916,\n        \"samples\": [\n          39.973882,\n          32.861662\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.93709910275609,\n        \"min\": -166.65656,\n        \"max\": -66.962913,\n        \"num_unique_values\": 49970,\n        \"samples\": [\n          -86.000404,\n          -98.567552\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.651335672957465,\n        \"min\": 19.0,\n        \"max\": 99.0,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          64.0,\n          47.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "#Scale, one hot encode and transform data\n",
        "cat_features = [\"gender\"]\n",
        "cat_transformer = OneHotEncoder()\n",
        "\n",
        "num_features = [\"amt\", \"zip\", \"lat\", \"long\", \"city_pop\", \"merch_lat\", \"merch_long\", \"age\"]\n",
        "num_transformer =StandardScaler()\n",
        "\n",
        "preprocessor =ColumnTransformer(\n",
        "    transformers=[\n",
        "        (\"cat\", cat_transformer, cat_features),\n",
        "        (\"num\", num_transformer, num_features)\n",
        "    ]\n",
        ")\n",
        "\n",
        "cat_encoded = cat_transformer.fit_transform(real_dataset[cat_features])\n",
        "\n",
        "\n",
        "z_encoded = hstack([cat_encoded, real_dataset[num_features].values])\n",
        "\n",
        "encoded_cat_feat = cat_transformer.get_feature_names_out(input_features=cat_features)\n",
        "\n",
        "#encoded_cat_feat = preprocessor.named_transformers_[\"cat\"].get_feature_names_out(cat_features)\n",
        "feature_names = list(encoded_cat_feat) + num_features\n",
        "\n",
        "print(\"Original Dataframe shape:\", real_dataset.shape)\n",
        "print(\"Encoded DataFrame shape:\", z_encoded.shape)\n",
        "print(\"feature_names length:\", len(feature_names))\n",
        "print(\"z_encoded shape:\", z_encoded.shape[1])\n",
        "print(\"First few rows of z_encoded:\")\n",
        "\n",
        "encoded_df = pd.DataFrame(data=z_encoded.toarray(), columns=feature_names)\n",
        "\n",
        "df_train_encoded = pd.concat([real_dataset.drop(columns=cat_features + num_features), encoded_df], axis=1)\n",
        "print(\"Original Dataframe shape:\", real_dataset.shape)\n",
        "print(\"Encoded DataFrame shape:\", df_train_encoded.shape)\n",
        "\n",
        "df_train_encoded.reset_index(drop=True, inplace=True)\n",
        "df_train_contd = df_train_encoded\n",
        "df_train_contd.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Scale Data using StandardScaler and RandomForestClassifier"
      ],
      "metadata": {
        "id": "5634piCz-Hxx"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "N9Y7Hbcn4xdD"
      },
      "outputs": [],
      "source": [
        "real_dataset = real_dataset\n",
        "\n",
        "#Load data into chunks and preprocess in chunks due to size\n",
        "num_chunks = 10\n",
        "\n",
        "#Feature importance containers\n",
        "num_feats = real_dataset.shape[1]-1\n",
        "rf_feature_importance = np.zeros(num_feats)\n",
        "lasso_feature_coefficients = np.zeros(num_feats)\n",
        "\n",
        "#separate target from class columns\n",
        "X = real_dataset.drop(columns=[\"is_fraud\"])\n",
        "y = real_dataset[\"is_fraud\"]\n",
        "\n",
        "scaler = StandardScaler()\n",
        "\n",
        "for i in range(num_chunks):\n",
        "  chunk_size = len(real_dataset)//num_chunks\n",
        "  start_idx = i * chunk_size\n",
        "  end_idx = start_idx + chunk_size\n",
        "  start_idx = start_idx + chunk_size\n",
        "  chunk_x = X.iloc[start_idx:end_idx]\n",
        "  chunk_y = y.iloc[start_idx:end_idx]\n",
        "\n",
        "  if len(chunk_x) > 0:\n",
        "    x_chunk_scaled = scaler.fit_transform(chunk_x) #Random Forest Feature Importance\n",
        "    rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "    rf_model.fit(x_chunk_scaled, chunk_y)\n",
        "    rf_feature_importance += rf_model.feature_importances_\n",
        "\n",
        "    lasso_model = Lasso(alpha=0.1, random_state=42)  #Lasso Regression Feature Importance\n",
        "    lasso_model.fit(x_chunk_scaled, chunk_y)\n",
        "    lasso_feature_coefficients += lasso_model.coef_\n",
        "\n",
        "rf_feature_importance /= num_chunks\n",
        "lasso_feature_coefficients /= num_chunks\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "l4iCQEp6WRSg",
        "outputId": "7817d678-c336-4a55-9455-5b04668cda4b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Feature Names: 10\n",
            "Coefficients: 10\n",
            "Length of feature importances array: 10\n",
            "Feature Names: ['amt', 'gender', 'zip', 'lat', 'long', 'city_pop', 'merch_lat', 'merch_long', 'tx_time', 'age']\n",
            "Coefficients: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            "Length of feature_nms: 10\n",
            "Length of lasso_feature_coefficients: 10\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "def plot_feature_importances(rf_feature_importance, feature_nms, title):\n",
        "  sorted_idx = rf_feature_importance.argsort()[::-1]\n",
        "  top_10 = sorted_idx[:10]\n",
        "  sns.barplot(x=rf_feature_importance[top_10], y=pd.Series(feature_nms)[top_10])\n",
        "  plt.xlabel(\"Feature Importance\")\n",
        "  plt.ylabel(\"Feature\")\n",
        "  plt.title(title)\n",
        "  plt.show()\n",
        "\n",
        "def plot_coefficients(lasso_feature_coefficients, feature_nms, title):\n",
        "    #assert len(feature_nms)==len(lasso_feature_coefficients),\"Lengths of feature importance must match\"\n",
        "\n",
        "    print(\"Length of feature_nms:\", len(X.columns.tolist()))\n",
        "    print(\"Length of lasso_feature_coefficients:\", len(lasso_feature_coefficients))\n",
        "\n",
        "    coef_df = pd.DataFrame({\"Feature\": feature_nms,\"Coefficient\": lasso_feature_coefficients})\n",
        "    coef_df = coef_df.sort_values(by=\"Coefficient\", ascending=False)\n",
        "    top_10_co =coef_df.head(10)\n",
        "    plt.figure(figsize =(10, 6))\n",
        "    sns.barplot(x=\"Coefficient\", y = \"Feature\", data=top_10_co)\n",
        "    plt.xlabel(\"Coefficient\")\n",
        "    plt.ylabel(\"Feature\")\n",
        "    plt.title(title)\n",
        "    plt.show()\n",
        "\n",
        "feature_importances_scaled = scaler.fit_transform(rf_feature_importance.reshape(-1, 1))\n",
        "coefficients_scaled = scaler.fit_transform(lasso_feature_coefficients.reshape(-1, 1))\n",
        "\n",
        "feature_nms = X.columns.tolist()\n",
        "plot_feature_importances(rf_feature_importance, feature_nms, \"Feature Importance for Random Forest (Scaled)\")\n",
        "\n",
        "feature_nms = X.columns.tolist()\n",
        "\n",
        "print(\"Feature Names:\", len(feature_nms))\n",
        "print(\"Coefficients:\", len(lasso_feature_coefficients))\n",
        "\n",
        "feature_importances_length = len(rf_feature_importance)\n",
        "print(\"Length of feature importances array:\", feature_importances_length)\n",
        "\n",
        "print(\"Feature Names:\", feature_nms)\n",
        "print(\"Coefficients:\", lasso_feature_coefficients)\n",
        "\n",
        "plot_coefficients(lasso_feature_coefficients, feature_nms, \"Lasso Regression Feature Coefficients (Scaled)\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        },
        "id": "r6gZw0PeKNb6",
        "outputId": "3dc58992-2e64-4365-8086-26873deaf428"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(50000, 11)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   is_fraud  gender_F  gender_M     amt      zip      lat     long  city_pop  \\\n",
              "0         1       0.0       1.0  312.51  55771.0  48.1439 -92.8561    1680.0   \n",
              "1         1       1.0       0.0   20.53   7060.0  40.6152 -74.4150   71485.0   \n",
              "2         1       0.0       1.0  264.10  76248.0  32.9276 -97.2489   95035.0   \n",
              "3         1       0.0       1.0  987.73  48206.0  42.3749 -83.1087  673342.0   \n",
              "4         1       1.0       0.0  868.00  43136.0  39.8013 -82.8125     460.0   \n",
              "\n",
              "   merch_lat  merch_long   age  \n",
              "0  48.488032  -92.519786  47.0  \n",
              "1  40.151652  -75.278513  49.0  \n",
              "2  33.098306  -97.968694  36.0  \n",
              "3  42.814546  -82.624587  77.0  \n",
              "4  38.819028  -82.364296  19.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e3a9cb4c-bf5d-49ce-be53-825f491dfce9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_fraud</th>\n",
              "      <th>gender_F</th>\n",
              "      <th>gender_M</th>\n",
              "      <th>amt</th>\n",
              "      <th>zip</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>city_pop</th>\n",
              "      <th>merch_lat</th>\n",
              "      <th>merch_long</th>\n",
              "      <th>age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>312.51</td>\n",
              "      <td>55771.0</td>\n",
              "      <td>48.1439</td>\n",
              "      <td>-92.8561</td>\n",
              "      <td>1680.0</td>\n",
              "      <td>48.488032</td>\n",
              "      <td>-92.519786</td>\n",
              "      <td>47.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>20.53</td>\n",
              "      <td>7060.0</td>\n",
              "      <td>40.6152</td>\n",
              "      <td>-74.4150</td>\n",
              "      <td>71485.0</td>\n",
              "      <td>40.151652</td>\n",
              "      <td>-75.278513</td>\n",
              "      <td>49.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>264.10</td>\n",
              "      <td>76248.0</td>\n",
              "      <td>32.9276</td>\n",
              "      <td>-97.2489</td>\n",
              "      <td>95035.0</td>\n",
              "      <td>33.098306</td>\n",
              "      <td>-97.968694</td>\n",
              "      <td>36.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>987.73</td>\n",
              "      <td>48206.0</td>\n",
              "      <td>42.3749</td>\n",
              "      <td>-83.1087</td>\n",
              "      <td>673342.0</td>\n",
              "      <td>42.814546</td>\n",
              "      <td>-82.624587</td>\n",
              "      <td>77.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>868.00</td>\n",
              "      <td>43136.0</td>\n",
              "      <td>39.8013</td>\n",
              "      <td>-82.8125</td>\n",
              "      <td>460.0</td>\n",
              "      <td>38.819028</td>\n",
              "      <td>-82.364296</td>\n",
              "      <td>19.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e3a9cb4c-bf5d-49ce-be53-825f491dfce9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e3a9cb4c-bf5d-49ce-be53-825f491dfce9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e3a9cb4c-bf5d-49ce-be53-825f491dfce9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0a63d5d3-7470-4062-ae9a-506e89781720\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0a63d5d3-7470-4062-ae9a-506e89781720')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0a63d5d3-7470-4062-ae9a-506e89781720 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "real_data",
              "summary": "{\n  \"name\": \"real_data\",\n  \"rows\": 50000,\n  \"fields\": [\n    {\n      \"column\": \"is_fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.49863113727506153,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_M\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4986311372750615,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 255.4663762952516,\n        \"min\": 1.0,\n        \"max\": 9999.39,\n        \"num_unique_values\": 20338,\n        \"samples\": [\n          293.68,\n          48.43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26997.39801727495,\n        \"min\": 1257.0,\n        \"max\": 99783.0,\n        \"num_unique_values\": 970,\n        \"samples\": [\n          4616.0,\n          4364.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.087477249777939,\n        \"min\": 20.0271,\n        \"max\": 66.6933,\n        \"num_unique_values\": 968,\n        \"samples\": [\n          44.3566,\n          44.3229\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.923274548779187,\n        \"min\": -165.6723,\n        \"max\": -67.9503,\n        \"num_unique_values\": 969,\n        \"samples\": [\n          -103.6999,\n          -69.9576\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 303761.32655676507,\n        \"min\": 23.0,\n        \"max\": 2906700.0,\n        \"num_unique_values\": 879,\n        \"samples\": [\n          459921.0,\n          6025.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.120583086725056,\n        \"min\": 19.04188,\n        \"max\": 67.510267,\n        \"num_unique_values\": 49916,\n        \"samples\": [\n          39.973882,\n          32.861662\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.93709910275609,\n        \"min\": -166.65656,\n        \"max\": -66.962913,\n        \"num_unique_values\": 49970,\n        \"samples\": [\n          -86.000404,\n          -98.567552\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.651335672957465,\n        \"min\": 19.0,\n        \"max\": 99.0,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          64.0,\n          47.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "real_data = df_train_contd.select_dtypes(include={\"number\"})\n",
        "print(real_data.shape)\n",
        "real_data.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Balance the data using SMOTE"
      ],
      "metadata": {
        "id": "AC-4Tqm5S2h9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Separate features and target variable\n",
        "real_data = df_train_contd.select_dtypes(include={\"number\"})\n",
        "\n",
        "\n",
        "X = real_data.drop(columns=['is_fraud'])\n",
        "y = real_data['is_fraud']\n",
        "\n",
        "#Apply SMOTE to generate synthetic samples\n",
        "smote = SMOTE()\n",
        "X_balanced, y_balanced = smote.fit_resample(X, y)\n",
        "\n",
        "#Combine original and synthetic samples\n",
        "balanced_data = pd.concat([pd.DataFrame(X_balanced, columns=X.columns), pd.Series(y_balanced, name='is_fraud')], axis=1)\n",
        "\n",
        "#Split train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_balanced, y_balanced, test_size=0.2, random_state=42)\n",
        "\n",
        "#Print balanced dataset shape\n",
        "print(balanced_data.shape)\n",
        "print(balanced_data.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sdk-dfoxQ7zJ",
        "outputId": "376a4fa6-77e4-4bed-de36-5e2c64bcfa48"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(84988, 11)\n",
            "   gender_F  gender_M     amt      zip      lat     long  city_pop  merch_lat  \\\n",
            "0       0.0       1.0  312.51  55771.0  48.1439 -92.8561    1680.0  48.488032   \n",
            "1       1.0       0.0   20.53   7060.0  40.6152 -74.4150   71485.0  40.151652   \n",
            "2       0.0       1.0  264.10  76248.0  32.9276 -97.2489   95035.0  33.098306   \n",
            "3       0.0       1.0  987.73  48206.0  42.3749 -83.1087  673342.0  42.814546   \n",
            "4       1.0       0.0  868.00  43136.0  39.8013 -82.8125     460.0  38.819028   \n",
            "\n",
            "   merch_long   age  is_fraud  \n",
            "0  -92.519786  47.0         1  \n",
            "1  -75.278513  49.0         1  \n",
            "2  -97.968694  36.0         1  \n",
            "3  -82.624587  77.0         1  \n",
            "4  -82.364296  19.0         1  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Before balancing\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.countplot(x='is_fraud', data=real_data)\n",
        "plt.title('Distribution of Target Variable (Before Balancing)')\n",
        "plt.xlabel('is_fraud')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "# After balancing\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.countplot(x='is_fraud', data=balanced_data)\n",
        "plt.title('Distribution of Target Variable (After Balancing)')\n",
        "plt.xlabel('is_fraud')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "LylEewy5TJl6",
        "outputId": "c03c21bc-6c2a-42e7-87c8-256a23aa1025"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corr_real = real_data.corr()\n",
        "\n",
        "corr_balanced = balanced_data.corr()\n",
        "\n",
        "# Plot correlation matrix for real data\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(corr_real, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\n",
        "plt.title('Correlation Matrix - Real Data')\n",
        "plt.show()\n",
        "\n",
        "# Plot correlation matrix for balanced data\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(corr_balanced, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\n",
        "plt.title('Correlation Matrix - Balanced Data (SMOTE)')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Ci1X6PZlxBey",
        "outputId": "0bc7922a-990a-4056-c514-0f174db7d567"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "import pandas as pd\n",
        "\n",
        "X = real_data.drop(columns=['is_fraud'])\n",
        "y = real_data['is_fraud']\n",
        "\n",
        "smote = SMOTE()\n",
        "X_balanced, y_balanced = smote.fit_resample(X, y)\n",
        "\n",
        "balanced_data = pd.concat([pd.DataFrame(X_balanced, columns=X.columns), pd.Series(y_balanced, name='is_fraud')], axis=1)\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_balanced, y_balanced, test_size=0.2, random_state=42)\n",
        "\n",
        "svm_model = SVC(kernel='rbf', random_state=42)  # You can choose different kernels like 'linear', 'poly', 'sigmoid', etc.\n",
        "svm_model.fit(X_train, y_train)\n",
        "\n",
        "y_pred = svm_model.predict(X_test)\n",
        "\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"Accuracy:\", accuracy)\n",
        "\n",
        "print(classification_report(y_test, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rO_EikQVwwxB",
        "outputId": "8fcfc5a6-562e-4b7d-c544-fc39f61b3e78"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.5365337098482175\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.53      0.69      0.60      8496\n",
            "           1       0.55      0.39      0.46      8502\n",
            "\n",
            "    accuracy                           0.54     16998\n",
            "   macro avg       0.54      0.54      0.53     16998\n",
            "weighted avg       0.54      0.54      0.53     16998\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Definition of GAN Parameters"
      ],
      "metadata": {
        "id": "Ej7T9yA42Onb"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "id": "uvKMH_bPQGtx"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import logging\n",
        "tf.get_logger().setLevel(logging.ERROR)\n",
        "\n",
        "latent_dim =5000\n",
        "\n",
        "class Gan():\n",
        "    def __init__(self, real_data, latent_dim):\n",
        "        self.real_data = real_data\n",
        "        self.latent_dim = latent_dim\n",
        "        self.n_epochs = 10000\n",
        "\n",
        "    # Generate random noise in a latent space\n",
        "    def _noise(self):\n",
        "        noise = np.random.normal(0, 1, (self.real_data.shape[0], self.real_data.shape[1]))\n",
        "        return noise\n",
        "\n",
        "    def _generator(self):\n",
        "        model = tf.keras.Sequential(name=\"Generator_model\")\n",
        "        model.add(tf.keras.layers.Dense(5000, activation='relu',input_shape =(self.latent_dim,),\n",
        "                                         kernel_initializer='he_uniform',\n",
        "                                         input_dim=self.latent_dim))\n",
        "        model.add(tf.keras.layers.Dense(1000, activation='relu'))\n",
        "        model.add(tf.keras.layers.Dense(self.real_data.shape[1], activation='linear'))\n",
        "        return model\n",
        "\n",
        "    def _discriminator(self):\n",
        "        model = tf.keras.Sequential(name=\"Discriminator_model\")\n",
        "        model.add(tf.keras.layers.Dense(5000, activation='relu',\n",
        "                                         kernel_initializer='he_uniform',\n",
        "                                         input_dim=self.real_data.shape[1]))\n",
        "        model.add(tf.keras.layers.Dense(2500, activation='relu'))\n",
        "        # Sigmoid => Real or fake\n",
        "        model.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n",
        "        model.compile(loss='binary_crossentropy',\n",
        "                      optimizer='adam',\n",
        "                      metrics=['accuracy'])\n",
        "        return model\n",
        "\n",
        "    # Define the combined GAN model for updating generator\n",
        "    def _GAN(self, generator, discriminator):\n",
        "        discriminator.trainable = False\n",
        "        generator.trainable = True\n",
        "        model = tf.keras.Sequential(name=\"GAN\")\n",
        "        model.add(generator)\n",
        "        model.add(discriminator)\n",
        "        model.compile(loss='binary_crossentropy', optimizer='adam')\n",
        "        return model\n",
        "\n",
        "    # generator and discriminator training\n",
        "    def train(self, generator, discriminator, gan):\n",
        "        # enumerate epochs\n",
        "        for epoch in range(self.n_epochs):\n",
        "            # Train discriminator\n",
        "            generated_data = generator.predict(self._noise())\n",
        "            labels = np.concatenate([np.ones(self.real_data.shape[0]), np.zeros(self.real_data.shape[0])])\n",
        "            X = np.concatenate([self.real_data, generated_data])\n",
        "            discriminator.trainable = True\n",
        "            d_loss , _ = discriminator.train_on_batch(X, labels)\n",
        "\n",
        "            # Train generator\n",
        "            noise = self._noise()\n",
        "            g_loss = gan.train_on_batch(noise, np.ones(self.real_data.shape[0]))\n",
        "\n",
        "            print('>%d, d1=%.3f, d2=%.3f' %(epoch+1, d_loss, g_loss))\n",
        "        return generator\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "0YiHj-xB21NF"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "fTomV0i4lXXm",
        "outputId": "b4229c1f-f9d3-4389-d4c4-3aceb5bf6947"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1;30;43mStreaming output truncated to the last 5000 lines.\u001b[0m\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5378, d1=0.004, d2=5.993\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5379, d1=0.005, d2=5.965\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5380, d1=0.005, d2=5.956\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5381, d1=0.005, d2=5.961\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5382, d1=0.005, d2=5.974\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5383, d1=0.005, d2=5.971\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5384, d1=0.005, d2=5.959\n",
            "2/2 [==============================] - 0s 33ms/step\n",
            ">5385, d1=0.005, d2=5.943\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5386, d1=0.005, d2=5.928\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5387, d1=0.005, d2=5.928\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">5388, d1=0.004, d2=5.958\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5389, d1=0.004, d2=6.013\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5390, d1=0.004, d2=6.084\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5391, d1=0.004, d2=6.129\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5392, d1=0.004, d2=6.124\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5393, d1=0.004, d2=6.113\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5394, d1=0.004, d2=6.093\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5395, d1=0.004, d2=6.092\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5396, d1=0.004, d2=6.118\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5397, d1=0.004, d2=6.160\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5398, d1=0.003, d2=6.198\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5399, d1=0.003, d2=6.224\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5400, d1=0.003, d2=6.239\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5401, d1=0.003, d2=6.259\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5402, d1=0.003, d2=6.285\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5403, d1=0.003, d2=6.300\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5404, d1=0.003, d2=6.320\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5405, d1=0.003, d2=6.343\n",
            "2/2 [==============================] - 0s 31ms/step\n",
            ">5406, d1=0.003, d2=6.365\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">5407, d1=0.003, d2=6.397\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5408, d1=0.003, d2=6.431\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5409, d1=0.003, d2=6.459\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5410, d1=0.003, d2=6.470\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5411, d1=0.003, d2=6.457\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5412, d1=0.003, d2=6.439\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5413, d1=0.003, d2=6.444\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5414, d1=0.003, d2=6.469\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5415, d1=0.003, d2=6.501\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5416, d1=0.002, d2=6.521\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5417, d1=0.002, d2=6.529\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5418, d1=0.002, d2=6.524\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5419, d1=0.002, d2=6.509\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5420, d1=0.002, d2=6.505\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5421, d1=0.002, d2=6.528\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5422, d1=0.002, d2=6.558\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5423, d1=0.002, d2=6.580\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5424, d1=0.002, d2=6.580\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5425, d1=0.002, d2=6.560\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5426, d1=0.002, d2=6.550\n",
            "2/2 [==============================] - 0s 34ms/step\n",
            ">5427, d1=0.002, d2=6.564\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5428, d1=0.002, d2=6.723\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5429, d1=0.002, d2=6.870\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5430, d1=0.002, d2=6.976\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5431, d1=0.002, d2=7.046\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5432, d1=0.001, d2=7.101\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5433, d1=0.001, d2=7.178\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5434, d1=0.001, d2=7.277\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5435, d1=0.001, d2=7.383\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5436, d1=0.001, d2=7.484\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5437, d1=0.001, d2=7.557\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5438, d1=0.001, d2=7.582\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5439, d1=0.001, d2=7.548\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">5440, d1=0.001, d2=7.465\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5441, d1=0.001, d2=7.366\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5442, d1=0.001, d2=7.256\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5443, d1=0.001, d2=7.131\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5444, d1=0.001, d2=7.033\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5445, d1=0.002, d2=6.967\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">5446, d1=0.002, d2=6.936\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">5447, d1=0.002, d2=6.935\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">5448, d1=0.002, d2=6.933\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5449, d1=0.002, d2=6.898\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5450, d1=0.002, d2=6.833\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5451, d1=0.002, d2=6.772\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5452, d1=0.002, d2=6.726\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5453, d1=0.002, d2=6.721\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5454, d1=0.002, d2=6.756\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5455, d1=0.002, d2=6.782\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5456, d1=0.002, d2=6.768\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5457, d1=0.002, d2=6.749\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5458, d1=0.002, d2=6.747\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5459, d1=0.002, d2=6.807\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5460, d1=0.002, d2=6.909\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5461, d1=0.002, d2=6.952\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5462, d1=0.002, d2=6.945\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5463, d1=0.002, d2=6.909\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5464, d1=0.002, d2=6.907\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5465, d1=0.002, d2=6.976\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5466, d1=0.002, d2=7.085\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">5467, d1=0.002, d2=7.191\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">5468, d1=0.002, d2=7.220\n",
            "2/2 [==============================] - 0s 34ms/step\n",
            ">5469, d1=0.002, d2=7.185\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5470, d1=0.002, d2=7.154\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5471, d1=0.001, d2=7.159\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5472, d1=0.001, d2=7.198\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5473, d1=0.001, d2=7.234\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5474, d1=0.001, d2=7.184\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5475, d1=0.001, d2=7.128\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5476, d1=0.001, d2=7.148\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5477, d1=0.001, d2=7.175\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5478, d1=0.001, d2=7.219\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5479, d1=0.001, d2=7.294\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5480, d1=0.001, d2=7.382\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5481, d1=0.001, d2=7.467\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5482, d1=0.001, d2=7.546\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">5483, d1=0.001, d2=7.604\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5484, d1=0.001, d2=7.640\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5485, d1=0.001, d2=7.641\n",
            "2/2 [==============================] - 0s 34ms/step\n",
            ">5486, d1=0.001, d2=7.628\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">5487, d1=0.001, d2=7.616\n",
            "2/2 [==============================] - 0s 32ms/step\n",
            ">5488, d1=0.001, d2=7.609\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5489, d1=0.001, d2=7.608\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5490, d1=0.001, d2=7.603\n",
            "2/2 [==============================] - 0s 31ms/step\n",
            ">5491, d1=0.001, d2=7.591\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5492, d1=0.001, d2=7.582\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5493, d1=0.001, d2=7.580\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5494, d1=0.001, d2=7.582\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5495, d1=0.001, d2=7.586\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5496, d1=0.001, d2=7.597\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5497, d1=0.001, d2=7.604\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5498, d1=0.001, d2=7.602\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5499, d1=0.001, d2=7.596\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5500, d1=0.001, d2=7.582\n",
            "2/2 [==============================] - 0s 27ms/step\n",
            ">5501, d1=0.001, d2=7.562\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5502, d1=0.001, d2=7.534\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5503, d1=0.001, d2=7.513\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">5504, d1=0.001, d2=7.490\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5505, d1=0.001, d2=7.467\n",
            "2/2 [==============================] - 0s 27ms/step\n",
            ">5506, d1=0.001, d2=7.451\n",
            "2/2 [==============================] - 0s 38ms/step\n",
            ">5507, d1=0.001, d2=7.435\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5508, d1=0.001, d2=7.423\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">5509, d1=0.001, d2=7.429\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5510, d1=0.001, d2=7.446\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5511, d1=0.001, d2=7.456\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">5512, d1=0.001, d2=7.460\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5513, d1=0.001, d2=7.445\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5514, d1=0.001, d2=7.416\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5515, d1=0.001, d2=7.388\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5516, d1=0.001, d2=7.382\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5517, d1=0.001, d2=7.389\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5518, d1=0.001, d2=7.399\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5519, d1=0.001, d2=7.406\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5520, d1=0.001, d2=7.399\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5521, d1=0.001, d2=7.373\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5522, d1=0.001, d2=7.346\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5523, d1=0.001, d2=7.319\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5524, d1=0.001, d2=7.277\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5525, d1=0.001, d2=7.248\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">5526, d1=0.001, d2=7.234\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5527, d1=0.001, d2=7.222\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5528, d1=0.001, d2=7.194\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5529, d1=0.001, d2=7.179\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5530, d1=0.001, d2=7.173\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5531, d1=0.001, d2=7.163\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5532, d1=0.001, d2=7.180\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5533, d1=0.001, d2=7.208\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5534, d1=0.001, d2=7.218\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5535, d1=0.001, d2=7.210\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5536, d1=0.001, d2=7.203\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5537, d1=0.001, d2=7.218\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5538, d1=0.001, d2=7.261\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5539, d1=0.001, d2=7.294\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5540, d1=0.001, d2=7.324\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5541, d1=0.001, d2=7.342\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5542, d1=0.001, d2=7.346\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5543, d1=0.001, d2=7.345\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5544, d1=0.001, d2=7.351\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">5545, d1=0.001, d2=7.370\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">5546, d1=0.001, d2=7.392\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">5547, d1=0.001, d2=7.414\n",
            "2/2 [==============================] - 0s 46ms/step\n",
            ">5548, d1=0.001, d2=7.412\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5549, d1=0.001, d2=7.393\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5550, d1=0.001, d2=7.397\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5551, d1=0.001, d2=7.416\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5552, d1=0.001, d2=7.450\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5553, d1=0.001, d2=7.480\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">5554, d1=0.001, d2=7.484\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5555, d1=0.001, d2=7.471\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5556, d1=0.001, d2=7.463\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5557, d1=0.001, d2=7.460\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5558, d1=0.001, d2=7.469\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5559, d1=0.001, d2=7.485\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5560, d1=0.001, d2=7.508\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5561, d1=0.001, d2=7.515\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5562, d1=0.001, d2=7.509\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5563, d1=0.001, d2=7.484\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5564, d1=0.001, d2=7.458\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5565, d1=0.001, d2=7.461\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5566, d1=0.001, d2=7.496\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">5567, d1=0.001, d2=7.533\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5568, d1=0.001, d2=7.543\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5569, d1=0.001, d2=7.534\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5570, d1=0.001, d2=7.527\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5571, d1=0.001, d2=7.528\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5572, d1=0.001, d2=7.556\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5573, d1=0.001, d2=7.592\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5574, d1=0.001, d2=7.616\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5575, d1=0.001, d2=7.613\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5576, d1=0.001, d2=7.605\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5577, d1=0.001, d2=7.615\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5578, d1=0.001, d2=7.640\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5579, d1=0.001, d2=7.660\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5580, d1=0.001, d2=7.669\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5581, d1=0.001, d2=7.663\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5582, d1=0.001, d2=7.667\n",
            "2/2 [==============================] - 0s 31ms/step\n",
            ">5583, d1=0.001, d2=7.707\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">5584, d1=0.001, d2=7.752\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5585, d1=0.001, d2=7.789\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5586, d1=0.001, d2=7.820\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5587, d1=0.001, d2=7.834\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">5588, d1=0.001, d2=7.821\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">5589, d1=0.001, d2=7.797\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">5590, d1=0.001, d2=7.789\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5591, d1=0.001, d2=7.812\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5592, d1=0.001, d2=7.858\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5593, d1=0.001, d2=7.906\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5594, d1=0.001, d2=7.926\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5595, d1=0.001, d2=7.913\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5596, d1=0.001, d2=7.871\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5597, d1=0.001, d2=7.838\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5598, d1=0.001, d2=7.851\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5599, d1=0.001, d2=7.909\n",
            "2/2 [==============================] - 0s 37ms/step\n",
            ">5600, d1=0.001, d2=7.971\n",
            "2/2 [==============================] - 0s 38ms/step\n",
            ">5601, d1=0.001, d2=7.995\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">5602, d1=0.001, d2=7.988\n",
            "2/2 [==============================] - 0s 38ms/step\n",
            ">5603, d1=0.001, d2=7.975\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5604, d1=0.001, d2=8.003\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5605, d1=0.001, d2=8.048\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5606, d1=0.001, d2=8.117\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5607, d1=0.001, d2=8.179\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5608, d1=0.001, d2=8.199\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5609, d1=0.001, d2=8.194\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5610, d1=0.001, d2=8.205\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5611, d1=0.001, d2=8.253\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5612, d1=0.001, d2=8.329\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5613, d1=0.000, d2=8.380\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5614, d1=0.000, d2=8.391\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5615, d1=0.000, d2=8.383\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">5616, d1=0.000, d2=8.387\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5617, d1=0.000, d2=8.424\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5618, d1=0.000, d2=8.472\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5619, d1=0.000, d2=8.497\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5620, d1=0.000, d2=8.485\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">5621, d1=0.000, d2=8.461\n",
            "2/2 [==============================] - 0s 36ms/step\n",
            ">5622, d1=0.000, d2=8.471\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5623, d1=0.000, d2=8.510\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5624, d1=0.000, d2=8.557\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5625, d1=0.000, d2=8.565\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5626, d1=0.000, d2=8.480\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5627, d1=0.000, d2=8.423\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5628, d1=0.000, d2=8.426\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5629, d1=0.000, d2=8.499\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5630, d1=0.000, d2=8.593\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5631, d1=0.000, d2=8.614\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5632, d1=0.000, d2=8.583\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5633, d1=0.000, d2=8.575\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5634, d1=0.000, d2=8.627\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5635, d1=0.000, d2=8.698\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5636, d1=0.000, d2=8.716\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5637, d1=0.000, d2=8.681\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5638, d1=0.000, d2=8.656\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5639, d1=0.000, d2=8.691\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">5640, d1=0.000, d2=8.747\n",
            "2/2 [==============================] - 0s 27ms/step\n",
            ">5641, d1=0.000, d2=8.763\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5642, d1=0.000, d2=8.737\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">5643, d1=0.000, d2=8.721\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">5644, d1=0.000, d2=8.751\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5645, d1=0.000, d2=8.799\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5646, d1=0.000, d2=8.797\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5647, d1=0.000, d2=8.755\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5648, d1=0.000, d2=8.738\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5649, d1=0.000, d2=8.769\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5650, d1=0.000, d2=8.834\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5651, d1=0.000, d2=8.901\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5652, d1=0.000, d2=8.941\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5653, d1=0.000, d2=8.965\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5654, d1=0.000, d2=9.000\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5655, d1=0.000, d2=9.051\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5656, d1=0.000, d2=9.082\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5657, d1=0.000, d2=9.089\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5658, d1=0.000, d2=9.097\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5659, d1=0.000, d2=9.124\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5660, d1=0.000, d2=9.153\n",
            "2/2 [==============================] - 0s 43ms/step\n",
            ">5661, d1=0.000, d2=9.153\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">5662, d1=0.000, d2=9.135\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">5663, d1=0.000, d2=9.119\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">5664, d1=0.000, d2=9.097\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5665, d1=0.000, d2=9.094\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5666, d1=0.000, d2=9.113\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">5667, d1=0.000, d2=9.151\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5668, d1=0.000, d2=9.164\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5669, d1=0.000, d2=9.139\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">5670, d1=0.000, d2=9.118\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5671, d1=0.000, d2=9.137\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">5672, d1=0.000, d2=9.132\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5673, d1=0.000, d2=9.098\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5674, d1=0.000, d2=9.085\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5675, d1=0.000, d2=9.157\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5676, d1=0.000, d2=9.196\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5677, d1=0.000, d2=9.162\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5678, d1=0.000, d2=9.172\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5679, d1=0.000, d2=9.243\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5680, d1=0.000, d2=9.252\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5681, d1=0.000, d2=9.223\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">5682, d1=0.000, d2=9.262\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5683, d1=0.000, d2=9.309\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">5684, d1=0.000, d2=9.290\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5685, d1=0.000, d2=9.289\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">5686, d1=0.000, d2=9.301\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5687, d1=0.000, d2=9.262\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5688, d1=0.000, d2=9.266\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5689, d1=0.000, d2=9.324\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5690, d1=0.000, d2=9.332\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5691, d1=0.000, d2=9.296\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5692, d1=0.000, d2=9.314\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5693, d1=0.000, d2=9.323\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5694, d1=0.000, d2=9.284\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5695, d1=0.000, d2=9.295\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5696, d1=0.000, d2=9.310\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5697, d1=0.000, d2=9.181\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5698, d1=0.000, d2=9.220\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5699, d1=0.000, d2=9.190\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5700, d1=0.000, d2=9.050\n",
            "2/2 [==============================] - 0s 34ms/step\n",
            ">5701, d1=0.000, d2=9.163\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">5702, d1=0.000, d2=9.039\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5703, d1=0.000, d2=9.164\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">5704, d1=0.000, d2=9.039\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5705, d1=0.000, d2=9.177\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5706, d1=0.000, d2=8.997\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5707, d1=0.000, d2=9.254\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5708, d1=0.000, d2=8.904\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5709, d1=0.000, d2=9.551\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5710, d1=0.000, d2=8.745\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5711, d1=0.000, d2=9.814\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5712, d1=0.000, d2=8.817\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5713, d1=0.000, d2=9.455\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5714, d1=0.000, d2=9.411\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">5715, d1=0.000, d2=8.926\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5716, d1=0.000, d2=9.751\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5717, d1=0.000, d2=9.005\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5718, d1=0.000, d2=9.317\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5719, d1=0.000, d2=9.517\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5720, d1=0.000, d2=8.974\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5721, d1=0.000, d2=9.647\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5722, d1=0.000, d2=9.152\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5723, d1=0.000, d2=9.271\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">5724, d1=0.000, d2=9.540\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5725, d1=0.000, d2=9.004\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5726, d1=0.000, d2=9.628\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5727, d1=0.000, d2=8.956\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5728, d1=0.000, d2=9.398\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5729, d1=0.000, d2=9.254\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5730, d1=0.000, d2=9.124\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">5731, d1=0.000, d2=9.545\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">5732, d1=0.000, d2=8.909\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5733, d1=0.000, d2=9.788\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5734, d1=0.000, d2=8.485\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5735, d1=0.000, d2=10.547\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5736, d1=0.001, d2=7.281\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5737, d1=0.001, d2=13.344\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5738, d1=0.004, d2=3.775\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5739, d1=0.032, d2=21.959\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5740, d1=0.083, d2=29.256\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5741, d1=0.169, d2=27.084\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5742, d1=0.110, d2=17.901\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">5743, d1=0.017, d2=5.894\n",
            "2/2 [==============================] - 0s 27ms/step\n",
            ">5744, d1=0.004, d2=0.067\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">5745, d1=1.849, d2=44.849\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5746, d1=0.450, d2=79.784\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5747, d1=1.796, d2=105.759\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5748, d1=3.057, d2=122.269\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5749, d1=3.733, d2=129.516\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5750, d1=3.516, d2=129.244\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5751, d1=2.866, d2=123.451\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5752, d1=2.070, d2=112.918\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5753, d1=1.319, d2=97.981\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5754, d1=0.774, d2=81.632\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5755, d1=0.555, d2=65.048\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5756, d1=0.417, d2=48.161\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5757, d1=0.277, d2=31.006\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5758, d1=0.136, d2=13.682\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5759, d1=0.004, d2=0.049\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5760, d1=2.101, d2=30.345\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">5761, d1=0.134, d2=58.689\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5762, d1=0.374, d2=82.408\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">5763, d1=0.581, d2=102.583\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">5764, d1=0.759, d2=119.641\n",
            "2/2 [==============================] - 0s 34ms/step\n",
            ">5765, d1=0.911, d2=133.946\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5766, d1=1.039, d2=145.684\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5767, d1=1.150, d2=155.051\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5768, d1=1.291, d2=161.902\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5769, d1=1.412, d2=166.264\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5770, d1=1.498, d2=168.279\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5771, d1=1.535, d2=168.075\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5772, d1=1.526, d2=166.018\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5773, d1=1.486, d2=162.506\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5774, d1=1.430, d2=157.798\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5775, d1=1.360, d2=152.050\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5776, d1=1.295, d2=145.825\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5777, d1=1.255, d2=139.245\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5778, d1=1.212, d2=132.362\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5779, d1=1.168, d2=125.205\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5780, d1=1.121, d2=117.810\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5781, d1=1.072, d2=110.183\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5782, d1=1.022, d2=102.357\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5783, d1=0.969, d2=94.328\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">5784, d1=0.916, d2=86.083\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5785, d1=0.860, d2=77.655\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5786, d1=0.804, d2=69.061\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5787, d1=0.746, d2=60.310\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5788, d1=0.687, d2=51.421\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5789, d1=0.626, d2=42.403\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5790, d1=0.565, d2=33.276\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5791, d1=0.502, d2=24.029\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5792, d1=0.439, d2=14.675\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5793, d1=0.374, d2=5.209\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5794, d1=0.337, d2=0.248\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5795, d1=2.011, d2=23.888\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5796, d1=0.482, d2=45.146\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5797, d1=0.672, d2=63.350\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5798, d1=0.838, d2=78.880\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5799, d1=0.981, d2=92.041\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5800, d1=1.104, d2=103.091\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5801, d1=1.210, d2=112.257\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">5802, d1=1.302, d2=119.616\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">5803, d1=1.435, d2=124.925\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5804, d1=1.576, d2=127.997\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5805, d1=1.687, d2=128.983\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5806, d1=1.741, d2=128.062\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5807, d1=1.741, d2=125.412\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5808, d1=1.692, d2=121.204\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5809, d1=1.602, d2=115.724\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5810, d1=1.503, d2=109.533\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5811, d1=1.418, d2=102.828\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5812, d1=1.361, d2=95.965\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5813, d1=1.318, d2=88.946\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5814, d1=1.274, d2=81.833\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5815, d1=1.229, d2=74.652\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">5816, d1=1.183, d2=67.409\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5817, d1=1.136, d2=60.143\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5818, d1=1.088, d2=52.858\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5819, d1=1.040, d2=45.497\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">5820, d1=0.991, d2=38.095\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">5821, d1=0.941, d2=30.661\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5822, d1=0.891, d2=23.243\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">5823, d1=0.841, d2=15.839\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5824, d1=0.790, d2=8.442\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5825, d1=0.740, d2=2.037\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5826, d1=0.851, d2=4.886\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5827, d1=0.704, d2=7.811\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5828, d1=0.701, d2=9.857\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5829, d1=0.700, d2=11.200\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5830, d1=0.695, d2=11.938\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5831, d1=0.685, d2=12.141\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5832, d1=0.671, d2=11.864\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5833, d1=0.653, d2=11.170\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5834, d1=0.632, d2=10.119\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5835, d1=0.609, d2=8.734\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">5836, d1=0.582, d2=7.248\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5837, d1=0.554, d2=5.641\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5838, d1=0.526, d2=4.062\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">5839, d1=0.506, d2=3.346\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">5840, d1=0.494, d2=4.221\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">5841, d1=0.459, d2=5.390\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5842, d1=0.436, d2=6.141\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5843, d1=0.419, d2=6.356\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5844, d1=0.399, d2=6.065\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5845, d1=0.375, d2=5.362\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5846, d1=0.350, d2=4.440\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5847, d1=0.327, d2=3.759\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5848, d1=0.308, d2=3.943\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5849, d1=0.283, d2=4.690\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5850, d1=0.256, d2=5.358\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5851, d1=0.233, d2=5.663\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5852, d1=0.210, d2=5.548\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5853, d1=0.185, d2=5.078\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5854, d1=0.158, d2=4.439\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5855, d1=0.133, d2=4.015\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5856, d1=0.109, d2=4.176\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5857, d1=0.082, d2=4.695\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">5858, d1=0.055, d2=5.139\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5859, d1=0.030, d2=5.335\n",
            "2/2 [==============================] - 0s 27ms/step\n",
            ">5860, d1=0.011, d2=5.555\n",
            "2/2 [==============================] - 0s 56ms/step\n",
            ">5861, d1=0.004, d2=5.937\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">5862, d1=0.003, d2=6.418\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">5863, d1=0.002, d2=6.923\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">5864, d1=0.001, d2=7.405\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5865, d1=0.001, d2=7.838\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5866, d1=0.000, d2=8.206\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5867, d1=0.000, d2=8.501\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5868, d1=0.000, d2=8.724\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5869, d1=0.000, d2=8.872\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5870, d1=0.000, d2=8.955\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5871, d1=0.000, d2=8.974\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5872, d1=0.000, d2=8.932\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5873, d1=0.000, d2=8.838\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5874, d1=0.000, d2=8.703\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5875, d1=0.000, d2=8.532\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5876, d1=0.000, d2=8.329\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5877, d1=0.000, d2=8.099\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">5878, d1=0.000, d2=7.846\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">5879, d1=0.000, d2=7.583\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">5880, d1=0.001, d2=7.325\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">5881, d1=0.001, d2=7.087\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5882, d1=0.001, d2=6.886\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">5883, d1=0.001, d2=6.737\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5884, d1=0.001, d2=6.656\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5885, d1=0.001, d2=6.647\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5886, d1=0.001, d2=6.704\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5887, d1=0.001, d2=6.815\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5888, d1=0.001, d2=6.958\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5889, d1=0.001, d2=7.112\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5890, d1=0.001, d2=7.265\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5891, d1=0.001, d2=7.395\n",
            "2/2 [==============================] - 0s 27ms/step\n",
            ">5892, d1=0.001, d2=7.480\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5893, d1=0.001, d2=7.505\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5894, d1=0.001, d2=7.451\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5895, d1=0.002, d2=7.292\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5896, d1=0.002, d2=7.017\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5897, d1=0.003, d2=6.634\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5898, d1=0.004, d2=6.189\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5899, d1=0.005, d2=5.775\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5900, d1=0.006, d2=5.515\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">5901, d1=0.007, d2=5.491\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5902, d1=0.008, d2=5.653\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5903, d1=0.008, d2=5.847\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5904, d1=0.009, d2=5.927\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5905, d1=0.009, d2=5.844\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5906, d1=0.009, d2=5.649\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5907, d1=0.009, d2=5.478\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">5908, d1=0.009, d2=5.462\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5909, d1=0.008, d2=5.625\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5910, d1=0.008, d2=5.878\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5911, d1=0.007, d2=6.097\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5912, d1=0.006, d2=6.219\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5913, d1=0.006, d2=6.235\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5914, d1=0.005, d2=6.199\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5915, d1=0.005, d2=6.167\n",
            "2/2 [==============================] - 0s 27ms/step\n",
            ">5916, d1=0.004, d2=6.183\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5917, d1=0.004, d2=6.272\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5918, d1=0.004, d2=6.416\n",
            "2/2 [==============================] - 0s 35ms/step\n",
            ">5919, d1=0.003, d2=6.572\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5920, d1=0.003, d2=6.700\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5921, d1=0.003, d2=6.779\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5922, d1=0.003, d2=6.801\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5923, d1=0.003, d2=6.775\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5924, d1=0.003, d2=6.719\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5925, d1=0.003, d2=6.659\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5926, d1=0.003, d2=6.614\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5927, d1=0.003, d2=6.596\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5928, d1=0.003, d2=6.607\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5929, d1=0.003, d2=6.641\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5930, d1=0.003, d2=6.683\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5931, d1=0.003, d2=6.713\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">5932, d1=0.003, d2=6.728\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5933, d1=0.003, d2=6.708\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5934, d1=0.003, d2=6.662\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5935, d1=0.003, d2=6.609\n",
            "2/2 [==============================] - 0s 32ms/step\n",
            ">5936, d1=0.003, d2=6.556\n",
            "2/2 [==============================] - 0s 38ms/step\n",
            ">5937, d1=0.003, d2=6.518\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">5938, d1=0.003, d2=6.504\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5939, d1=0.003, d2=6.525\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5940, d1=0.003, d2=6.564\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5941, d1=0.003, d2=6.605\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5942, d1=0.003, d2=6.642\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5943, d1=0.003, d2=6.668\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5944, d1=0.003, d2=6.674\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5945, d1=0.003, d2=6.671\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">5946, d1=0.003, d2=6.661\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5947, d1=0.003, d2=6.650\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5948, d1=0.003, d2=6.644\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5949, d1=0.003, d2=6.626\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">5950, d1=0.003, d2=6.578\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5951, d1=0.003, d2=6.468\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5952, d1=0.004, d2=6.268\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5953, d1=0.004, d2=5.995\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5954, d1=0.005, d2=5.716\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5955, d1=0.006, d2=5.530\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">5956, d1=0.007, d2=5.489\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">5957, d1=0.008, d2=5.514\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5958, d1=0.009, d2=5.481\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5959, d1=0.010, d2=5.357\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5960, d1=0.010, d2=5.252\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">5961, d1=0.010, d2=5.263\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5962, d1=0.010, d2=5.359\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5963, d1=0.010, d2=5.397\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5964, d1=0.010, d2=5.334\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5965, d1=0.010, d2=5.274\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5966, d1=0.010, d2=5.306\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5967, d1=0.010, d2=5.391\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5968, d1=0.009, d2=5.420\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5969, d1=0.009, d2=5.375\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5970, d1=0.009, d2=5.330\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5971, d1=0.009, d2=5.345\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5972, d1=0.009, d2=5.390\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5973, d1=0.009, d2=5.393\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">5974, d1=0.009, d2=5.336\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">5975, d1=0.010, d2=5.277\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5976, d1=0.010, d2=5.263\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5977, d1=0.010, d2=5.280\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5978, d1=0.010, d2=5.280\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5979, d1=0.011, d2=5.225\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5980, d1=0.011, d2=5.160\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">5981, d1=0.011, d2=5.144\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5982, d1=0.012, d2=5.164\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5983, d1=0.012, d2=5.165\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5984, d1=0.012, d2=5.122\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5985, d1=0.012, d2=5.089\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">5986, d1=0.012, d2=5.098\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">5987, d1=0.012, d2=5.125\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5988, d1=0.012, d2=5.123\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5989, d1=0.012, d2=5.095\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">5990, d1=0.012, d2=5.091\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5991, d1=0.012, d2=5.120\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5992, d1=0.012, d2=5.142\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">5993, d1=0.012, d2=5.146\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5994, d1=0.012, d2=5.139\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5995, d1=0.011, d2=5.148\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5996, d1=0.011, d2=5.170\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">5997, d1=0.011, d2=5.189\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">5998, d1=0.011, d2=5.191\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">5999, d1=0.011, d2=5.184\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6000, d1=0.011, d2=5.195\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6001, d1=0.010, d2=5.218\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6002, d1=0.010, d2=5.238\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6003, d1=0.010, d2=5.242\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6004, d1=0.010, d2=5.246\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6005, d1=0.010, d2=5.260\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6006, d1=0.010, d2=5.285\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6007, d1=0.010, d2=5.302\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6008, d1=0.010, d2=5.300\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6009, d1=0.010, d2=5.292\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6010, d1=0.010, d2=5.303\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6011, d1=0.010, d2=5.319\n",
            "2/2 [==============================] - 0s 62ms/step\n",
            ">6012, d1=0.010, d2=5.320\n",
            "2/2 [==============================] - 0s 35ms/step\n",
            ">6013, d1=0.010, d2=5.304\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">6014, d1=0.010, d2=5.289\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6015, d1=0.010, d2=5.289\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6016, d1=0.010, d2=5.299\n",
            "2/2 [==============================] - 0s 27ms/step\n",
            ">6017, d1=0.010, d2=5.299\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6018, d1=0.010, d2=5.275\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6019, d1=0.010, d2=5.249\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6020, d1=0.010, d2=5.246\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6021, d1=0.011, d2=5.258\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6022, d1=0.011, d2=5.257\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6023, d1=0.011, d2=5.241\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6024, d1=0.011, d2=5.225\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6025, d1=0.011, d2=5.220\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6026, d1=0.011, d2=5.224\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6027, d1=0.011, d2=5.221\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6028, d1=0.011, d2=5.209\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6029, d1=0.011, d2=5.208\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6030, d1=0.011, d2=5.222\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">6031, d1=0.011, d2=5.232\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6032, d1=0.011, d2=5.231\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">6033, d1=0.011, d2=5.233\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6034, d1=0.011, d2=5.248\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6035, d1=0.010, d2=5.258\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6036, d1=0.010, d2=5.264\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6037, d1=0.010, d2=5.271\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6038, d1=0.010, d2=5.280\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6039, d1=0.010, d2=5.286\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6040, d1=0.010, d2=5.294\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6041, d1=0.010, d2=5.303\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6042, d1=0.010, d2=5.307\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6043, d1=0.010, d2=5.309\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6044, d1=0.010, d2=5.317\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6045, d1=0.009, d2=5.331\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6046, d1=0.009, d2=5.341\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6047, d1=0.009, d2=5.345\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6048, d1=0.009, d2=5.348\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6049, d1=0.009, d2=5.354\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">6050, d1=0.009, d2=5.357\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6051, d1=0.009, d2=5.353\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">6052, d1=0.009, d2=5.352\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6053, d1=0.009, d2=5.351\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6054, d1=0.009, d2=5.352\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6055, d1=0.009, d2=5.349\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6056, d1=0.009, d2=5.338\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6057, d1=0.010, d2=5.324\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6058, d1=0.010, d2=5.323\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6059, d1=0.010, d2=5.325\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6060, d1=0.010, d2=5.319\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6061, d1=0.010, d2=5.304\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6062, d1=0.010, d2=5.290\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6063, d1=0.010, d2=5.290\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6064, d1=0.010, d2=5.292\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">6065, d1=0.011, d2=5.285\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6066, d1=0.011, d2=5.271\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6067, d1=0.011, d2=5.259\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6068, d1=0.011, d2=5.261\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6069, d1=0.011, d2=5.266\n",
            "2/2 [==============================] - 0s 41ms/step\n",
            ">6070, d1=0.011, d2=5.264\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6071, d1=0.011, d2=5.258\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6072, d1=0.011, d2=5.251\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6073, d1=0.011, d2=5.261\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6074, d1=0.011, d2=5.281\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6075, d1=0.011, d2=5.283\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6076, d1=0.011, d2=5.272\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6077, d1=0.011, d2=5.271\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">6078, d1=0.011, d2=5.285\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6079, d1=0.011, d2=5.296\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6080, d1=0.011, d2=5.305\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6081, d1=0.011, d2=5.304\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6082, d1=0.011, d2=5.312\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6083, d1=0.011, d2=5.324\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6084, d1=0.011, d2=5.331\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6085, d1=0.011, d2=5.330\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6086, d1=0.011, d2=5.339\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6087, d1=0.010, d2=5.351\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6088, d1=0.010, d2=5.360\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">6089, d1=0.010, d2=5.369\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6090, d1=0.010, d2=5.382\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6091, d1=0.010, d2=5.395\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6092, d1=0.010, d2=5.404\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6093, d1=0.010, d2=5.411\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6094, d1=0.010, d2=5.408\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">6095, d1=0.010, d2=5.410\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6096, d1=0.010, d2=5.418\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6097, d1=0.009, d2=5.427\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6098, d1=0.009, d2=5.428\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6099, d1=0.009, d2=5.424\n",
            "2/2 [==============================] - 0s 13ms/step\n",
            ">6100, d1=0.009, d2=5.421\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6101, d1=0.009, d2=5.429\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">6102, d1=0.009, d2=5.446\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6103, d1=0.009, d2=5.462\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6104, d1=0.009, d2=5.470\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6105, d1=0.008, d2=5.478\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6106, d1=0.008, d2=5.501\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6107, d1=0.008, d2=5.532\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6108, d1=0.008, d2=5.546\n",
            "2/2 [==============================] - 0s 35ms/step\n",
            ">6109, d1=0.008, d2=5.564\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6110, d1=0.007, d2=5.594\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">6111, d1=0.007, d2=5.620\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">6112, d1=0.007, d2=5.644\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">6113, d1=0.007, d2=5.670\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6114, d1=0.006, d2=5.701\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6115, d1=0.006, d2=5.734\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6116, d1=0.006, d2=5.761\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6117, d1=0.006, d2=5.787\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6118, d1=0.005, d2=5.816\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6119, d1=0.005, d2=5.843\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6120, d1=0.005, d2=5.870\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6121, d1=0.005, d2=5.893\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6122, d1=0.005, d2=5.910\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6123, d1=0.005, d2=5.925\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">6124, d1=0.005, d2=5.941\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6125, d1=0.005, d2=5.954\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6126, d1=0.005, d2=5.965\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6127, d1=0.004, d2=5.974\n",
            "2/2 [==============================] - 0s 35ms/step\n",
            ">6128, d1=0.004, d2=5.978\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6129, d1=0.004, d2=5.982\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6130, d1=0.004, d2=5.986\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">6131, d1=0.004, d2=5.983\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6132, d1=0.004, d2=5.967\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6133, d1=0.004, d2=5.949\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6134, d1=0.005, d2=5.939\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6135, d1=0.005, d2=5.939\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6136, d1=0.005, d2=5.938\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6137, d1=0.005, d2=5.928\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6138, d1=0.005, d2=5.911\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6139, d1=0.005, d2=5.902\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6140, d1=0.005, d2=5.905\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6141, d1=0.005, d2=5.913\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6142, d1=0.005, d2=5.918\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6143, d1=0.005, d2=5.916\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6144, d1=0.005, d2=5.911\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6145, d1=0.005, d2=5.918\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6146, d1=0.005, d2=5.924\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6147, d1=0.005, d2=5.934\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6148, d1=0.005, d2=5.945\n",
            "2/2 [==============================] - 0s 42ms/step\n",
            ">6149, d1=0.004, d2=5.961\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">6150, d1=0.004, d2=5.970\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6151, d1=0.004, d2=5.973\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6152, d1=0.004, d2=5.976\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6153, d1=0.004, d2=5.984\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6154, d1=0.004, d2=5.995\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6155, d1=0.004, d2=6.010\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6156, d1=0.004, d2=6.021\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">6157, d1=0.004, d2=6.028\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6158, d1=0.004, d2=6.033\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6159, d1=0.004, d2=6.040\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6160, d1=0.004, d2=6.049\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6161, d1=0.004, d2=6.066\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">6162, d1=0.004, d2=6.085\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6163, d1=0.004, d2=6.099\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6164, d1=0.004, d2=6.105\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6165, d1=0.004, d2=6.110\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6166, d1=0.004, d2=6.116\n",
            "2/2 [==============================] - 0s 38ms/step\n",
            ">6167, d1=0.004, d2=6.132\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">6168, d1=0.004, d2=6.151\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">6169, d1=0.004, d2=6.169\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">6170, d1=0.003, d2=6.182\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6171, d1=0.003, d2=6.190\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6172, d1=0.003, d2=6.198\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6173, d1=0.003, d2=6.213\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6174, d1=0.003, d2=6.233\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6175, d1=0.003, d2=6.252\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6176, d1=0.003, d2=6.267\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">6177, d1=0.003, d2=6.277\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6178, d1=0.003, d2=6.284\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6179, d1=0.003, d2=6.291\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6180, d1=0.003, d2=6.300\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6181, d1=0.003, d2=6.313\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6182, d1=0.003, d2=6.325\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6183, d1=0.003, d2=6.325\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6184, d1=0.003, d2=6.312\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6185, d1=0.003, d2=6.293\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6186, d1=0.003, d2=6.279\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6187, d1=0.003, d2=6.277\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">6188, d1=0.003, d2=6.284\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">6189, d1=0.003, d2=6.288\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6190, d1=0.003, d2=6.283\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6191, d1=0.003, d2=6.272\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6192, d1=0.003, d2=6.260\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6193, d1=0.003, d2=6.254\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6194, d1=0.003, d2=6.259\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6195, d1=0.003, d2=6.271\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6196, d1=0.003, d2=6.284\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6197, d1=0.003, d2=6.290\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6198, d1=0.003, d2=6.289\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6199, d1=0.003, d2=6.286\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6200, d1=0.003, d2=6.321\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6201, d1=0.003, d2=6.370\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6202, d1=0.003, d2=6.421\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6203, d1=0.003, d2=6.440\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6204, d1=0.003, d2=6.422\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6205, d1=0.003, d2=6.391\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6206, d1=0.003, d2=6.379\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6207, d1=0.003, d2=6.399\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6208, d1=0.003, d2=6.440\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6209, d1=0.002, d2=6.478\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6210, d1=0.002, d2=6.496\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6211, d1=0.002, d2=6.493\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6212, d1=0.002, d2=6.478\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6213, d1=0.002, d2=6.470\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6214, d1=0.002, d2=6.482\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6215, d1=0.002, d2=6.510\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6216, d1=0.002, d2=6.545\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6217, d1=0.002, d2=6.570\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6218, d1=0.002, d2=6.579\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6219, d1=0.002, d2=6.576\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6220, d1=0.002, d2=6.571\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6221, d1=0.002, d2=6.575\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6222, d1=0.002, d2=6.589\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6223, d1=0.002, d2=6.610\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6224, d1=0.002, d2=6.633\n",
            "2/2 [==============================] - 0s 27ms/step\n",
            ">6225, d1=0.002, d2=6.649\n",
            "2/2 [==============================] - 0s 37ms/step\n",
            ">6226, d1=0.002, d2=6.655\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">6227, d1=0.002, d2=6.654\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">6228, d1=0.002, d2=6.649\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6229, d1=0.002, d2=6.650\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6230, d1=0.002, d2=6.660\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6231, d1=0.002, d2=6.675\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6232, d1=0.002, d2=6.694\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6233, d1=0.002, d2=6.707\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6234, d1=0.002, d2=6.710\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6235, d1=0.002, d2=6.709\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6236, d1=0.002, d2=6.710\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6237, d1=0.002, d2=6.716\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6238, d1=0.002, d2=6.735\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6239, d1=0.002, d2=6.760\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6240, d1=0.002, d2=6.781\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6241, d1=0.002, d2=6.799\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6242, d1=0.002, d2=6.813\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6243, d1=0.002, d2=6.827\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6244, d1=0.002, d2=6.838\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6245, d1=0.002, d2=6.851\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6246, d1=0.002, d2=6.871\n",
            "2/2 [==============================] - 0s 32ms/step\n",
            ">6247, d1=0.001, d2=6.895\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6248, d1=0.001, d2=6.919\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6249, d1=0.001, d2=6.939\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6250, d1=0.001, d2=6.957\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6251, d1=0.001, d2=6.969\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6252, d1=0.001, d2=6.979\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6253, d1=0.001, d2=6.991\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6254, d1=0.001, d2=7.009\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6255, d1=0.001, d2=7.031\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6256, d1=0.001, d2=7.056\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6257, d1=0.001, d2=7.088\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6258, d1=0.001, d2=7.117\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6259, d1=0.001, d2=7.137\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6260, d1=0.001, d2=7.149\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6261, d1=0.001, d2=7.158\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6262, d1=0.001, d2=7.167\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6263, d1=0.001, d2=7.175\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6264, d1=0.001, d2=7.184\n",
            "2/2 [==============================] - 0s 36ms/step\n",
            ">6265, d1=0.001, d2=7.198\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">6266, d1=0.001, d2=7.215\n",
            "2/2 [==============================] - 0s 38ms/step\n",
            ">6267, d1=0.001, d2=7.232\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6268, d1=0.001, d2=7.248\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6269, d1=0.001, d2=7.263\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6270, d1=0.001, d2=7.278\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6271, d1=0.001, d2=7.292\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6272, d1=0.001, d2=7.300\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6273, d1=0.001, d2=7.308\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6274, d1=0.001, d2=7.317\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6275, d1=0.001, d2=7.324\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6276, d1=0.001, d2=7.333\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6277, d1=0.001, d2=7.342\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6278, d1=0.001, d2=7.352\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6279, d1=0.001, d2=7.361\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6280, d1=0.001, d2=7.369\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6281, d1=0.001, d2=7.378\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6282, d1=0.001, d2=7.385\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6283, d1=0.001, d2=7.397\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6284, d1=0.001, d2=7.410\n",
            "2/2 [==============================] - 0s 31ms/step\n",
            ">6285, d1=0.001, d2=7.424\n",
            "2/2 [==============================] - 0s 33ms/step\n",
            ">6286, d1=0.001, d2=7.431\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6287, d1=0.001, d2=7.429\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6288, d1=0.001, d2=7.418\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6289, d1=0.001, d2=7.398\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6290, d1=0.001, d2=7.377\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6291, d1=0.001, d2=7.361\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6292, d1=0.001, d2=7.356\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6293, d1=0.001, d2=7.358\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6294, d1=0.001, d2=7.366\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6295, d1=0.001, d2=7.372\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6296, d1=0.001, d2=7.375\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6297, d1=0.001, d2=7.375\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6298, d1=0.001, d2=7.368\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6299, d1=0.001, d2=7.357\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6300, d1=0.001, d2=7.348\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6301, d1=0.001, d2=7.347\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6302, d1=0.001, d2=7.351\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6303, d1=0.001, d2=7.358\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6304, d1=0.001, d2=7.366\n",
            "2/2 [==============================] - 0s 41ms/step\n",
            ">6305, d1=0.001, d2=7.376\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">6306, d1=0.001, d2=7.385\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6307, d1=0.001, d2=7.390\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6308, d1=0.001, d2=7.400\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6309, d1=0.001, d2=7.412\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6310, d1=0.001, d2=7.417\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6311, d1=0.001, d2=7.417\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">6312, d1=0.001, d2=7.415\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6313, d1=0.001, d2=7.415\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6314, d1=0.001, d2=7.418\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6315, d1=0.001, d2=7.425\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6316, d1=0.001, d2=7.434\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6317, d1=0.001, d2=7.444\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6318, d1=0.001, d2=7.453\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6319, d1=0.001, d2=7.461\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6320, d1=0.001, d2=7.466\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6321, d1=0.001, d2=7.468\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6322, d1=0.001, d2=7.469\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6323, d1=0.001, d2=7.471\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6324, d1=0.001, d2=7.474\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">6325, d1=0.001, d2=7.478\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6326, d1=0.001, d2=7.484\n",
            "2/2 [==============================] - 0s 34ms/step\n",
            ">6327, d1=0.001, d2=7.492\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">6328, d1=0.001, d2=7.500\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6329, d1=0.001, d2=7.507\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6330, d1=0.001, d2=7.513\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6331, d1=0.001, d2=7.522\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6332, d1=0.001, d2=7.533\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6333, d1=0.001, d2=7.548\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6334, d1=0.001, d2=7.560\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6335, d1=0.001, d2=7.569\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6336, d1=0.001, d2=7.578\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6337, d1=0.001, d2=7.587\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6338, d1=0.001, d2=7.598\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6339, d1=0.001, d2=7.613\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6340, d1=0.001, d2=7.629\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6341, d1=0.001, d2=7.645\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6342, d1=0.001, d2=7.661\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6343, d1=0.001, d2=7.675\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6344, d1=0.001, d2=7.688\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6345, d1=0.001, d2=7.701\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6346, d1=0.001, d2=7.711\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6347, d1=0.001, d2=7.720\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">6348, d1=0.001, d2=7.728\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6349, d1=0.001, d2=7.736\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6350, d1=0.001, d2=7.747\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6351, d1=0.001, d2=7.759\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6352, d1=0.001, d2=7.770\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6353, d1=0.001, d2=7.781\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6354, d1=0.001, d2=7.796\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6355, d1=0.001, d2=7.809\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6356, d1=0.001, d2=7.817\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6357, d1=0.001, d2=7.823\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6358, d1=0.001, d2=7.827\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6359, d1=0.001, d2=7.833\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6360, d1=0.001, d2=7.840\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6361, d1=0.001, d2=7.847\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6362, d1=0.001, d2=7.856\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6363, d1=0.001, d2=7.866\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6364, d1=0.001, d2=7.875\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6365, d1=0.001, d2=7.883\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6366, d1=0.001, d2=7.887\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">6367, d1=0.001, d2=7.888\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">6368, d1=0.000, d2=7.890\n",
            "2/2 [==============================] - 0s 31ms/step\n",
            ">6369, d1=0.000, d2=7.895\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6370, d1=0.000, d2=7.903\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6371, d1=0.000, d2=7.911\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6372, d1=0.000, d2=7.916\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6373, d1=0.000, d2=7.920\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6374, d1=0.000, d2=7.921\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6375, d1=0.000, d2=7.922\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6376, d1=0.000, d2=7.926\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6377, d1=0.000, d2=7.936\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6378, d1=0.000, d2=7.949\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6379, d1=0.000, d2=7.962\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6380, d1=0.000, d2=7.971\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6381, d1=0.000, d2=7.977\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6382, d1=0.000, d2=7.979\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6383, d1=0.000, d2=7.981\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6384, d1=0.000, d2=7.984\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6385, d1=0.000, d2=7.988\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6386, d1=0.000, d2=7.993\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6387, d1=0.000, d2=8.000\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6388, d1=0.000, d2=8.011\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">6389, d1=0.000, d2=8.024\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6390, d1=0.000, d2=8.038\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">6391, d1=0.000, d2=8.051\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6392, d1=0.000, d2=8.061\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6393, d1=0.000, d2=8.074\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6394, d1=0.000, d2=8.085\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6395, d1=0.000, d2=8.093\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6396, d1=0.000, d2=8.100\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6397, d1=0.000, d2=8.106\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">6398, d1=0.000, d2=8.113\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6399, d1=0.000, d2=8.123\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6400, d1=0.000, d2=8.136\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">6401, d1=0.000, d2=8.150\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6402, d1=0.000, d2=8.165\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6403, d1=0.000, d2=8.181\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6404, d1=0.000, d2=8.196\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">6405, d1=0.000, d2=8.210\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6406, d1=0.000, d2=8.219\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6407, d1=0.000, d2=8.219\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6408, d1=0.000, d2=8.216\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6409, d1=0.000, d2=8.217\n",
            "2/2 [==============================] - 0s 36ms/step\n",
            ">6410, d1=0.000, d2=8.220\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6411, d1=0.000, d2=8.222\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6412, d1=0.000, d2=8.226\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6413, d1=0.000, d2=8.233\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6414, d1=0.000, d2=8.239\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6415, d1=0.000, d2=8.245\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6416, d1=0.000, d2=8.251\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6417, d1=0.000, d2=8.254\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6418, d1=0.000, d2=8.255\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6419, d1=0.000, d2=8.254\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6420, d1=0.000, d2=8.249\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6421, d1=0.000, d2=8.241\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6422, d1=0.000, d2=8.236\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6423, d1=0.000, d2=8.237\n",
            "2/2 [==============================] - 0s 35ms/step\n",
            ">6424, d1=0.000, d2=8.240\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6425, d1=0.000, d2=8.244\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">6426, d1=0.000, d2=8.247\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6427, d1=0.000, d2=8.250\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6428, d1=0.000, d2=8.253\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6429, d1=0.000, d2=8.258\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6430, d1=0.000, d2=8.262\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6431, d1=0.000, d2=8.261\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6432, d1=0.000, d2=8.258\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6433, d1=0.000, d2=8.254\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6434, d1=0.000, d2=8.254\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6435, d1=0.000, d2=8.256\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6436, d1=0.000, d2=8.261\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6437, d1=0.000, d2=8.268\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6438, d1=0.000, d2=8.278\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6439, d1=0.000, d2=8.286\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6440, d1=0.000, d2=8.291\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6441, d1=0.000, d2=8.294\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6442, d1=0.000, d2=8.294\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">6443, d1=0.000, d2=8.294\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6444, d1=0.000, d2=8.291\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">6445, d1=0.000, d2=8.287\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6446, d1=0.000, d2=8.286\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6447, d1=0.000, d2=8.288\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6448, d1=0.000, d2=8.294\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6449, d1=0.000, d2=8.300\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6450, d1=0.000, d2=8.306\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6451, d1=0.000, d2=8.312\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6452, d1=0.000, d2=8.317\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6453, d1=0.000, d2=8.320\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6454, d1=0.000, d2=8.321\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6455, d1=0.000, d2=8.322\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6456, d1=0.000, d2=8.326\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6457, d1=0.000, d2=8.330\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6458, d1=0.000, d2=8.335\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6459, d1=0.000, d2=8.341\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6460, d1=0.000, d2=8.352\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6461, d1=0.000, d2=8.359\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6462, d1=0.000, d2=8.363\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">6463, d1=0.000, d2=8.364\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">6464, d1=0.000, d2=8.363\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6465, d1=0.000, d2=8.361\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6466, d1=0.000, d2=8.359\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6467, d1=0.000, d2=8.358\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6468, d1=0.000, d2=8.359\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6469, d1=0.000, d2=8.361\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6470, d1=0.000, d2=8.363\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6471, d1=0.000, d2=8.369\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6472, d1=0.000, d2=8.374\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6473, d1=0.000, d2=8.376\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6474, d1=0.000, d2=8.376\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6475, d1=0.000, d2=8.372\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6476, d1=0.000, d2=8.367\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6477, d1=0.000, d2=8.360\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6478, d1=0.000, d2=8.351\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6479, d1=0.000, d2=8.342\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6480, d1=0.000, d2=8.334\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6481, d1=0.000, d2=8.326\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6482, d1=0.000, d2=8.315\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6483, d1=0.000, d2=8.302\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">6484, d1=0.000, d2=8.286\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6485, d1=0.000, d2=8.269\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6486, d1=0.000, d2=8.252\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6487, d1=0.000, d2=8.239\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6488, d1=0.000, d2=8.227\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6489, d1=0.000, d2=8.218\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6490, d1=0.000, d2=8.208\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6491, d1=0.000, d2=8.201\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6492, d1=0.000, d2=8.192\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6493, d1=0.000, d2=8.183\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6494, d1=0.000, d2=8.173\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6495, d1=0.000, d2=8.162\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6496, d1=0.000, d2=8.152\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6497, d1=0.000, d2=8.145\n",
            "2/2 [==============================] - 0s 13ms/step\n",
            ">6498, d1=0.000, d2=8.142\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6499, d1=0.000, d2=8.140\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6500, d1=0.000, d2=8.136\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6501, d1=0.000, d2=8.129\n",
            "2/2 [==============================] - 0s 35ms/step\n",
            ">6502, d1=0.000, d2=8.120\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">6503, d1=0.000, d2=8.113\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">6504, d1=0.000, d2=8.106\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6505, d1=0.000, d2=8.102\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6506, d1=0.000, d2=8.100\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">6507, d1=0.000, d2=8.104\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6508, d1=0.000, d2=8.105\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6509, d1=0.000, d2=8.101\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6510, d1=0.000, d2=8.094\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6511, d1=0.000, d2=8.086\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6512, d1=0.000, d2=8.084\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6513, d1=0.000, d2=8.084\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6514, d1=0.000, d2=8.084\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6515, d1=0.000, d2=8.080\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6516, d1=0.000, d2=8.070\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6517, d1=0.000, d2=8.059\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6518, d1=0.000, d2=8.049\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6519, d1=0.000, d2=8.043\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6520, d1=0.000, d2=8.041\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">6521, d1=0.000, d2=8.040\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">6522, d1=0.000, d2=8.035\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">6523, d1=0.000, d2=8.024\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6524, d1=0.000, d2=8.012\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6525, d1=0.000, d2=8.001\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6526, d1=0.000, d2=7.989\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6527, d1=0.000, d2=7.978\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6528, d1=0.000, d2=7.972\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6529, d1=0.000, d2=7.968\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6530, d1=0.000, d2=8.028\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6531, d1=0.000, d2=8.098\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6532, d1=0.001, d2=8.065\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6533, d1=0.001, d2=8.028\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6534, d1=0.001, d2=7.996\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6535, d1=0.001, d2=8.002\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6536, d1=0.001, d2=7.947\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6537, d1=0.001, d2=7.855\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6538, d1=0.001, d2=7.837\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6539, d1=0.001, d2=7.880\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6540, d1=0.001, d2=7.925\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6541, d1=0.001, d2=7.852\n",
            "2/2 [==============================] - 0s 32ms/step\n",
            ">6542, d1=0.001, d2=7.787\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">6543, d1=0.001, d2=7.756\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">6544, d1=0.001, d2=7.682\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6545, d1=0.001, d2=7.680\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6546, d1=0.001, d2=7.673\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6547, d1=0.001, d2=7.649\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6548, d1=0.001, d2=7.686\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6549, d1=0.001, d2=7.653\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6550, d1=0.001, d2=7.659\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6551, d1=0.001, d2=7.689\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6552, d1=0.001, d2=7.609\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6553, d1=0.001, d2=7.597\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6554, d1=0.001, d2=7.639\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6555, d1=0.001, d2=7.584\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6556, d1=0.001, d2=7.455\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6557, d1=0.001, d2=7.456\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6558, d1=0.001, d2=7.562\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6559, d1=0.001, d2=7.677\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6560, d1=0.001, d2=7.584\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6561, d1=0.001, d2=7.406\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6562, d1=0.001, d2=7.388\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6563, d1=0.001, d2=7.520\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">6564, d1=0.001, d2=7.669\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6565, d1=0.001, d2=7.578\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6566, d1=0.001, d2=7.360\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6567, d1=0.001, d2=7.319\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6568, d1=0.001, d2=7.463\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6569, d1=0.001, d2=7.651\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6570, d1=0.001, d2=7.646\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6571, d1=0.001, d2=7.594\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6572, d1=0.001, d2=7.536\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6573, d1=0.001, d2=7.531\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6574, d1=0.001, d2=7.581\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6575, d1=0.001, d2=7.544\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6576, d1=0.001, d2=7.453\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6577, d1=0.001, d2=7.474\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6578, d1=0.001, d2=7.564\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6579, d1=0.001, d2=7.549\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6580, d1=0.001, d2=7.546\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">6581, d1=0.001, d2=7.452\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6582, d1=0.001, d2=7.444\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">6583, d1=0.001, d2=7.512\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6584, d1=0.001, d2=7.480\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6585, d1=0.001, d2=7.366\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6586, d1=0.001, d2=7.388\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6587, d1=0.001, d2=7.505\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6588, d1=0.001, d2=7.489\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6589, d1=0.001, d2=7.330\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6590, d1=0.001, d2=7.303\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6591, d1=0.001, d2=7.404\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6592, d1=0.001, d2=7.513\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6593, d1=0.001, d2=7.400\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6594, d1=0.001, d2=7.204\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6595, d1=0.001, d2=7.222\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6596, d1=0.001, d2=7.379\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6597, d1=0.001, d2=7.513\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6598, d1=0.001, d2=7.342\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6599, d1=0.001, d2=7.203\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6600, d1=0.001, d2=7.228\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6601, d1=0.001, d2=7.371\n",
            "2/2 [==============================] - 0s 33ms/step\n",
            ">6602, d1=0.001, d2=7.357\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6603, d1=0.001, d2=7.213\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">6604, d1=0.001, d2=7.224\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6605, d1=0.001, d2=7.368\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6606, d1=0.001, d2=7.341\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6607, d1=0.001, d2=7.330\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6608, d1=0.001, d2=7.345\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6609, d1=0.001, d2=7.232\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6610, d1=0.001, d2=7.244\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6611, d1=0.001, d2=7.372\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6612, d1=0.001, d2=7.357\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6613, d1=0.001, d2=7.250\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6614, d1=0.001, d2=7.288\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6615, d1=0.001, d2=7.422\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6616, d1=0.001, d2=7.537\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6617, d1=0.001, d2=7.378\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6618, d1=0.001, d2=7.260\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6619, d1=0.001, d2=7.283\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6620, d1=0.001, d2=7.411\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6621, d1=0.001, d2=7.334\n",
            "2/2 [==============================] - 0s 31ms/step\n",
            ">6622, d1=0.001, d2=7.108\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6623, d1=0.001, d2=7.037\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6624, d1=0.001, d2=7.124\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6625, d1=0.001, d2=7.082\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6626, d1=0.002, d2=6.925\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6627, d1=0.002, d2=6.931\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6628, d1=0.002, d2=6.945\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6629, d1=0.002, d2=6.920\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6630, d1=0.002, d2=6.818\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">6631, d1=0.002, d2=6.798\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">6632, d1=0.002, d2=6.656\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6633, d1=0.002, d2=6.643\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6634, d1=0.002, d2=6.577\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6635, d1=0.002, d2=6.511\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6636, d1=0.002, d2=6.520\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6637, d1=0.002, d2=6.524\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6638, d1=0.002, d2=6.488\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6639, d1=0.002, d2=6.476\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6640, d1=0.002, d2=6.507\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6641, d1=0.002, d2=6.528\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6642, d1=0.002, d2=6.519\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6643, d1=0.002, d2=6.540\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6644, d1=0.002, d2=6.590\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6645, d1=0.002, d2=6.621\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6646, d1=0.002, d2=6.625\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6647, d1=0.002, d2=6.630\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6648, d1=0.002, d2=6.668\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6649, d1=0.002, d2=6.707\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6650, d1=0.002, d2=6.719\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6651, d1=0.002, d2=6.739\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6652, d1=0.002, d2=6.782\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6653, d1=0.002, d2=6.820\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6654, d1=0.002, d2=6.845\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6655, d1=0.002, d2=6.861\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6656, d1=0.002, d2=6.893\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6657, d1=0.002, d2=6.932\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6658, d1=0.002, d2=6.948\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">6659, d1=0.001, d2=6.949\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">6660, d1=0.001, d2=6.959\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6661, d1=0.001, d2=6.986\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">6662, d1=0.001, d2=7.000\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6663, d1=0.001, d2=7.004\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6664, d1=0.001, d2=7.005\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">6665, d1=0.001, d2=7.011\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6666, d1=0.001, d2=7.021\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6667, d1=0.001, d2=7.024\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6668, d1=0.001, d2=7.025\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6669, d1=0.001, d2=7.027\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6670, d1=0.001, d2=7.026\n",
            "2/2 [==============================] - 0s 36ms/step\n",
            ">6671, d1=0.001, d2=7.021\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6672, d1=0.001, d2=7.022\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6673, d1=0.001, d2=7.027\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">6674, d1=0.001, d2=7.030\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6675, d1=0.001, d2=7.017\n",
            "2/2 [==============================] - 0s 39ms/step\n",
            ">6676, d1=0.001, d2=7.020\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">6677, d1=0.001, d2=7.087\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">6678, d1=0.001, d2=7.108\n",
            "2/2 [==============================] - 0s 35ms/step\n",
            ">6679, d1=0.001, d2=7.093\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6680, d1=0.001, d2=7.084\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6681, d1=0.001, d2=7.098\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6682, d1=0.001, d2=7.116\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6683, d1=0.001, d2=7.120\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6684, d1=0.001, d2=7.108\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6685, d1=0.001, d2=7.090\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6686, d1=0.001, d2=7.083\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6687, d1=0.001, d2=7.091\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6688, d1=0.001, d2=7.101\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6689, d1=0.001, d2=7.100\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6690, d1=0.001, d2=7.089\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6691, d1=0.001, d2=7.067\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6692, d1=0.001, d2=7.022\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6693, d1=0.001, d2=6.973\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6694, d1=0.001, d2=6.944\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">6695, d1=0.001, d2=6.938\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">6696, d1=0.001, d2=6.926\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">6697, d1=0.002, d2=6.898\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">6698, d1=0.002, d2=6.863\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6699, d1=0.002, d2=6.851\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6700, d1=0.002, d2=6.861\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6701, d1=0.002, d2=6.864\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6702, d1=0.002, d2=6.853\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">6703, d1=0.002, d2=6.845\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6704, d1=0.002, d2=6.856\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6705, d1=0.002, d2=6.873\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6706, d1=0.002, d2=6.888\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6707, d1=0.002, d2=6.895\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6708, d1=0.002, d2=6.913\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">6709, d1=0.002, d2=6.941\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6710, d1=0.002, d2=6.956\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">6711, d1=0.002, d2=6.973\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6712, d1=0.001, d2=6.984\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6713, d1=0.001, d2=6.994\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">6714, d1=0.001, d2=7.009\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6715, d1=0.001, d2=7.029\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">6716, d1=0.001, d2=7.049\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">6717, d1=0.001, d2=7.062\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6718, d1=0.001, d2=7.066\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6719, d1=0.001, d2=7.060\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6720, d1=0.001, d2=7.050\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6721, d1=0.001, d2=7.034\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6722, d1=0.001, d2=7.035\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6723, d1=0.001, d2=7.033\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6724, d1=0.001, d2=7.006\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6725, d1=0.002, d2=6.965\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6726, d1=0.002, d2=6.939\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6727, d1=0.002, d2=6.903\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6728, d1=0.002, d2=6.853\n",
            "2/2 [==============================] - 0s 35ms/step\n",
            ">6729, d1=0.002, d2=6.777\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6730, d1=0.002, d2=6.669\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6731, d1=0.002, d2=6.539\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6732, d1=0.002, d2=6.412\n",
            "2/2 [==============================] - 0s 42ms/step\n",
            ">6733, d1=0.003, d2=6.341\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6734, d1=0.003, d2=6.223\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6735, d1=0.003, d2=6.126\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6736, d1=0.004, d2=6.127\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6737, d1=0.004, d2=6.039\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6738, d1=0.003, d2=5.995\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6739, d1=0.003, d2=6.276\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6740, d1=0.002, d2=6.737\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">6741, d1=0.001, d2=7.098\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6742, d1=0.001, d2=7.353\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6743, d1=0.001, d2=7.532\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6744, d1=0.001, d2=7.654\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6745, d1=0.001, d2=7.725\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6746, d1=0.001, d2=7.729\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6747, d1=0.001, d2=7.703\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6748, d1=0.001, d2=7.693\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6749, d1=0.001, d2=7.712\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6750, d1=0.001, d2=7.747\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6751, d1=0.001, d2=7.793\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">6752, d1=0.001, d2=7.828\n",
            "2/2 [==============================] - 0s 39ms/step\n",
            ">6753, d1=0.001, d2=7.838\n",
            "2/2 [==============================] - 0s 41ms/step\n",
            ">6754, d1=0.001, d2=7.819\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6755, d1=0.001, d2=7.774\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6756, d1=0.001, d2=7.728\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6757, d1=0.001, d2=7.700\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6758, d1=0.001, d2=7.698\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6759, d1=0.001, d2=7.696\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6760, d1=0.001, d2=7.687\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6761, d1=0.001, d2=7.662\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6762, d1=0.001, d2=7.620\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6763, d1=0.001, d2=7.567\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6764, d1=0.001, d2=7.512\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6765, d1=0.001, d2=7.462\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6766, d1=0.001, d2=7.414\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6767, d1=0.001, d2=7.363\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6768, d1=0.001, d2=7.304\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6769, d1=0.001, d2=7.234\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6770, d1=0.001, d2=7.167\n",
            "2/2 [==============================] - 0s 38ms/step\n",
            ">6771, d1=0.001, d2=7.110\n",
            "2/2 [==============================] - 0s 32ms/step\n",
            ">6772, d1=0.001, d2=7.066\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">6773, d1=0.001, d2=7.033\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6774, d1=0.001, d2=7.003\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6775, d1=0.001, d2=6.970\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6776, d1=0.001, d2=6.940\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6777, d1=0.001, d2=6.926\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6778, d1=0.001, d2=6.923\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6779, d1=0.001, d2=6.927\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6780, d1=0.001, d2=6.926\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6781, d1=0.001, d2=6.920\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6782, d1=0.001, d2=6.955\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6783, d1=0.001, d2=6.949\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6784, d1=0.001, d2=6.923\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6785, d1=0.001, d2=6.923\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6786, d1=0.001, d2=6.963\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6787, d1=0.001, d2=7.009\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6788, d1=0.001, d2=7.029\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6789, d1=0.001, d2=7.017\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">6790, d1=0.001, d2=7.010\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6791, d1=0.001, d2=7.067\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6792, d1=0.001, d2=7.106\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6793, d1=0.001, d2=7.098\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6794, d1=0.001, d2=7.073\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6795, d1=0.001, d2=7.064\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6796, d1=0.001, d2=7.087\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6797, d1=0.001, d2=7.111\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6798, d1=0.001, d2=7.110\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6799, d1=0.001, d2=7.076\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6800, d1=0.001, d2=7.040\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6801, d1=0.001, d2=7.040\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6802, d1=0.001, d2=7.064\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6803, d1=0.001, d2=7.091\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6804, d1=0.001, d2=7.085\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6805, d1=0.001, d2=7.021\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6806, d1=0.001, d2=7.148\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6807, d1=0.001, d2=7.103\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6808, d1=0.001, d2=6.972\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">6809, d1=0.001, d2=7.056\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6810, d1=0.001, d2=7.041\n",
            "2/2 [==============================] - 0s 32ms/step\n",
            ">6811, d1=0.001, d2=6.963\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6812, d1=0.001, d2=7.089\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6813, d1=0.001, d2=7.057\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">6814, d1=0.001, d2=6.895\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6815, d1=0.001, d2=6.830\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6816, d1=0.001, d2=6.927\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6817, d1=0.001, d2=7.056\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6818, d1=0.001, d2=7.035\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6819, d1=0.002, d2=6.783\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6820, d1=0.002, d2=6.788\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6821, d1=0.002, d2=6.985\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6822, d1=0.002, d2=6.463\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6823, d1=0.002, d2=6.116\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6824, d1=0.003, d2=6.475\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6825, d1=0.003, d2=6.596\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6826, d1=0.003, d2=6.073\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6827, d1=0.003, d2=6.089\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6828, d1=0.003, d2=6.459\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6829, d1=0.003, d2=6.153\n",
            "2/2 [==============================] - 0s 27ms/step\n",
            ">6830, d1=0.003, d2=5.990\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6831, d1=0.003, d2=6.348\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6832, d1=0.003, d2=6.266\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6833, d1=0.003, d2=6.014\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6834, d1=0.003, d2=6.271\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6835, d1=0.003, d2=6.389\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6836, d1=0.003, d2=6.146\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6837, d1=0.003, d2=6.223\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6838, d1=0.003, d2=6.468\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6839, d1=0.003, d2=6.330\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6840, d1=0.003, d2=6.217\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6841, d1=0.003, d2=6.430\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6842, d1=0.003, d2=6.479\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6843, d1=0.003, d2=6.301\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6844, d1=0.003, d2=6.681\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6845, d1=0.003, d2=6.338\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6846, d1=0.003, d2=6.115\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6847, d1=0.003, d2=6.479\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6848, d1=0.003, d2=6.463\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6849, d1=0.003, d2=6.083\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6850, d1=0.003, d2=6.278\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6851, d1=0.003, d2=6.441\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6852, d1=0.004, d2=6.056\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6853, d1=0.004, d2=6.186\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6854, d1=0.004, d2=6.356\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6855, d1=0.004, d2=5.978\n",
            "2/2 [==============================] - 0s 33ms/step\n",
            ">6856, d1=0.004, d2=6.196\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6857, d1=0.005, d2=6.159\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6858, d1=0.005, d2=5.932\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6859, d1=0.005, d2=6.271\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6860, d1=0.005, d2=5.894\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6861, d1=0.005, d2=6.178\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6862, d1=0.005, d2=5.914\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6863, d1=0.006, d2=5.967\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6864, d1=0.005, d2=6.124\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6865, d1=0.004, d2=6.329\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6866, d1=0.003, d2=6.630\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6867, d1=0.003, d2=6.402\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6868, d1=0.004, d2=6.140\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6869, d1=0.004, d2=6.365\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">6870, d1=0.005, d2=6.159\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6871, d1=0.005, d2=5.883\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6872, d1=0.006, d2=6.134\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6873, d1=0.008, d2=5.311\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6874, d1=0.010, d2=6.668\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6875, d1=0.016, d2=3.825\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6876, d1=0.036, d2=8.782\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6877, d1=0.075, d2=7.959\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6878, d1=0.065, d2=3.104\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6879, d1=0.080, d2=8.495\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">6880, d1=0.094, d2=9.949\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6881, d1=0.138, d2=7.718\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6882, d1=0.086, d2=2.649\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6883, d1=0.147, d2=10.253\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6884, d1=0.163, d2=14.266\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6885, d1=0.283, d2=14.631\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6886, d1=0.296, d2=12.083\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6887, d1=0.232, d2=7.232\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6888, d1=0.116, d2=0.963\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6889, d1=0.668, d2=18.080\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6890, d1=0.409, d2=31.731\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">6891, d1=1.157, d2=39.753\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6892, d1=1.675, d2=42.813\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">6893, d1=1.845, d2=41.443\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6894, d1=1.704, d2=36.075\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6895, d1=1.290, d2=26.900\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6896, d1=0.729, d2=15.824\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6897, d1=0.387, d2=3.950\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6898, d1=0.155, d2=0.012\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6899, d1=2.574, d2=10.976\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6900, d1=0.194, d2=23.243\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6901, d1=0.466, d2=32.862\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6902, d1=0.762, d2=39.709\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6903, d1=1.092, d2=43.381\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6904, d1=1.294, d2=44.157\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6905, d1=1.304, d2=42.356\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6906, d1=1.144, d2=38.435\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6907, d1=0.926, d2=33.365\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6908, d1=0.717, d2=27.315\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6909, d1=0.482, d2=20.719\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6910, d1=0.306, d2=13.754\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">6911, d1=0.126, d2=6.414\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6912, d1=0.013, d2=0.447\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">6913, d1=0.740, d2=7.600\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6914, d1=0.016, d2=14.327\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6915, d1=0.104, d2=19.469\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6916, d1=0.221, d2=23.101\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6917, d1=0.305, d2=25.435\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6918, d1=0.357, d2=26.611\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6919, d1=0.380, d2=26.746\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6920, d1=0.379, d2=25.925\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6921, d1=0.353, d2=24.270\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">6922, d1=0.308, d2=21.869\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6923, d1=0.244, d2=18.763\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6924, d1=0.164, d2=15.013\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6925, d1=0.082, d2=11.008\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6926, d1=0.030, d2=6.887\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6927, d1=0.002, d2=3.117\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6928, d1=0.046, d2=1.483\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6929, d1=0.235, d2=6.343\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6930, d1=0.002, d2=10.850\n",
            "2/2 [==============================] - 0s 38ms/step\n",
            ">6931, d1=0.021, d2=14.382\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">6932, d1=0.062, d2=16.986\n",
            "2/2 [==============================] - 0s 32ms/step\n",
            ">6933, d1=0.107, d2=18.519\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6934, d1=0.142, d2=19.003\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6935, d1=0.154, d2=18.553\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6936, d1=0.143, d2=17.272\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6937, d1=0.112, d2=15.271\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6938, d1=0.071, d2=12.838\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6939, d1=0.037, d2=10.167\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6940, d1=0.009, d2=7.450\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6941, d1=0.001, d2=5.015\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6942, d1=0.007, d2=3.228\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6943, d1=0.039, d2=3.021\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">6944, d1=0.047, d2=4.546\n",
            "2/2 [==============================] - 0s 32ms/step\n",
            ">6945, d1=0.010, d2=6.343\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">6946, d1=0.002, d2=7.995\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6947, d1=0.002, d2=9.377\n",
            "2/2 [==============================] - 0s 36ms/step\n",
            ">6948, d1=0.008, d2=10.277\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6949, d1=0.016, d2=10.576\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">6950, d1=0.021, d2=10.294\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6951, d1=0.019, d2=9.519\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6952, d1=0.012, d2=8.385\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6953, d1=0.005, d2=7.102\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6954, d1=0.002, d2=5.848\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6955, d1=0.003, d2=4.772\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6956, d1=0.008, d2=4.124\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6957, d1=0.015, d2=4.153\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6958, d1=0.015, d2=4.755\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6959, d1=0.008, d2=5.587\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6960, d1=0.004, d2=6.403\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6961, d1=0.004, d2=7.041\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6962, d1=0.007, d2=7.369\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6963, d1=0.010, d2=7.305\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6964, d1=0.011, d2=6.875\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6965, d1=0.009, d2=6.173\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6966, d1=0.007, d2=5.358\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6967, d1=0.007, d2=4.648\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6968, d1=0.010, d2=4.291\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6969, d1=0.014, d2=4.439\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6970, d1=0.013, d2=4.943\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6971, d1=0.010, d2=5.498\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">6972, d1=0.011, d2=5.844\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6973, d1=0.013, d2=5.842\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6974, d1=0.015, d2=5.493\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6975, d1=0.013, d2=4.938\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6976, d1=0.013, d2=4.438\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6977, d1=0.015, d2=4.276\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6978, d1=0.016, d2=4.517\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">6979, d1=0.014, d2=4.952\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6980, d1=0.013, d2=5.305\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6981, d1=0.014, d2=5.393\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">6982, d1=0.014, d2=5.193\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6983, d1=0.013, d2=4.846\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6984, d1=0.012, d2=4.585\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6985, d1=0.013, d2=4.572\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6986, d1=0.013, d2=4.785\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6987, d1=0.011, d2=5.078\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6988, d1=0.011, d2=5.282\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">6989, d1=0.011, d2=5.293\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6990, d1=0.011, d2=5.117\n",
            "2/2 [==============================] - 0s 31ms/step\n",
            ">6991, d1=0.011, d2=4.869\n",
            "2/2 [==============================] - 0s 35ms/step\n",
            ">6992, d1=0.011, d2=4.719\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6993, d1=0.011, d2=4.737\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6994, d1=0.011, d2=4.903\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">6995, d1=0.011, d2=5.102\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">6996, d1=0.011, d2=5.203\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">6997, d1=0.011, d2=5.158\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">6998, d1=0.011, d2=5.014\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">6999, d1=0.010, d2=4.876\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7000, d1=0.010, d2=4.838\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7001, d1=0.010, d2=4.920\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7002, d1=0.010, d2=5.071\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7003, d1=0.010, d2=5.201\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7004, d1=0.009, d2=5.253\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7005, d1=0.009, d2=5.215\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7006, d1=0.009, d2=5.134\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7007, d1=0.009, d2=5.078\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7008, d1=0.009, d2=5.098\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">7009, d1=0.008, d2=5.189\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">7010, d1=0.008, d2=5.304\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7011, d1=0.008, d2=5.387\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7012, d1=0.008, d2=5.410\n",
            "2/2 [==============================] - 0s 33ms/step\n",
            ">7013, d1=0.008, d2=5.367\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7014, d1=0.007, d2=5.303\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7015, d1=0.008, d2=5.255\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7016, d1=0.008, d2=5.256\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7017, d1=0.008, d2=5.304\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7018, d1=0.007, d2=5.370\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7019, d1=0.007, d2=5.415\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7020, d1=0.007, d2=5.411\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7021, d1=0.008, d2=5.372\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7022, d1=0.008, d2=5.326\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7023, d1=0.008, d2=5.298\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7024, d1=0.008, d2=5.303\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7025, d1=0.008, d2=5.334\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7026, d1=0.008, d2=5.374\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7027, d1=0.008, d2=5.400\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7028, d1=0.008, d2=5.401\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7029, d1=0.008, d2=5.372\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">7030, d1=0.008, d2=5.342\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7031, d1=0.008, d2=5.337\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7032, d1=0.008, d2=5.360\n",
            "2/2 [==============================] - 0s 34ms/step\n",
            ">7033, d1=0.007, d2=5.399\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7034, d1=0.007, d2=5.429\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7035, d1=0.007, d2=5.436\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">7036, d1=0.007, d2=5.430\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7037, d1=0.007, d2=5.421\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7038, d1=0.007, d2=5.426\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7039, d1=0.007, d2=5.451\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7040, d1=0.007, d2=5.490\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7041, d1=0.007, d2=5.528\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7042, d1=0.007, d2=5.547\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7043, d1=0.007, d2=5.555\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7044, d1=0.007, d2=5.557\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7045, d1=0.006, d2=5.558\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7046, d1=0.006, d2=5.575\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">7047, d1=0.006, d2=5.605\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7048, d1=0.006, d2=5.643\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7049, d1=0.006, d2=5.677\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7050, d1=0.006, d2=5.700\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">7051, d1=0.006, d2=5.708\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">7052, d1=0.006, d2=5.710\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7053, d1=0.006, d2=5.716\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">7054, d1=0.006, d2=5.733\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7055, d1=0.006, d2=5.763\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7056, d1=0.005, d2=5.791\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7057, d1=0.005, d2=5.821\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7058, d1=0.005, d2=5.845\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7059, d1=0.005, d2=5.852\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7060, d1=0.005, d2=5.854\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7061, d1=0.005, d2=5.865\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7062, d1=0.005, d2=5.884\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7063, d1=0.005, d2=5.916\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7064, d1=0.004, d2=5.952\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7065, d1=0.004, d2=5.981\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7066, d1=0.004, d2=5.995\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7067, d1=0.004, d2=6.014\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7068, d1=0.004, d2=6.038\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7069, d1=0.004, d2=6.074\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7070, d1=0.003, d2=6.129\n",
            "2/2 [==============================] - 0s 35ms/step\n",
            ">7071, d1=0.003, d2=6.187\n",
            "2/2 [==============================] - 0s 36ms/step\n",
            ">7072, d1=0.003, d2=6.230\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7073, d1=0.003, d2=6.258\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">7074, d1=0.003, d2=6.278\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7075, d1=0.003, d2=6.294\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7076, d1=0.003, d2=6.314\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7077, d1=0.003, d2=6.336\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7078, d1=0.003, d2=6.360\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7079, d1=0.002, d2=6.383\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7080, d1=0.002, d2=6.394\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7081, d1=0.002, d2=6.405\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7082, d1=0.002, d2=6.409\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7083, d1=0.002, d2=6.406\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7084, d1=0.002, d2=6.404\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7085, d1=0.002, d2=6.403\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7086, d1=0.002, d2=6.410\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7087, d1=0.002, d2=6.419\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7088, d1=0.002, d2=6.429\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7089, d1=0.002, d2=6.434\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7090, d1=0.002, d2=6.411\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">7091, d1=0.002, d2=6.390\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7092, d1=0.002, d2=6.386\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7093, d1=0.002, d2=6.391\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">7094, d1=0.003, d2=6.396\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7095, d1=0.003, d2=6.397\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7096, d1=0.003, d2=6.401\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7097, d1=0.003, d2=6.406\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7098, d1=0.002, d2=6.408\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7099, d1=0.002, d2=6.410\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7100, d1=0.002, d2=6.422\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7101, d1=0.002, d2=6.441\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7102, d1=0.002, d2=6.463\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7103, d1=0.002, d2=6.475\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7104, d1=0.002, d2=6.488\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7105, d1=0.002, d2=6.496\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7106, d1=0.002, d2=6.501\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7107, d1=0.002, d2=6.507\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7108, d1=0.002, d2=6.510\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7109, d1=0.002, d2=6.508\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7110, d1=0.002, d2=6.507\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7111, d1=0.002, d2=6.502\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">7112, d1=0.002, d2=6.487\n",
            "2/2 [==============================] - 0s 27ms/step\n",
            ">7113, d1=0.003, d2=6.465\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7114, d1=0.003, d2=6.440\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7115, d1=0.003, d2=6.445\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7116, d1=0.003, d2=6.466\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7117, d1=0.003, d2=6.451\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7118, d1=0.003, d2=6.413\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7119, d1=0.003, d2=6.376\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7120, d1=0.003, d2=6.365\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7121, d1=0.003, d2=6.428\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7122, d1=0.003, d2=6.495\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7123, d1=0.003, d2=6.538\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7124, d1=0.003, d2=6.545\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7125, d1=0.002, d2=6.530\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7126, d1=0.002, d2=6.517\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7127, d1=0.002, d2=6.527\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7128, d1=0.002, d2=6.556\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7129, d1=0.002, d2=6.609\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7130, d1=0.002, d2=6.671\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7131, d1=0.002, d2=6.723\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7132, d1=0.002, d2=6.752\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7133, d1=0.002, d2=6.759\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7134, d1=0.002, d2=6.799\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">7135, d1=0.002, d2=6.816\n",
            "2/2 [==============================] - 0s 34ms/step\n",
            ">7136, d1=0.002, d2=6.814\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7137, d1=0.002, d2=6.806\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7138, d1=0.002, d2=6.800\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7139, d1=0.002, d2=6.804\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7140, d1=0.002, d2=6.816\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7141, d1=0.002, d2=6.837\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7142, d1=0.002, d2=6.996\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7143, d1=0.001, d2=7.217\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7144, d1=0.001, d2=7.339\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7145, d1=0.001, d2=7.417\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7146, d1=0.001, d2=7.457\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7147, d1=0.001, d2=7.477\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7148, d1=0.001, d2=7.495\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7149, d1=0.001, d2=7.521\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7150, d1=0.001, d2=7.543\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7151, d1=0.001, d2=7.550\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7152, d1=0.001, d2=7.546\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7153, d1=0.001, d2=7.544\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">7154, d1=0.001, d2=7.543\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">7155, d1=0.001, d2=7.542\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">7156, d1=0.001, d2=7.535\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7157, d1=0.001, d2=7.521\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7158, d1=0.001, d2=7.496\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7159, d1=0.001, d2=7.457\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7160, d1=0.001, d2=7.394\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7161, d1=0.001, d2=7.326\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7162, d1=0.001, d2=7.257\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7163, d1=0.001, d2=7.196\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7164, d1=0.001, d2=7.155\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">7165, d1=0.001, d2=7.121\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7166, d1=0.001, d2=7.096\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7167, d1=0.002, d2=7.075\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7168, d1=0.002, d2=7.056\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7169, d1=0.002, d2=7.037\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7170, d1=0.002, d2=7.020\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7171, d1=0.002, d2=7.006\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7172, d1=0.002, d2=6.998\n",
            "2/2 [==============================] - 0s 32ms/step\n",
            ">7173, d1=0.002, d2=6.998\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7174, d1=0.002, d2=7.019\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7175, d1=0.002, d2=7.052\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">7176, d1=0.002, d2=7.085\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7177, d1=0.002, d2=7.113\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7178, d1=0.002, d2=7.130\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7179, d1=0.002, d2=7.139\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7180, d1=0.002, d2=7.140\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7181, d1=0.002, d2=7.151\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7182, d1=0.002, d2=7.174\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7183, d1=0.002, d2=7.201\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7184, d1=0.002, d2=7.279\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">7185, d1=0.002, d2=7.299\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7186, d1=0.002, d2=7.312\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7187, d1=0.002, d2=7.247\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7188, d1=0.002, d2=7.143\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7189, d1=0.002, d2=7.065\n",
            "2/2 [==============================] - 0s 31ms/step\n",
            ">7190, d1=0.002, d2=6.981\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7191, d1=0.002, d2=6.885\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7192, d1=0.002, d2=6.890\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7193, d1=0.002, d2=6.906\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7194, d1=0.002, d2=6.898\n",
            "2/2 [==============================] - 0s 33ms/step\n",
            ">7195, d1=0.002, d2=6.932\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">7196, d1=0.002, d2=6.922\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7197, d1=0.002, d2=6.870\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7198, d1=0.002, d2=6.809\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7199, d1=0.002, d2=6.766\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7200, d1=0.002, d2=6.762\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7201, d1=0.002, d2=6.791\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7202, d1=0.002, d2=6.828\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7203, d1=0.002, d2=6.835\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7204, d1=0.002, d2=6.808\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7205, d1=0.002, d2=6.779\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7206, d1=0.002, d2=6.778\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7207, d1=0.002, d2=6.813\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">7208, d1=0.002, d2=6.867\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7209, d1=0.002, d2=6.915\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7210, d1=0.002, d2=7.014\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">7211, d1=0.002, d2=7.032\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7212, d1=0.002, d2=7.053\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7213, d1=0.002, d2=7.048\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7214, d1=0.002, d2=7.088\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7215, d1=0.002, d2=7.166\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7216, d1=0.002, d2=7.325\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7217, d1=0.002, d2=7.413\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7218, d1=0.002, d2=7.412\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">7219, d1=0.002, d2=7.359\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7220, d1=0.002, d2=7.319\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7221, d1=0.002, d2=7.401\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7222, d1=0.002, d2=7.485\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7223, d1=0.002, d2=7.523\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">7224, d1=0.002, d2=7.494\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7225, d1=0.002, d2=7.429\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7226, d1=0.002, d2=7.316\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7227, d1=0.002, d2=7.186\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7228, d1=0.002, d2=7.152\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7229, d1=0.002, d2=7.180\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7230, d1=0.002, d2=7.213\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7231, d1=0.002, d2=7.229\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">7232, d1=0.002, d2=7.223\n",
            "2/2 [==============================] - 0s 33ms/step\n",
            ">7233, d1=0.002, d2=7.197\n",
            "2/2 [==============================] - 0s 34ms/step\n",
            ">7234, d1=0.002, d2=7.239\n",
            "2/2 [==============================] - 0s 34ms/step\n",
            ">7235, d1=0.002, d2=7.239\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7236, d1=0.002, d2=7.189\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">7237, d1=0.002, d2=7.126\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7238, d1=0.002, d2=7.095\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7239, d1=0.002, d2=7.107\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7240, d1=0.002, d2=7.129\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7241, d1=0.002, d2=7.166\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7242, d1=0.002, d2=7.177\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7243, d1=0.002, d2=7.159\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7244, d1=0.002, d2=7.139\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">7245, d1=0.002, d2=7.143\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7246, d1=0.002, d2=7.177\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7247, d1=0.002, d2=7.220\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7248, d1=0.002, d2=7.252\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7249, d1=0.002, d2=7.370\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">7250, d1=0.002, d2=7.443\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7251, d1=0.002, d2=7.559\n",
            "2/2 [==============================] - 0s 31ms/step\n",
            ">7252, d1=0.002, d2=7.584\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">7253, d1=0.001, d2=7.543\n",
            "2/2 [==============================] - 0s 27ms/step\n",
            ">7254, d1=0.001, d2=7.564\n",
            "2/2 [==============================] - 0s 31ms/step\n",
            ">7255, d1=0.001, d2=7.563\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7256, d1=0.002, d2=7.534\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7257, d1=0.002, d2=7.426\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7258, d1=0.002, d2=7.245\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7259, d1=0.002, d2=7.067\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7260, d1=0.002, d2=6.920\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7261, d1=0.002, d2=6.826\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7262, d1=0.003, d2=6.756\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7263, d1=0.003, d2=6.647\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7264, d1=0.003, d2=6.481\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7265, d1=0.003, d2=6.426\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7266, d1=0.004, d2=6.506\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7267, d1=0.004, d2=6.562\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7268, d1=0.004, d2=6.535\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7269, d1=0.004, d2=6.523\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7270, d1=0.003, d2=6.608\n",
            "2/2 [==============================] - 0s 32ms/step\n",
            ">7271, d1=0.003, d2=6.718\n",
            "2/2 [==============================] - 0s 33ms/step\n",
            ">7272, d1=0.003, d2=6.743\n",
            "2/2 [==============================] - 0s 34ms/step\n",
            ">7273, d1=0.003, d2=6.725\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7274, d1=0.003, d2=6.758\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7275, d1=0.003, d2=6.863\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7276, d1=0.003, d2=6.946\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7277, d1=0.002, d2=6.965\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7278, d1=0.002, d2=6.968\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7279, d1=0.002, d2=7.000\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7280, d1=0.002, d2=7.050\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7281, d1=0.002, d2=7.107\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7282, d1=0.002, d2=7.148\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7283, d1=0.002, d2=7.196\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7284, d1=0.002, d2=7.233\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7285, d1=0.002, d2=7.193\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7286, d1=0.002, d2=7.138\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7287, d1=0.002, d2=7.127\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7288, d1=0.002, d2=7.174\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7289, d1=0.002, d2=7.236\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7290, d1=0.002, d2=7.257\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">7291, d1=0.002, d2=7.236\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7292, d1=0.002, d2=7.205\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">7293, d1=0.001, d2=7.204\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">7294, d1=0.001, d2=7.239\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7295, d1=0.001, d2=7.287\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7296, d1=0.001, d2=7.315\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7297, d1=0.001, d2=7.313\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7298, d1=0.001, d2=7.289\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7299, d1=0.001, d2=7.265\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7300, d1=0.001, d2=7.269\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7301, d1=0.001, d2=7.328\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7302, d1=0.001, d2=7.377\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7303, d1=0.001, d2=7.362\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7304, d1=0.001, d2=7.305\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7305, d1=0.001, d2=7.277\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7306, d1=0.001, d2=7.307\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7307, d1=0.001, d2=7.376\n",
            "2/2 [==============================] - 0s 13ms/step\n",
            ">7308, d1=0.001, d2=7.446\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7309, d1=0.001, d2=7.485\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7310, d1=0.001, d2=7.499\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7311, d1=0.001, d2=7.512\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7312, d1=0.001, d2=7.568\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">7313, d1=0.001, d2=7.656\n",
            "2/2 [==============================] - 0s 31ms/step\n",
            ">7314, d1=0.001, d2=7.727\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7315, d1=0.001, d2=7.915\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7316, d1=0.001, d2=8.032\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7317, d1=0.001, d2=8.082\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7318, d1=0.001, d2=8.095\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7319, d1=0.000, d2=8.093\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7320, d1=0.000, d2=8.107\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7321, d1=0.000, d2=8.106\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7322, d1=0.001, d2=8.052\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7323, d1=0.001, d2=7.933\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7324, d1=0.001, d2=7.768\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7325, d1=0.001, d2=7.607\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7326, d1=0.001, d2=7.509\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7327, d1=0.001, d2=7.497\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7328, d1=0.001, d2=7.529\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7329, d1=0.001, d2=7.486\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7330, d1=0.001, d2=7.384\n",
            "2/2 [==============================] - 0s 37ms/step\n",
            ">7331, d1=0.001, d2=7.283\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7332, d1=0.001, d2=7.270\n",
            "2/2 [==============================] - 0s 31ms/step\n",
            ">7333, d1=0.001, d2=7.340\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">7334, d1=0.001, d2=7.406\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7335, d1=0.001, d2=7.391\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7336, d1=0.001, d2=7.317\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7337, d1=0.001, d2=7.272\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7338, d1=0.001, d2=7.304\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7339, d1=0.001, d2=7.351\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7340, d1=0.001, d2=7.322\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7341, d1=0.001, d2=7.228\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7342, d1=0.001, d2=7.182\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7343, d1=0.001, d2=7.232\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7344, d1=0.001, d2=7.288\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7345, d1=0.001, d2=7.265\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7346, d1=0.001, d2=7.231\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7347, d1=0.001, d2=7.274\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7348, d1=0.001, d2=7.341\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7349, d1=0.001, d2=7.337\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7350, d1=0.001, d2=7.293\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7351, d1=0.001, d2=7.316\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7352, d1=0.001, d2=7.385\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7353, d1=0.001, d2=7.400\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">7354, d1=0.001, d2=7.375\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7355, d1=0.001, d2=7.406\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7356, d1=0.001, d2=7.476\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7357, d1=0.001, d2=7.497\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7358, d1=0.001, d2=7.485\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7359, d1=0.001, d2=7.518\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">7360, d1=0.001, d2=7.577\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7361, d1=0.001, d2=7.587\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7362, d1=0.001, d2=7.572\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7363, d1=0.001, d2=7.605\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7364, d1=0.001, d2=7.656\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7365, d1=0.001, d2=7.658\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7366, d1=0.001, d2=7.643\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7367, d1=0.001, d2=7.671\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7368, d1=0.001, d2=7.706\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7369, d1=0.001, d2=7.697\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7370, d1=0.001, d2=7.683\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">7371, d1=0.001, d2=7.701\n",
            "2/2 [==============================] - 0s 32ms/step\n",
            ">7372, d1=0.001, d2=7.709\n",
            "2/2 [==============================] - 0s 31ms/step\n",
            ">7373, d1=0.001, d2=7.689\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7374, d1=0.001, d2=8.232\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7375, d1=0.001, d2=7.576\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7376, d1=0.001, d2=7.124\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7377, d1=0.001, d2=7.800\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7378, d1=0.001, d2=8.091\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7379, d1=0.001, d2=7.477\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7380, d1=0.001, d2=7.049\n",
            "2/2 [==============================] - 0s 39ms/step\n",
            ">7381, d1=0.001, d2=7.476\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7382, d1=0.001, d2=7.947\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7383, d1=0.001, d2=7.630\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7384, d1=0.001, d2=7.132\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7385, d1=0.001, d2=7.317\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7386, d1=0.001, d2=7.794\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7387, d1=0.001, d2=7.739\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7388, d1=0.001, d2=7.318\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7389, d1=0.001, d2=7.283\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7390, d1=0.001, d2=7.675\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7391, d1=0.001, d2=7.827\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7392, d1=0.001, d2=7.528\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7393, d1=0.001, d2=7.333\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7394, d1=0.001, d2=7.572\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7395, d1=0.001, d2=7.816\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7396, d1=0.001, d2=7.656\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7397, d1=0.001, d2=7.403\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7398, d1=0.001, d2=7.506\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7399, d1=0.001, d2=7.740\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7400, d1=0.001, d2=7.716\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7401, d1=0.001, d2=7.515\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7402, d1=0.001, d2=7.522\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7403, d1=0.001, d2=7.726\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7404, d1=0.001, d2=7.800\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7405, d1=0.001, d2=7.645\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7406, d1=0.001, d2=7.556\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7407, d1=0.001, d2=7.690\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7408, d1=0.001, d2=7.804\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7409, d1=0.001, d2=7.716\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7410, d1=0.001, d2=7.593\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7411, d1=0.001, d2=7.662\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7412, d1=0.001, d2=7.789\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7413, d1=0.001, d2=7.786\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7414, d1=0.001, d2=7.700\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7415, d1=0.001, d2=7.711\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7416, d1=0.001, d2=7.809\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7417, d1=0.001, d2=7.855\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7418, d1=0.001, d2=7.786\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7419, d1=0.001, d2=7.733\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7420, d1=0.001, d2=7.786\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7421, d1=0.001, d2=7.847\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7422, d1=0.001, d2=7.807\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7423, d1=0.001, d2=7.769\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7424, d1=0.001, d2=7.814\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7425, d1=0.001, d2=7.883\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7426, d1=0.001, d2=7.877\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7427, d1=0.001, d2=7.831\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7428, d1=0.001, d2=7.841\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7429, d1=0.001, d2=7.900\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7430, d1=0.001, d2=7.923\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7431, d1=0.001, d2=7.891\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">7432, d1=0.001, d2=7.872\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7433, d1=0.001, d2=7.909\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">7434, d1=0.001, d2=7.931\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7435, d1=0.001, d2=7.903\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7436, d1=0.001, d2=7.879\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7437, d1=0.001, d2=7.894\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7438, d1=0.001, d2=7.936\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7439, d1=0.001, d2=7.938\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7440, d1=0.001, d2=7.905\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7441, d1=0.001, d2=7.899\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7442, d1=0.001, d2=7.931\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7443, d1=0.001, d2=7.942\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7444, d1=0.001, d2=7.920\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7445, d1=0.001, d2=7.918\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7446, d1=0.001, d2=7.949\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7447, d1=0.001, d2=7.968\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7448, d1=0.001, d2=7.962\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7449, d1=0.001, d2=7.962\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7450, d1=0.001, d2=7.986\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7451, d1=0.001, d2=8.006\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7452, d1=0.001, d2=8.000\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">7453, d1=0.001, d2=7.995\n",
            "2/2 [==============================] - 0s 39ms/step\n",
            ">7454, d1=0.001, d2=8.014\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7455, d1=0.001, d2=8.034\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7456, d1=0.001, d2=8.018\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7457, d1=0.001, d2=7.995\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7458, d1=0.001, d2=8.000\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7459, d1=0.001, d2=8.020\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7460, d1=0.001, d2=8.007\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7461, d1=0.001, d2=7.975\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7462, d1=0.001, d2=7.967\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7463, d1=0.001, d2=7.936\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7464, d1=0.001, d2=7.989\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7465, d1=0.001, d2=8.079\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7466, d1=0.001, d2=8.174\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7467, d1=0.000, d2=8.241\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7468, d1=0.000, d2=8.293\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7469, d1=0.000, d2=8.361\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7470, d1=0.000, d2=8.415\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7471, d1=0.000, d2=8.452\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7472, d1=0.000, d2=8.476\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7473, d1=0.000, d2=8.498\n",
            "2/2 [==============================] - 0s 40ms/step\n",
            ">7474, d1=0.000, d2=8.529\n",
            "2/2 [==============================] - 0s 31ms/step\n",
            ">7475, d1=0.000, d2=8.552\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">7476, d1=0.000, d2=8.555\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7477, d1=0.000, d2=8.548\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7478, d1=0.000, d2=8.536\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7479, d1=0.000, d2=8.525\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7480, d1=0.000, d2=8.501\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7481, d1=0.000, d2=8.477\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7482, d1=0.000, d2=8.455\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7483, d1=0.000, d2=8.427\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7484, d1=0.000, d2=8.386\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7485, d1=0.000, d2=8.349\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7486, d1=0.000, d2=8.320\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7487, d1=0.000, d2=8.311\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7488, d1=0.000, d2=8.272\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7489, d1=0.001, d2=8.194\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7490, d1=0.001, d2=8.150\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7491, d1=0.001, d2=8.151\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7492, d1=0.001, d2=8.130\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7493, d1=0.001, d2=8.042\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7494, d1=0.001, d2=7.724\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7495, d1=0.001, d2=7.616\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">7496, d1=0.001, d2=7.489\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">7497, d1=0.001, d2=7.086\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7498, d1=0.001, d2=7.546\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7499, d1=0.002, d2=5.739\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7500, d1=0.004, d2=8.187\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7501, d1=0.005, d2=6.632\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7502, d1=0.003, d2=5.193\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7503, d1=0.006, d2=7.355\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7504, d1=0.006, d2=7.052\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7505, d1=0.006, d2=5.015\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7506, d1=0.008, d2=6.170\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7507, d1=0.005, d2=6.827\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7508, d1=0.008, d2=5.454\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7509, d1=0.007, d2=5.273\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7510, d1=0.008, d2=6.547\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7511, d1=0.010, d2=5.759\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">7512, d1=0.008, d2=4.862\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">7513, d1=0.011, d2=6.549\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7514, d1=0.011, d2=6.041\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7515, d1=0.009, d2=4.633\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7516, d1=0.013, d2=6.394\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7517, d1=0.011, d2=6.438\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7518, d1=0.012, d2=4.910\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7519, d1=0.012, d2=5.378\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7520, d1=0.010, d2=6.264\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7521, d1=0.012, d2=5.653\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7522, d1=0.011, d2=4.833\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7523, d1=0.013, d2=5.930\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7524, d1=0.013, d2=5.767\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7525, d1=0.013, d2=4.612\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7526, d1=0.016, d2=5.649\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7527, d1=0.016, d2=5.501\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7528, d1=0.017, d2=4.487\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7529, d1=0.019, d2=5.714\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7530, d1=0.019, d2=5.357\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">7531, d1=0.019, d2=4.265\n",
            "2/2 [==============================] - 0s 33ms/step\n",
            ">7532, d1=0.023, d2=6.009\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">7533, d1=0.023, d2=5.690\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7534, d1=0.021, d2=4.035\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7535, d1=0.026, d2=6.046\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7536, d1=0.023, d2=6.150\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7537, d1=0.023, d2=4.550\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7538, d1=0.019, d2=4.506\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7539, d1=0.019, d2=5.974\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">7540, d1=0.018, d2=6.008\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7541, d1=0.018, d2=4.761\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7542, d1=0.015, d2=4.545\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7543, d1=0.016, d2=5.898\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7544, d1=0.015, d2=6.080\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7545, d1=0.016, d2=5.037\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7546, d1=0.013, d2=4.503\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7547, d1=0.016, d2=5.719\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7548, d1=0.013, d2=6.131\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7549, d1=0.014, d2=5.365\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7550, d1=0.012, d2=4.595\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7551, d1=0.014, d2=5.444\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7552, d1=0.011, d2=6.072\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">7553, d1=0.012, d2=5.736\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">7554, d1=0.011, d2=4.986\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7555, d1=0.009, d2=4.851\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7556, d1=0.007, d2=5.379\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7557, d1=0.004, d2=6.047\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7558, d1=0.003, d2=6.668\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7559, d1=0.002, d2=7.169\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7560, d1=0.001, d2=7.539\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7561, d1=0.001, d2=7.790\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7562, d1=0.001, d2=7.943\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7563, d1=0.001, d2=8.018\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7564, d1=0.001, d2=8.031\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7565, d1=0.001, d2=7.992\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7566, d1=0.001, d2=7.917\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7567, d1=0.001, d2=7.816\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7568, d1=0.001, d2=7.702\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7569, d1=0.001, d2=7.583\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7570, d1=0.001, d2=7.470\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">7571, d1=0.001, d2=7.368\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7572, d1=0.001, d2=7.288\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7573, d1=0.001, d2=7.233\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7574, d1=0.001, d2=7.208\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7575, d1=0.001, d2=7.213\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7576, d1=0.001, d2=7.244\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7577, d1=0.001, d2=7.290\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7578, d1=0.001, d2=7.350\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7579, d1=0.001, d2=7.410\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7580, d1=0.001, d2=7.455\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7581, d1=0.001, d2=7.475\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7582, d1=0.001, d2=7.463\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7583, d1=0.001, d2=7.413\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7584, d1=0.001, d2=7.327\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7585, d1=0.001, d2=7.217\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7586, d1=0.001, d2=7.094\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7587, d1=0.001, d2=6.970\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7588, d1=0.001, d2=6.858\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7589, d1=0.001, d2=6.770\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7590, d1=0.001, d2=6.710\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">7591, d1=0.002, d2=6.688\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">7592, d1=0.002, d2=6.696\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7593, d1=0.002, d2=6.716\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7594, d1=0.002, d2=6.727\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7595, d1=0.002, d2=6.716\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7596, d1=0.002, d2=6.680\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7597, d1=0.002, d2=6.631\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7598, d1=0.002, d2=6.587\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7599, d1=0.002, d2=6.576\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7600, d1=0.002, d2=6.717\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7601, d1=0.002, d2=6.865\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7602, d1=0.002, d2=6.990\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7603, d1=0.001, d2=7.088\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7604, d1=0.001, d2=7.156\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7605, d1=0.001, d2=7.204\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7606, d1=0.001, d2=7.244\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7607, d1=0.001, d2=7.286\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">7608, d1=0.001, d2=7.322\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7609, d1=0.001, d2=7.317\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7610, d1=0.001, d2=7.189\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7611, d1=0.002, d2=6.906\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7612, d1=0.002, d2=6.521\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7613, d1=0.003, d2=6.169\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7614, d1=0.003, d2=6.005\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7615, d1=0.004, d2=5.846\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7616, d1=0.004, d2=5.829\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7617, d1=0.005, d2=5.813\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7618, d1=0.004, d2=5.813\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7619, d1=0.004, d2=5.837\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7620, d1=0.003, d2=5.982\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7621, d1=0.003, d2=6.234\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7622, d1=0.003, d2=6.422\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7623, d1=0.003, d2=6.398\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7624, d1=0.003, d2=6.162\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7625, d1=0.003, d2=5.857\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7626, d1=0.004, d2=5.688\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">7627, d1=0.004, d2=5.744\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7628, d1=0.004, d2=5.903\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7629, d1=0.004, d2=5.937\n",
            "2/2 [==============================] - 0s 32ms/step\n",
            ">7630, d1=0.005, d2=5.737\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7631, d1=0.005, d2=5.443\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7632, d1=0.006, d2=5.325\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7633, d1=0.007, d2=5.433\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7634, d1=0.007, d2=5.495\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7635, d1=0.008, d2=5.319\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7636, d1=0.008, d2=5.086\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7637, d1=0.009, d2=5.075\n",
            "2/2 [==============================] - 0s 13ms/step\n",
            ">7638, d1=0.009, d2=5.185\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7639, d1=0.010, d2=5.133\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7640, d1=0.011, d2=4.954\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7641, d1=0.011, d2=4.920\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7642, d1=0.011, d2=5.037\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7643, d1=0.012, d2=5.018\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7644, d1=0.012, d2=4.864\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7645, d1=0.012, d2=4.858\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7646, d1=0.013, d2=4.958\n",
            "2/2 [==============================] - 0s 33ms/step\n",
            ">7647, d1=0.013, d2=4.924\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7648, d1=0.013, d2=4.813\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">7649, d1=0.013, d2=4.855\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">7650, d1=0.013, d2=4.924\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7651, d1=0.014, d2=4.852\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7652, d1=0.014, d2=4.801\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7653, d1=0.014, d2=4.891\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7654, d1=0.014, d2=4.907\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7655, d1=0.013, d2=4.831\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7656, d1=0.013, d2=4.867\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7657, d1=0.013, d2=4.932\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7658, d1=0.013, d2=4.878\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7659, d1=0.013, d2=4.858\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7660, d1=0.013, d2=4.933\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7661, d1=0.013, d2=4.919\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7662, d1=0.013, d2=4.869\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7663, d1=0.013, d2=4.840\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7664, d1=0.012, d2=4.918\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7665, d1=0.012, d2=4.995\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">7666, d1=0.011, d2=5.093\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">7667, d1=0.010, d2=5.203\n",
            "2/2 [==============================] - 0s 32ms/step\n",
            ">7668, d1=0.009, d2=5.306\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7669, d1=0.008, d2=5.407\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7670, d1=0.007, d2=5.525\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7671, d1=0.006, d2=5.610\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7672, d1=0.007, d2=5.460\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7673, d1=0.007, d2=5.288\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7674, d1=0.008, d2=5.351\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7675, d1=0.008, d2=5.419\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7676, d1=0.009, d2=5.241\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7677, d1=0.009, d2=5.082\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7678, d1=0.010, d2=5.179\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7679, d1=0.011, d2=5.129\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7680, d1=0.012, d2=4.942\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7681, d1=0.012, d2=5.148\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7682, d1=0.013, d2=4.901\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7683, d1=0.014, d2=4.853\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7684, d1=0.015, d2=5.016\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7685, d1=0.016, d2=4.719\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">7686, d1=0.017, d2=4.863\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">7687, d1=0.017, d2=4.807\n",
            "2/2 [==============================] - 0s 27ms/step\n",
            ">7688, d1=0.018, d2=4.661\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">7689, d1=0.019, d2=4.875\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7690, d1=0.021, d2=4.548\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7691, d1=0.022, d2=4.814\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7692, d1=0.023, d2=4.536\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7693, d1=0.025, d2=4.690\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7694, d1=0.026, d2=4.576\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7695, d1=0.028, d2=4.752\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7696, d1=0.030, d2=4.273\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7697, d1=0.032, d2=5.216\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7698, d1=0.035, d2=4.193\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7699, d1=0.036, d2=4.785\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7700, d1=0.038, d2=4.533\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7701, d1=0.039, d2=4.316\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7702, d1=0.042, d2=5.004\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7703, d1=0.044, d2=4.233\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7704, d1=0.046, d2=4.773\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7705, d1=0.048, d2=4.465\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7706, d1=0.050, d2=4.446\n",
            "2/2 [==============================] - 0s 44ms/step\n",
            ">7707, d1=0.051, d2=5.233\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">7708, d1=0.047, d2=4.241\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7709, d1=0.035, d2=4.610\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">7710, d1=0.022, d2=5.349\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7711, d1=0.017, d2=4.440\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7712, d1=0.017, d2=5.125\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7713, d1=0.017, d2=4.851\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7714, d1=0.016, d2=4.524\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">7715, d1=0.017, d2=5.679\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7716, d1=0.020, d2=4.292\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7717, d1=0.019, d2=5.425\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7718, d1=0.020, d2=4.593\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7719, d1=0.020, d2=4.650\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7720, d1=0.020, d2=5.254\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7721, d1=0.021, d2=4.243\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7722, d1=0.024, d2=5.991\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7723, d1=0.027, d2=4.702\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7724, d1=0.024, d2=3.690\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7725, d1=0.032, d2=8.693\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7726, d1=0.056, d2=9.585\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7727, d1=0.066, d2=6.862\n",
            "2/2 [==============================] - 0s 40ms/step\n",
            ">7728, d1=0.043, d2=1.645\n",
            "2/2 [==============================] - 0s 41ms/step\n",
            ">7729, d1=0.182, d2=21.767\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7730, d1=0.192, d2=38.801\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7731, d1=0.357, d2=52.426\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7732, d1=0.491, d2=62.890\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7733, d1=0.596, d2=70.651\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7734, d1=0.681, d2=75.376\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7735, d1=0.759, d2=76.215\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7736, d1=0.753, d2=74.012\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7737, d1=0.715, d2=70.324\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7738, d1=0.682, d2=65.333\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7739, d1=0.637, d2=59.261\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">7740, d1=0.582, d2=52.425\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7741, d1=0.517, d2=44.805\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7742, d1=0.444, d2=36.358\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7743, d1=0.363, d2=27.209\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7744, d1=0.275, d2=17.504\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7745, d1=0.182, d2=7.266\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7746, d1=0.083, d2=0.035\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7747, d1=1.902, d2=29.139\n",
            "2/2 [==============================] - 0s 33ms/step\n",
            ">7748, d1=0.297, d2=57.281\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7749, d1=0.573, d2=81.551\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7750, d1=0.822, d2=101.969\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7751, d1=1.220, d2=118.383\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7752, d1=1.685, d2=130.440\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7753, d1=1.991, d2=138.336\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7754, d1=2.125, d2=142.319\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7755, d1=2.095, d2=142.776\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7756, d1=1.922, d2=139.989\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7757, d1=1.697, d2=134.754\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7758, d1=1.504, d2=128.126\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7759, d1=1.351, d2=120.153\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7760, d1=1.232, d2=111.861\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">7761, d1=1.157, d2=103.185\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7762, d1=1.079, d2=94.099\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7763, d1=0.997, d2=84.593\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7764, d1=0.911, d2=74.721\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7765, d1=0.823, d2=64.522\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7766, d1=0.733, d2=54.043\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7767, d1=0.639, d2=43.315\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7768, d1=0.542, d2=32.305\n",
            "2/2 [==============================] - 0s 37ms/step\n",
            ">7769, d1=0.443, d2=21.011\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">7770, d1=0.341, d2=9.442\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7771, d1=0.237, d2=0.088\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7772, d1=1.938, d2=22.702\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7773, d1=0.381, d2=44.161\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">7774, d1=0.599, d2=62.455\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7775, d1=0.786, d2=77.841\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7776, d1=0.947, d2=90.677\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7777, d1=1.083, d2=101.150\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7778, d1=1.198, d2=109.685\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7779, d1=1.293, d2=116.384\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7780, d1=1.371, d2=121.561\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7781, d1=1.434, d2=125.393\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7782, d1=1.483, d2=128.015\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7783, d1=1.520, d2=129.535\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7784, d1=1.549, d2=129.941\n",
            "2/2 [==============================] - 0s 14ms/step\n",
            ">7785, d1=1.574, d2=129.154\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7786, d1=1.583, d2=127.251\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7787, d1=1.574, d2=124.403\n",
            "2/2 [==============================] - 0s 29ms/step\n",
            ">7788, d1=1.552, d2=120.898\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">7789, d1=1.528, d2=116.908\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">7790, d1=1.502, d2=112.491\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7791, d1=1.473, d2=107.709\n",
            "2/2 [==============================] - 0s 21ms/step\n",
            ">7792, d1=1.440, d2=102.569\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7793, d1=1.405, d2=97.111\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7794, d1=1.366, d2=91.410\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7795, d1=1.324, d2=85.496\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7796, d1=1.280, d2=79.352\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7797, d1=1.234, d2=72.997\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7798, d1=1.185, d2=66.445\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7799, d1=1.135, d2=59.689\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7800, d1=1.082, d2=52.739\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7801, d1=1.028, d2=45.624\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7802, d1=0.972, d2=38.368\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7803, d1=0.915, d2=30.989\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7804, d1=0.855, d2=23.443\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7805, d1=0.795, d2=15.759\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7806, d1=0.732, d2=8.145\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7807, d1=0.669, d2=1.696\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7808, d1=0.943, d2=9.378\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7809, d1=0.661, d2=15.827\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7810, d1=0.707, d2=20.989\n",
            "2/2 [==============================] - 0s 27ms/step\n",
            ">7811, d1=0.743, d2=24.972\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7812, d1=0.769, d2=27.738\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7813, d1=0.787, d2=29.625\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7814, d1=0.797, d2=30.785\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7815, d1=0.800, d2=31.299\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7816, d1=0.798, d2=31.203\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7817, d1=0.790, d2=30.572\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7818, d1=0.777, d2=29.457\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7819, d1=0.760, d2=27.922\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7820, d1=0.739, d2=25.978\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7821, d1=0.714, d2=23.692\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7822, d1=0.686, d2=21.108\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7823, d1=0.656, d2=18.266\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7824, d1=0.623, d2=15.187\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7825, d1=0.588, d2=11.902\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7826, d1=0.551, d2=8.430\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7827, d1=0.512, d2=4.818\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7828, d1=0.485, d2=1.925\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7829, d1=0.661, d2=7.467\n",
            "2/2 [==============================] - 0s 30ms/step\n",
            ">7830, d1=0.471, d2=12.083\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7831, d1=0.497, d2=15.729\n",
            "2/2 [==============================] - 0s 24ms/step\n",
            ">7832, d1=0.515, d2=18.478\n",
            "2/2 [==============================] - 0s 22ms/step\n",
            ">7833, d1=0.527, d2=20.403\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7834, d1=0.531, d2=21.647\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7835, d1=0.530, d2=22.281\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7836, d1=0.524, d2=22.369\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7837, d1=0.513, d2=21.971\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7838, d1=0.499, d2=21.140\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7839, d1=0.487, d2=19.921\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7840, d1=0.471, d2=18.349\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7841, d1=0.452, d2=16.459\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7842, d1=0.430, d2=14.284\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7843, d1=0.406, d2=11.848\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7844, d1=0.379, d2=9.150\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7845, d1=0.351, d2=6.253\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7846, d1=0.323, d2=3.325\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7847, d1=0.335, d2=2.400\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7848, d1=0.387, d2=5.771\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7849, d1=0.297, d2=8.597\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7850, d1=0.309, d2=10.673\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7851, d1=0.318, d2=12.068\n",
            "2/2 [==============================] - 0s 25ms/step\n",
            ">7852, d1=0.321, d2=12.863\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7853, d1=0.320, d2=13.114\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7854, d1=0.314, d2=12.868\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7855, d1=0.304, d2=12.162\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7856, d1=0.290, d2=11.047\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7857, d1=0.272, d2=9.570\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7858, d1=0.252, d2=7.779\n",
            "2/2 [==============================] - 0s 16ms/step\n",
            ">7859, d1=0.229, d2=5.739\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7860, d1=0.206, d2=3.624\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7861, d1=0.207, d2=2.731\n",
            "2/2 [==============================] - 0s 15ms/step\n",
            ">7862, d1=0.232, d2=4.646\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7863, d1=0.176, d2=6.440\n",
            "2/2 [==============================] - 0s 26ms/step\n",
            ">7864, d1=0.172, d2=7.675\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7865, d1=0.173, d2=8.275\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7866, d1=0.171, d2=8.176\n",
            "2/2 [==============================] - 0s 28ms/step\n",
            ">7867, d1=0.162, d2=7.374\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7868, d1=0.145, d2=5.993\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7869, d1=0.121, d2=4.288\n",
            "2/2 [==============================] - 0s 19ms/step\n",
            ">7870, d1=0.106, d2=2.975\n",
            "2/2 [==============================] - 0s 23ms/step\n",
            ">7871, d1=0.123, d2=3.923\n",
            "2/2 [==============================] - 0s 31ms/step\n",
            ">7872, d1=0.085, d2=5.187\n",
            "2/2 [==============================] - 0s 20ms/step\n",
            ">7873, d1=0.074, d2=5.926\n",
            "2/2 [==============================] - 0s 17ms/step\n",
            ">7874, d1=0.071, d2=5.914\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7875, d1=0.060, d2=5.179\n",
            "2/2 [==============================] - 0s 18ms/step\n",
            ">7876, d1=0.040, d2=3.991\n",
            "2/2 [==============================] - 0s 17ms/step\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-41-bc3450a4f83a>\u001b[0m in \u001b[0;36m<cell line: 25>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0mdiscriminator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgan_instance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_discriminator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0mgan\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgan_instance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_GAN\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdiscriminator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m \u001b[0mtrained_generator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgan_instance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdiscriminator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgan\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;31m# Generate synthetic data for the minority class using trained generator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-40-6af24677f5b7>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(self, generator, discriminator, gan)\u001b[0m\n\u001b[1;32m     57\u001b[0m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreal_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgenerated_data\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m             \u001b[0mdiscriminator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrainable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m             \u001b[0md_loss\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdiscriminator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_on_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0;31m# Train generator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mtrain_on_batch\u001b[0;34m(self, x, y, sample_weight, class_weight, reset_metrics, return_dict)\u001b[0m\n\u001b[1;32m   2785\u001b[0m             )\n\u001b[1;32m   2786\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake_train_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2787\u001b[0;31m             \u001b[0mlogs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2788\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2789\u001b[0m         \u001b[0mlogs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msync_to_numpy_or_python_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    830\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    831\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 832\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    833\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    834\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    866\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    867\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 868\u001b[0;31m       return tracing_compilation.call_function(\n\u001b[0m\u001b[1;32m    869\u001b[0m           \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_no_variable_creation_config\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    870\u001b[0m       )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py\u001b[0m in \u001b[0;36mcall_function\u001b[0;34m(args, kwargs, tracing_options)\u001b[0m\n\u001b[1;32m    137\u001b[0m   \u001b[0mbound_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m   \u001b[0mflat_inputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munpack_inputs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbound_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m   return function._call_flat(  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m    140\u001b[0m       \u001b[0mflat_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m   )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/concrete_function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, tensor_inputs, captured_inputs)\u001b[0m\n\u001b[1;32m   1321\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1322\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1323\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_inference_function\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_preflattened\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1324\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1325\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py\u001b[0m in \u001b[0;36mcall_preflattened\u001b[0;34m(self, args)\u001b[0m\n\u001b[1;32m    214\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mcall_preflattened\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mSequence\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;34m\"\"\"Calls with flattened tensor inputs and returns the structured output.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m     \u001b[0mflat_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_flat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpack_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflat_outputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py\u001b[0m in \u001b[0;36mcall_flat\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m    249\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mrecord\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_recording\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m           \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_bound_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 251\u001b[0;31m             outputs = self._bound_context.call_function(\n\u001b[0m\u001b[1;32m    252\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    253\u001b[0m                 \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/context.py\u001b[0m in \u001b[0;36mcall_function\u001b[0;34m(self, name, tensor_inputs, num_outputs)\u001b[0m\n\u001b[1;32m   1484\u001b[0m     \u001b[0mcancellation_context\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcancellation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1485\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcancellation_context\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1486\u001b[0;31m       outputs = execute.execute(\n\u001b[0m\u001b[1;32m   1487\u001b[0m           \u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"utf-8\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1488\u001b[0m           \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     51\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 53\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     54\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     55\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "real_data = real_data\n",
        "\n",
        "# Identify minority class samples\n",
        "minority_samples = real_data[real_data['is_fraud'] == 1]\n",
        "gen_data = minority_samples.sample(n=50, replace=True, random_state=42)\n",
        "\n",
        "# Normalize minority samples\n",
        "scaler = MinMaxScaler()\n",
        "gen_data_norm = scaler.fit_transform(gen_data)\n",
        "\n",
        "# Define GAN class and instantiate with minority samples and latent dimension\n",
        "latent_dim = 11\n",
        "gan_instance = Gan(gen_data_norm, latent_dim)\n",
        "\n",
        "# Train GAN model\n",
        "generator = gan_instance._generator()\n",
        "discriminator = gan_instance._discriminator()\n",
        "gan = gan_instance._GAN(generator, discriminator)\n",
        "trained_generator = gan_instance.train(generator, discriminator, gan)\n",
        "\n",
        "# Generate synthetic data for the minority class using trained generator\n",
        "num_synthetic_samples = 50000  # Adjust the number of synthetic samples as needed\n",
        "synthetic_minority_data = generate_synthetic_data(trained_generator, num_synthetic_samples, latent_dim)\n",
        "\n",
        "# Convert synthetic data to DataFrame and inverse transform\n",
        "augmented_data_df = pd.DataFrame(scaler.inverse_transform(synthetic_minority_data), columns=gen_data.columns)\n",
        "\n",
        "print(augmented_data_df)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cH74M0Tp3QII"
      },
      "outputs": [],
      "source": [
        "real_data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IAuCGhm11DVj"
      },
      "outputs": [],
      "source": [
        "augmented_data_df.reset_index(drop=True, inplace=True)\n",
        "real_synth = pd.concat([real_data, augmented_data], ignore_index=True)\n",
        "real_synth.reset_index(drop=True, inplace=True)\n",
        "print(real_synth)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nMfsFIk12MKa"
      },
      "outputs": [],
      "source": [
        "real_synth.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-exrR-WGTRtV"
      },
      "outputs": [],
      "source": [
        "# Step 1: Generate Synthetic Data\n",
        "\n",
        "latent_dim = 5000\n",
        "\n",
        "def generate_synthetic_data(generator, num_samples, latent_dim):\n",
        "    noise = np.random.normal(0, 1, size=(num_samples, latent_dim))\n",
        "    synthetic_data = generator.predict(noise)\n",
        "    return synthetic_data\n",
        "\n",
        "# Step 2: Evaluate the Generated Data\n",
        "def evaluate_generated_data(real_data, synthetic_data):\n",
        "    # Compute statistical measures or evaluation metrics\n",
        "    # For example, you can compute mean, standard deviation, or use a KS-test\n",
        "    # You can also visualize distributions or compare summary statistics\n",
        "\n",
        "    # Here's an example of comparing means of real and synthetic data\n",
        "    real_mean = np.mean(real_data, axis=0)\n",
        "    synthetic_mean = np.mean(synthetic_data, axis=0)\n",
        "\n",
        "    print(\"Mean of Real Data:\", real_mean)\n",
        "    print(\"Mean of Synthetic Data:\", synthetic_mean)\n",
        "\n",
        "\n",
        "def compare_correlation(real_data, synthetic_data):\n",
        "    real_df = pd.DataFrame(real_data, columns=[f'Feature_{i}' for i in range(real_data.shape[1])])\n",
        "    synthetic_df = pd.DataFrame(synthetic_data, columns=[f'Feature_{i}' for i in range(synthetic_data.shape[1])])\n",
        "    # Compute correlation matrices\n",
        "    real_corr = real_df.corr()\n",
        "    synthetic_corr = synthetic_df.corr()\n",
        "\n",
        "    # Compare correlation matrices\n",
        "    corr_diff = synthetic_corr - real_corr\n",
        "\n",
        "    print(\"Difference in Correlation Matrices:\")\n",
        "    print(corr_diff)\n",
        "\n",
        "# Assuming real_data and synthetic_data are pandas DataFrames\n",
        "correlation_diff = compare_correlation(real_data, synthetic_data)\n",
        "print(\"Difference in Correlation Matrices:\")\n",
        "print(correlation_diff)\n",
        "# Generate synthetic data using the trained generator\n",
        "num_synthetic_samples = 1000  # Define the number of synthetic samples to generate\n",
        "latent_dim =64\n",
        "\n",
        "gan_instance =Gan(real_data, latent_dim)\n",
        "generator =gan_instance._generator()\n",
        "synthetic_data = generate_synthetic_data(generator, num_synthetic_samples, latent_dim)\n",
        "\n",
        "# Evaluate the generated data\n",
        "evaluate_generated_data(real_data, synthetic_data)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ixcwFfnlbubs"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def generate_synthetic_data(generator, num_samples, latent_dim):\n",
        "    noise = np.random.normal(0, 1, size=(num_samples, latent_dim))\n",
        "    synthetic_data = generator.predict(noise)\n",
        "    return synthetic_data\n",
        "\n",
        "def evaluate_generated_data(real_data, synthetic_data):\n",
        "    real_mean = np.mean(real_data, axis=0)\n",
        "    synthetic_mean = np.mean(synthetic_data, axis=0)\n",
        "    real_std = np.std(real_data, axis=0)\n",
        "    synthetic_std = np.std(synthetic_data, axis=0)\n",
        "    real_min = np.min(real_data, axis=0)\n",
        "    synthetic_min = np.min(synthetic_data, axis=0)\n",
        "    real_max = np.max(real_data, axis=0)\n",
        "    synthetic_max = np.max(synthetic_data, axis=0)\n",
        "\n",
        "    summary_df = pd.DataFrame({\n",
        "        'Statistic': ['Mean', 'Standard Deviation', 'Min', 'Max'],\n",
        "        'Real Data': [real_mean, real_std, real_min, real_max],\n",
        "        'Synthetic Data': [synthetic_mean, synthetic_std, synthetic_min, synthetic_max]\n",
        "    })\n",
        "\n",
        "    print(\"Summary Statistics:\")\n",
        "    print(summary_df)\n",
        "\n",
        "    # Plotting\n",
        "    fig, ax = plt.subplots(figsize=(10, 6))\n",
        "    index = np.arange(real_data.shape[1])\n",
        "    bar_width = 0.35\n",
        "    opacity = 0.8\n",
        "\n",
        "    rects1 = plt.bar(index, real_mean, bar_width, alpha=opacity, color='b', label='Real Data')\n",
        "    rects2 = plt.bar(index + bar_width, synthetic_mean, bar_width, alpha=opacity, color='g', label='Synthetic Data')\n",
        "\n",
        "    plt.xlabel('Features')\n",
        "    plt.ylabel('Values')\n",
        "    plt.title('Mean Comparison')\n",
        "    plt.xticks(index + bar_width / 2, [f'Feature_{i}' for i in range(real_data.shape[1])])\n",
        "    plt.legend()\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "def compare_correlation(real_data, synthetic_data):\n",
        "    real_df = pd.DataFrame(real_data, columns=[f'Feature_{i}' for i in range(real_data.shape[1])])\n",
        "    synthetic_df = pd.DataFrame(synthetic_data, columns=[f'Feature_{i}' for i in range(synthetic_data.shape[1])])\n",
        "    real_corr = real_df.corr()\n",
        "    synthetic_corr = synthetic_df.corr()\n",
        "    corr_diff = synthetic_corr - real_corr\n",
        "\n",
        "    print(\"Difference in Correlation Matrices:\")\n",
        "    print(corr_diff)\n",
        "\n",
        "latent_dim = 64\n",
        "num_synthetic_samples = 1000\n",
        "\n",
        "# Generate synthetic data using the trained generator\n",
        "gan_instance = Gan(real_data, latent_dim)\n",
        "generator = gan_instance._generator()\n",
        "synthetic_data = generate_synthetic_data(generator, num_synthetic_samples, latent_dim)\n",
        "\n",
        "# Evaluate the generated data\n",
        "evaluate_generated_data(real_data, synthetic_data)\n",
        "\n",
        "# Compare correlation matrices\n",
        "compare_correlation(real_data, synthetic_data)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-kZ_7QYAhCUm"
      },
      "outputs": [],
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "from imblearn.keras import balanced_batch_generator\n",
        "from ssgan import SSGAN # Assuming you have an SSGAN implementation\n",
        "\n",
        "# 1. Balancing using SSGAN\n",
        "def balance_with_ssgan(real_data, latent_dim, num_epochs):\n",
        "    # Assuming real_data is a pandas DataFrame with 'is_fraud' column indicating fraud or not fraud\n",
        "\n",
        "    # Separate fraud and not fraud samples\n",
        "    fraud_data = real_data[real_data['is_fraud'] == 1]\n",
        "    not_fraud_data = real_data[real_data['is_fraud'] == 0]\n",
        "\n",
        "    # Train SSGAN model\n",
        "    ssgan = SSGAN(real_data.shape[1], latent_dim)\n",
        "    ssgan.train(real_data.values, num_epochs=num_epochs)\n",
        "\n",
        "    # Generate synthetic samples for fraud class\n",
        "    num_synthetic_samples = len(fraud_data)\n",
        "    synthetic_fraud_data = ssgan.generate_samples(num_synthetic_samples)\n",
        "\n",
        "    # Combine synthetic fraud data with original not fraud data\n",
        "    balanced_data = pd.concat([not_fraud_data, pd.DataFrame(synthetic_fraud_data, columns=real_data.columns)], axis=0)\n",
        "\n",
        "    return balanced_data\n",
        "\n",
        "# 2. Balancing using SMOTE\n",
        "def balance_with_smote(real_data):\n",
        "    # Separate features and target\n",
        "    X = real_data.drop('is_fraud', axis=1)\n",
        "    y = real_data['is_fraud']\n",
        "\n",
        "    # Apply SMOTE\n",
        "    smote = SMOTE()\n",
        "    X_resampled, y_resampled = smote.fit_resample(X, y)\n",
        "\n",
        "    # Combine resampled data\n",
        "    balanced_data = pd.concat([pd.DataFrame(X_resampled, columns=X.columns), pd.Series(y_resampled, name='is_fraud')], axis=1)\n",
        "\n",
        "    return balanced_data\n",
        "\n",
        "# Usage\n",
        "balanced_data_ssgan = balance_with_ssgan(real_data, latent_dim=64, num_epochs=200)\n",
        "balanced_data_smote = balance_with_smote(real_data)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FAQ0OFE_iltL"
      },
      "outputs": [],
      "source": [
        "fraud_counts = real_data['is_fraud'].value_counts()\n",
        "\n",
        "# Plotting the distribution\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.barplot(x=fraud_counts.index, y=fraud_counts.values)\n",
        "plt.title('Distribution of Fraud vs Not Fraud')\n",
        "plt.xlabel('Class')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks([0, 1], ['Not Fraud', 'Fraud'])\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "machine_shape": "hm",
      "provenance": [],
      "authorship_tag": "ABX9TyOVAEy/v2K4s9LnEEpDd9PN",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}