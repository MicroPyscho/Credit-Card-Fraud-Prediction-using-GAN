{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MicroPyscho/Credit-Card-Fraud-Prediction-using-GAN/blob/main/latest%20edit\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zN3SdubUnBqo",
        "outputId": "4ec83136-c125-430b-be5f-3e90e0614ef1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: tensorflow-gan in /usr/local/lib/python3.10/dist-packages (2.1.0)\n",
            "Requirement already satisfied: tensorflow-hub>=0.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow-gan) (0.16.1)\n",
            "Requirement already satisfied: tensorflow-probability>=0.7 in /usr/local/lib/python3.10/dist-packages (from tensorflow-gan) (0.23.0)\n",
            "Requirement already satisfied: numpy>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow-hub>=0.2->tensorflow-gan) (1.25.2)\n",
            "Requirement already satisfied: protobuf>=3.19.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow-hub>=0.2->tensorflow-gan) (3.20.3)\n",
            "Requirement already satisfied: tf-keras>=2.14.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow-hub>=0.2->tensorflow-gan) (2.15.1)\n",
            "Requirement already satisfied: absl-py in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (1.4.0)\n",
            "Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (1.16.0)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (4.4.2)\n",
            "Requirement already satisfied: cloudpickle>=1.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (2.2.1)\n",
            "Requirement already satisfied: gast>=0.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (0.5.4)\n",
            "Requirement already satisfied: dm-tree in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (0.1.8)\n",
            "Requirement already satisfied: tensorflow<2.16,>=2.15 in /usr/local/lib/python3.10/dist-packages (from tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.15.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=23.5.26 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (24.3.7)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.2.0)\n",
            "Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.9.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (18.1.1)\n",
            "Requirement already satisfied: ml-dtypes~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.2.0)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.3.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (24.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (67.7.2)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.4.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (4.10.0)\n",
            "Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (1.14.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.36.0)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (1.62.1)\n",
            "Requirement already satisfied: tensorboard<2.16,>=2.15 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.15.2)\n",
            "Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.15.0)\n",
            "Requirement already satisfied: keras<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.15.0)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.43.0)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.27.0)\n",
            "Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (1.2.0)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.6)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.31.0)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.0.1)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (5.3.3)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.3.0)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (4.9)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (1.4.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2024.2.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.1.5)\n",
            "Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.5.1)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.2.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.13.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.50.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n",
            "Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.10/dist-packages (from seaborn) (1.5.3)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2023.4)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n",
            "\u001b[31mERROR: Could not find a version that satisfies the requirement ssgan (from versions: none)\u001b[0m\u001b[31m\n",
            "\u001b[0m\u001b[31mERROR: No matching distribution found for ssgan\u001b[0m\u001b[31m\n",
            "\u001b[0mRequirement already satisfied: pyarrow in /usr/local/lib/python3.10/dist-packages (14.0.2)\n",
            "Requirement already satisfied: numpy>=1.16.6 in /usr/local/lib/python3.10/dist-packages (from pyarrow) (1.25.2)\n"
          ]
        }
      ],
      "source": [
        "!pip install tensorflow-gan\n",
        "!pip install matplotlib seaborn\n",
        "!pip install ssgan\n",
        "!pip install pyarrow\n",
        "#!pip install tabgan\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import tensorflow_gan as tfgan\n",
        "import tensorflow_datasets as tfds\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "%matplotlib inline\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.linear_model import Lasso\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "from torchvision import transforms\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from scipy.sparse import hstack\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.linear_model import Lasso\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "import pandas as pd\n",
        "from keras.models import Model\n",
        "from keras.layers import Input\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Flatten\n",
        "from keras.layers import LeakyReLU\n",
        "from keras.layers import Dense\n",
        "from keras.optimizers import Adam\n",
        "from tensorflow.keras.utils import plot_model\n",
        "#from keras.utils.vis_utils import plot_model\n",
        "#from ssgan.ssgan import SemiSupervisedGAN\n",
        "from datetime import datetime"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wu8Juc4pnJkC",
        "outputId": "29a8b670-784f-4594-925f-401607883301"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "import os\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "4xBRGYX6nO1x"
      },
      "outputs": [],
      "source": [
        "file_path = '/content/drive/MyDrive/df_train.csv'\n",
        "df_train_contd = pd.read_csv(file_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        },
        "id": "40-usPNMnS4L",
        "outputId": "9dd32ec7-432a-4246-b232-4772f4ebab26"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0            cc_num       category     amt gender    zip      lat  \\\n",
              "0           0  2703186189652095       misc_net    4.97      F  28654  36.0788   \n",
              "1           1      630423337322    grocery_pos  107.23      F  99160  48.8878   \n",
              "2           2    38859492057661  entertainment  220.11      M  83252  42.1808   \n",
              "3           3  3534093764340240  gas_transport   45.00      M  59632  46.2306   \n",
              "4           4   375534208663984       misc_pos   41.96      M  24433  38.4207   \n",
              "\n",
              "       long  city_pop  merch_lat  merch_long  is_fraud   tx_time  age  \n",
              "0  -81.1781      3495  36.011293  -82.048315         0  00:00:18   36  \n",
              "1 -118.2105       149  49.159047 -118.186462         0  00:00:44   45  \n",
              "2 -112.2620      4154  43.150704 -112.154481         0  00:00:51   62  \n",
              "3 -112.1138      1939  47.034331 -112.561071         0  00:01:16   57  \n",
              "4  -79.4629        99  38.674999  -78.632459         0  00:03:06   37  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-322a996d-0508-4620-958f-b82fe8b5a83f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>cc_num</th>\n",
              "      <th>category</th>\n",
              "      <th>amt</th>\n",
              "      <th>gender</th>\n",
              "      <th>zip</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>city_pop</th>\n",
              "      <th>merch_lat</th>\n",
              "      <th>merch_long</th>\n",
              "      <th>is_fraud</th>\n",
              "      <th>tx_time</th>\n",
              "      <th>age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>2703186189652095</td>\n",
              "      <td>misc_net</td>\n",
              "      <td>4.97</td>\n",
              "      <td>F</td>\n",
              "      <td>28654</td>\n",
              "      <td>36.0788</td>\n",
              "      <td>-81.1781</td>\n",
              "      <td>3495</td>\n",
              "      <td>36.011293</td>\n",
              "      <td>-82.048315</td>\n",
              "      <td>0</td>\n",
              "      <td>00:00:18</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>630423337322</td>\n",
              "      <td>grocery_pos</td>\n",
              "      <td>107.23</td>\n",
              "      <td>F</td>\n",
              "      <td>99160</td>\n",
              "      <td>48.8878</td>\n",
              "      <td>-118.2105</td>\n",
              "      <td>149</td>\n",
              "      <td>49.159047</td>\n",
              "      <td>-118.186462</td>\n",
              "      <td>0</td>\n",
              "      <td>00:00:44</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>38859492057661</td>\n",
              "      <td>entertainment</td>\n",
              "      <td>220.11</td>\n",
              "      <td>M</td>\n",
              "      <td>83252</td>\n",
              "      <td>42.1808</td>\n",
              "      <td>-112.2620</td>\n",
              "      <td>4154</td>\n",
              "      <td>43.150704</td>\n",
              "      <td>-112.154481</td>\n",
              "      <td>0</td>\n",
              "      <td>00:00:51</td>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>3534093764340240</td>\n",
              "      <td>gas_transport</td>\n",
              "      <td>45.00</td>\n",
              "      <td>M</td>\n",
              "      <td>59632</td>\n",
              "      <td>46.2306</td>\n",
              "      <td>-112.1138</td>\n",
              "      <td>1939</td>\n",
              "      <td>47.034331</td>\n",
              "      <td>-112.561071</td>\n",
              "      <td>0</td>\n",
              "      <td>00:01:16</td>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>375534208663984</td>\n",
              "      <td>misc_pos</td>\n",
              "      <td>41.96</td>\n",
              "      <td>M</td>\n",
              "      <td>24433</td>\n",
              "      <td>38.4207</td>\n",
              "      <td>-79.4629</td>\n",
              "      <td>99</td>\n",
              "      <td>38.674999</td>\n",
              "      <td>-78.632459</td>\n",
              "      <td>0</td>\n",
              "      <td>00:03:06</td>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-322a996d-0508-4620-958f-b82fe8b5a83f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-322a996d-0508-4620-958f-b82fe8b5a83f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-322a996d-0508-4620-958f-b82fe8b5a83f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-72f739d3-9066-417d-9583-cacd847ccaba\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-72f739d3-9066-417d-9583-cacd847ccaba')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-72f739d3-9066-417d-9583-cacd847ccaba button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_train_contd"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "df_train_contd.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Create a sample of dataset"
      ],
      "metadata": {
        "id": "cEXl_74z89kK"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b4mrmlcenT_m",
        "outputId": "b310ce16-7ccc-4098-8236-1bdca2403300"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sampled dataset info:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 50000 entries, 0 to 49999\n",
            "Data columns (total 14 columns):\n",
            " #   Column      Non-Null Count  Dtype  \n",
            "---  ------      --------------  -----  \n",
            " 0   Unnamed: 0  50000 non-null  int64  \n",
            " 1   cc_num      50000 non-null  int64  \n",
            " 2   category    50000 non-null  object \n",
            " 3   amt         50000 non-null  float64\n",
            " 4   gender      50000 non-null  object \n",
            " 5   zip         50000 non-null  int64  \n",
            " 6   lat         50000 non-null  float64\n",
            " 7   long        50000 non-null  float64\n",
            " 8   city_pop    50000 non-null  int64  \n",
            " 9   merch_lat   50000 non-null  float64\n",
            " 10  merch_long  50000 non-null  float64\n",
            " 11  is_fraud    50000 non-null  int64  \n",
            " 12  tx_time     50000 non-null  object \n",
            " 13  age         50000 non-null  int64  \n",
            "dtypes: float64(5), int64(6), object(3)\n",
            "memory usage: 5.3+ MB\n",
            "None\n"
          ]
        }
      ],
      "source": [
        "df_train_contd.reset_index(drop=True, inplace=True)\n",
        "\n",
        "minor_class = df_train_contd[df_train_contd['is_fraud'] == 1]\n",
        "major_class = df_train_contd[df_train_contd['is_fraud'] == 0]\n",
        "\n",
        "num_minority = minor_class.shape[0]\n",
        "num_majority = major_class.shape[0]\n",
        "\n",
        "minor_sample_prop = 0.7\n",
        "\n",
        "num_minor_samples = min(int(50000 * minor_sample_prop), num_minority)\n",
        "num_major_samples = 50000 - num_minor_samples\n",
        "\n",
        "# Sample from each class separately\n",
        "minor_samp = minor_class.sample(n=num_minor_samples, random_state=42, replace=num_minor_samples > num_minority)\n",
        "major_samp = major_class.sample(n=num_major_samples, random_state=42, replace=num_major_samples > num_majority)\n",
        "\n",
        "# Concatenate the samples\n",
        "df_train_contd_eg = pd.concat([minor_samp, major_samp], ignore_index=True)\n",
        "\n",
        "print(\"Sampled dataset info:\")\n",
        "print(df_train_contd_eg.info())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "DQlHJA3BsKw2",
        "outputId": "f99bdb7d-ac28-4825-fe06-213f42341d94"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Group by category and count fraud cases in each category\n",
        "fraud_by_category = df_train_contd_eg.groupby(\"category\")[\"is_fraud\"].agg(fraud_cases='sum', total_cases='count').sort_values(by=\"fraud_cases\")\n",
        "\n",
        "# Plot the graph\n",
        "plt.figure(figsize=(12, 8))\n",
        "fraud_by_category.plot(kind='bar', color=['blue', 'lightgrey'])\n",
        "plt.xlabel(\"Transaction Category\")\n",
        "plt.ylabel(\"Number of Cases\")\n",
        "plt.title(\"Fraud Distribution and Total Transactions by Transaction Category\")\n",
        "plt.legend([\"Fraud Cases\", \"Total Cases\"], loc=\"upper right\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        },
        "id": "rVcfGaN0oOF3",
        "outputId": "85c3cb52-d4e4-450f-8497-900dab783e14"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0               cc_num      category     amt gender    zip  \\\n",
              "0      758837     4365382885912355   grocery_pos  312.51      M  55771   \n",
              "1      981412      180048185037117     kids_pets   20.53      F   7060   \n",
              "2      799445  4102003771126577611   grocery_pos  264.10      M  76248   \n",
              "3      112813     2657850734909997  shopping_net  987.73      M  48206   \n",
              "4      833901     3557442674264531  shopping_net  868.00      F  43136   \n",
              "\n",
              "       lat     long  city_pop  merch_lat  merch_long  is_fraud   tx_time  age  \n",
              "0  48.1439 -92.8561      1680  48.488032  -92.519786         1  22:18:56   47  \n",
              "1  40.6152 -74.4150     71485  40.151652  -75.278513         1  23:13:33   49  \n",
              "2  32.9276 -97.2489     95035  33.098306  -97.968694         1  01:53:21   36  \n",
              "3  42.3749 -83.1087    673342  42.814546  -82.624587         1  22:11:30   77  \n",
              "4  39.8013 -82.8125       460  38.819028  -82.364296         1  22:37:25   19  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c92b83c5-0159-49f1-b94b-90b4d198e5d1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>cc_num</th>\n",
              "      <th>category</th>\n",
              "      <th>amt</th>\n",
              "      <th>gender</th>\n",
              "      <th>zip</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>city_pop</th>\n",
              "      <th>merch_lat</th>\n",
              "      <th>merch_long</th>\n",
              "      <th>is_fraud</th>\n",
              "      <th>tx_time</th>\n",
              "      <th>age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>758837</td>\n",
              "      <td>4365382885912355</td>\n",
              "      <td>grocery_pos</td>\n",
              "      <td>312.51</td>\n",
              "      <td>M</td>\n",
              "      <td>55771</td>\n",
              "      <td>48.1439</td>\n",
              "      <td>-92.8561</td>\n",
              "      <td>1680</td>\n",
              "      <td>48.488032</td>\n",
              "      <td>-92.519786</td>\n",
              "      <td>1</td>\n",
              "      <td>22:18:56</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>981412</td>\n",
              "      <td>180048185037117</td>\n",
              "      <td>kids_pets</td>\n",
              "      <td>20.53</td>\n",
              "      <td>F</td>\n",
              "      <td>7060</td>\n",
              "      <td>40.6152</td>\n",
              "      <td>-74.4150</td>\n",
              "      <td>71485</td>\n",
              "      <td>40.151652</td>\n",
              "      <td>-75.278513</td>\n",
              "      <td>1</td>\n",
              "      <td>23:13:33</td>\n",
              "      <td>49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>799445</td>\n",
              "      <td>4102003771126577611</td>\n",
              "      <td>grocery_pos</td>\n",
              "      <td>264.10</td>\n",
              "      <td>M</td>\n",
              "      <td>76248</td>\n",
              "      <td>32.9276</td>\n",
              "      <td>-97.2489</td>\n",
              "      <td>95035</td>\n",
              "      <td>33.098306</td>\n",
              "      <td>-97.968694</td>\n",
              "      <td>1</td>\n",
              "      <td>01:53:21</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>112813</td>\n",
              "      <td>2657850734909997</td>\n",
              "      <td>shopping_net</td>\n",
              "      <td>987.73</td>\n",
              "      <td>M</td>\n",
              "      <td>48206</td>\n",
              "      <td>42.3749</td>\n",
              "      <td>-83.1087</td>\n",
              "      <td>673342</td>\n",
              "      <td>42.814546</td>\n",
              "      <td>-82.624587</td>\n",
              "      <td>1</td>\n",
              "      <td>22:11:30</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>833901</td>\n",
              "      <td>3557442674264531</td>\n",
              "      <td>shopping_net</td>\n",
              "      <td>868.00</td>\n",
              "      <td>F</td>\n",
              "      <td>43136</td>\n",
              "      <td>39.8013</td>\n",
              "      <td>-82.8125</td>\n",
              "      <td>460</td>\n",
              "      <td>38.819028</td>\n",
              "      <td>-82.364296</td>\n",
              "      <td>1</td>\n",
              "      <td>22:37:25</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c92b83c5-0159-49f1-b94b-90b4d198e5d1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c92b83c5-0159-49f1-b94b-90b4d198e5d1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c92b83c5-0159-49f1-b94b-90b4d198e5d1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fc61c468-387a-4901-9080-5c22d22cd0e5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fc61c468-387a-4901-9080-5c22d22cd0e5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fc61c468-387a-4901-9080-5c22d22cd0e5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_train_contd_eg",
              "summary": "{\n  \"name\": \"df_train_contd_eg\",\n  \"rows\": 50000,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 376924,\n        \"min\": 23,\n        \"max\": 1296642,\n        \"num_unique_values\": 50000,\n        \"samples\": [\n          1247665,\n          1136263,\n          626399\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cc_num\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1303686051489968896,\n        \"min\": 60416207185,\n        \"max\": 4992346398065154184,\n        \"num_unique_values\": 983,\n        \"samples\": [\n          4570636521433188,\n          4427805710168,\n          374125201044065\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"health_fitness\",\n          \"grocery_net\",\n          \"grocery_pos\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 255.4663762952516,\n        \"min\": 1.0,\n        \"max\": 9999.39,\n        \"num_unique_values\": 20338,\n        \"samples\": [\n          293.68,\n          48.43,\n          985.41\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"F\",\n          \"M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26997,\n        \"min\": 1257,\n        \"max\": 99783,\n        \"num_unique_values\": 970,\n        \"samples\": [\n          4616,\n          4364\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.087477249777939,\n        \"min\": 20.0271,\n        \"max\": 66.6933,\n        \"num_unique_values\": 968,\n        \"samples\": [\n          44.3566,\n          44.3229\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.923274548779187,\n        \"min\": -165.6723,\n        \"max\": -67.9503,\n        \"num_unique_values\": 969,\n        \"samples\": [\n          -103.6999,\n          -69.9576\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 303761,\n        \"min\": 23,\n        \"max\": 2906700,\n        \"num_unique_values\": 879,\n        \"samples\": [\n          459921,\n          6025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.120583086725056,\n        \"min\": 19.04188,\n        \"max\": 67.510267,\n        \"num_unique_values\": 49916,\n        \"samples\": [\n          39.973882,\n          32.861662\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.93709910275609,\n        \"min\": -166.65656,\n        \"max\": -66.962913,\n        \"num_unique_values\": 49970,\n        \"samples\": [\n          -86.000404,\n          -98.567552\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tx_time\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 37098,\n        \"samples\": [\n          \"20:07:18\",\n          \"06:30:49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 19,\n        \"max\": 99,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          64,\n          47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "df_train_contd_eg.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lSUMrIFFxVqD",
        "outputId": "ea2100a1-6247-4ed9-cc8d-44dc5a7f1040"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "missing values per column:\n",
            "Unnamed: 0    0\n",
            "cc_num        0\n",
            "category      0\n",
            "amt           0\n",
            "gender        0\n",
            "zip           0\n",
            "lat           0\n",
            "long          0\n",
            "city_pop      0\n",
            "merch_lat     0\n",
            "merch_long    0\n",
            "is_fraud      0\n",
            "tx_time       0\n",
            "age           0\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "#check for missing values\n",
        "missing_values = df_train_contd_eg.isna().sum()\n",
        "\n",
        "df_train_contd = df_train_contd_eg.reset_index(drop=True)\n",
        "print(\"missing values per column:\")\n",
        "print (missing_values)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Drop all problematic columns\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "CB10qIsk80_C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#drop problematic columns\n",
        "real_dataset = df_train_contd.drop(columns=[\"Unnamed: 0\", \"cc_num\", \"category\"])\n",
        "print(real_dataset.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P2la9CKGhz4r",
        "outputId": "640b41af-24d1-4e12-a3de-503d34de9272"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(50000, 11)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Scale and Transform the dataset"
      ],
      "metadata": {
        "id": "_t1INprW8qqp"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "mDapEgIx3k5L",
        "outputId": "a6b960bb-9ced-4b87-d218-351d5da18f52"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Dataframe shape: (50000, 11)\n",
            "Encoded DataFrame shape: (50000, 10)\n",
            "feature_names length: 10\n",
            "z_encoded shape: 10\n",
            "First few rows of z_encoded:\n",
            "Original Dataframe shape: (50000, 11)\n",
            "Encoded DataFrame shape: (50000, 12)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   is_fraud   tx_time  gender_F  gender_M     amt      zip      lat     long  \\\n",
              "0         1  22:18:56       0.0       1.0  312.51  55771.0  48.1439 -92.8561   \n",
              "1         1  23:13:33       1.0       0.0   20.53   7060.0  40.6152 -74.4150   \n",
              "2         1  01:53:21       0.0       1.0  264.10  76248.0  32.9276 -97.2489   \n",
              "3         1  22:11:30       0.0       1.0  987.73  48206.0  42.3749 -83.1087   \n",
              "4         1  22:37:25       1.0       0.0  868.00  43136.0  39.8013 -82.8125   \n",
              "\n",
              "   city_pop  merch_lat  merch_long   age  \n",
              "0    1680.0  48.488032  -92.519786  47.0  \n",
              "1   71485.0  40.151652  -75.278513  49.0  \n",
              "2   95035.0  33.098306  -97.968694  36.0  \n",
              "3  673342.0  42.814546  -82.624587  77.0  \n",
              "4     460.0  38.819028  -82.364296  19.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e4703fd8-ba1a-44be-9c06-f163f8109bac\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_fraud</th>\n",
              "      <th>tx_time</th>\n",
              "      <th>gender_F</th>\n",
              "      <th>gender_M</th>\n",
              "      <th>amt</th>\n",
              "      <th>zip</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>city_pop</th>\n",
              "      <th>merch_lat</th>\n",
              "      <th>merch_long</th>\n",
              "      <th>age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>22:18:56</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>312.51</td>\n",
              "      <td>55771.0</td>\n",
              "      <td>48.1439</td>\n",
              "      <td>-92.8561</td>\n",
              "      <td>1680.0</td>\n",
              "      <td>48.488032</td>\n",
              "      <td>-92.519786</td>\n",
              "      <td>47.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>23:13:33</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>20.53</td>\n",
              "      <td>7060.0</td>\n",
              "      <td>40.6152</td>\n",
              "      <td>-74.4150</td>\n",
              "      <td>71485.0</td>\n",
              "      <td>40.151652</td>\n",
              "      <td>-75.278513</td>\n",
              "      <td>49.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>01:53:21</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>264.10</td>\n",
              "      <td>76248.0</td>\n",
              "      <td>32.9276</td>\n",
              "      <td>-97.2489</td>\n",
              "      <td>95035.0</td>\n",
              "      <td>33.098306</td>\n",
              "      <td>-97.968694</td>\n",
              "      <td>36.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>22:11:30</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>987.73</td>\n",
              "      <td>48206.0</td>\n",
              "      <td>42.3749</td>\n",
              "      <td>-83.1087</td>\n",
              "      <td>673342.0</td>\n",
              "      <td>42.814546</td>\n",
              "      <td>-82.624587</td>\n",
              "      <td>77.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>22:37:25</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>868.00</td>\n",
              "      <td>43136.0</td>\n",
              "      <td>39.8013</td>\n",
              "      <td>-82.8125</td>\n",
              "      <td>460.0</td>\n",
              "      <td>38.819028</td>\n",
              "      <td>-82.364296</td>\n",
              "      <td>19.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4703fd8-ba1a-44be-9c06-f163f8109bac')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e4703fd8-ba1a-44be-9c06-f163f8109bac button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e4703fd8-ba1a-44be-9c06-f163f8109bac');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6c8d6be0-6728-44b9-8825-be2470c853e3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6c8d6be0-6728-44b9-8825-be2470c853e3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6c8d6be0-6728-44b9-8825-be2470c853e3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_train_contd",
              "summary": "{\n  \"name\": \"df_train_contd\",\n  \"rows\": 50000,\n  \"fields\": [\n    {\n      \"column\": \"is_fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tx_time\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 37098,\n        \"samples\": [\n          \"20:07:18\",\n          \"06:30:49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.49863113727506153,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_M\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4986311372750615,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 255.4663762952516,\n        \"min\": 1.0,\n        \"max\": 9999.39,\n        \"num_unique_values\": 20338,\n        \"samples\": [\n          293.68,\n          48.43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26997.39801727495,\n        \"min\": 1257.0,\n        \"max\": 99783.0,\n        \"num_unique_values\": 970,\n        \"samples\": [\n          4616.0,\n          4364.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.087477249777939,\n        \"min\": 20.0271,\n        \"max\": 66.6933,\n        \"num_unique_values\": 968,\n        \"samples\": [\n          44.3566,\n          44.3229\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.923274548779187,\n        \"min\": -165.6723,\n        \"max\": -67.9503,\n        \"num_unique_values\": 969,\n        \"samples\": [\n          -103.6999,\n          -69.9576\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 303761.32655676507,\n        \"min\": 23.0,\n        \"max\": 2906700.0,\n        \"num_unique_values\": 879,\n        \"samples\": [\n          459921.0,\n          6025.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.120583086725056,\n        \"min\": 19.04188,\n        \"max\": 67.510267,\n        \"num_unique_values\": 49916,\n        \"samples\": [\n          39.973882,\n          32.861662\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.93709910275609,\n        \"min\": -166.65656,\n        \"max\": -66.962913,\n        \"num_unique_values\": 49970,\n        \"samples\": [\n          -86.000404,\n          -98.567552\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.651335672957465,\n        \"min\": 19.0,\n        \"max\": 99.0,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          64.0,\n          47.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "#Scale, one hot encode and transform data\n",
        "cat_features = [\"gender\"]\n",
        "cat_transformer = OneHotEncoder()\n",
        "\n",
        "num_features = [\"amt\", \"zip\", \"lat\", \"long\", \"city_pop\", \"merch_lat\", \"merch_long\", \"age\"]\n",
        "num_transformer =StandardScaler()\n",
        "\n",
        "preprocessor =ColumnTransformer(\n",
        "    transformers=[\n",
        "        (\"cat\", cat_transformer, cat_features),\n",
        "        (\"num\", num_transformer, num_features)\n",
        "    ]\n",
        ")\n",
        "\n",
        "cat_encoded = cat_transformer.fit_transform(real_dataset[cat_features])\n",
        "\n",
        "\n",
        "z_encoded = hstack([cat_encoded, real_dataset[num_features].values])\n",
        "\n",
        "encoded_cat_feat = cat_transformer.get_feature_names_out(input_features=cat_features)\n",
        "\n",
        "#encoded_cat_feat = preprocessor.named_transformers_[\"cat\"].get_feature_names_out(cat_features)\n",
        "feature_names = list(encoded_cat_feat) + num_features\n",
        "\n",
        "print(\"Original Dataframe shape:\", real_dataset.shape)\n",
        "print(\"Encoded DataFrame shape:\", z_encoded.shape)\n",
        "print(\"feature_names length:\", len(feature_names))\n",
        "print(\"z_encoded shape:\", z_encoded.shape[1])\n",
        "print(\"First few rows of z_encoded:\")\n",
        "\n",
        "encoded_df = pd.DataFrame(data=z_encoded.toarray(), columns=feature_names)\n",
        "\n",
        "df_train_encoded = pd.concat([real_dataset.drop(columns=cat_features + num_features), encoded_df], axis=1)\n",
        "print(\"Original Dataframe shape:\", real_dataset.shape)\n",
        "print(\"Encoded DataFrame shape:\", df_train_encoded.shape)\n",
        "\n",
        "df_train_encoded.reset_index(drop=True, inplace=True)\n",
        "df_train_contd = df_train_encoded\n",
        "df_train_contd.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Scale Data using StandardScaler and RandomForestClassifier"
      ],
      "metadata": {
        "id": "5634piCz-Hxx"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "N9Y7Hbcn4xdD"
      },
      "outputs": [],
      "source": [
        "real_dataset = real_dataset\n",
        "\n",
        "#Load data into chunks and preprocess in chunks due to size\n",
        "num_chunks = 10\n",
        "\n",
        "#Feature importance containers\n",
        "num_feats = real_dataset.shape[1]-1\n",
        "rf_feature_importance = np.zeros(num_feats)\n",
        "lasso_feature_coefficients = np.zeros(num_feats)\n",
        "\n",
        "#separate target from class columns\n",
        "X = real_dataset.drop(columns=[\"is_fraud\"])\n",
        "y = real_dataset[\"is_fraud\"]\n",
        "\n",
        "scaler = StandardScaler()\n",
        "\n",
        "for i in range(num_chunks):\n",
        "  chunk_size = len(real_dataset)//num_chunks\n",
        "  start_idx = i * chunk_size\n",
        "  end_idx = start_idx + chunk_size\n",
        "  start_idx = start_idx + chunk_size\n",
        "  chunk_x = X.iloc[start_idx:end_idx]\n",
        "  chunk_y = y.iloc[start_idx:end_idx]\n",
        "\n",
        "  if len(chunk_x) > 0:\n",
        "    x_chunk_scaled = scaler.fit_transform(chunk_x) #Random Forest Feature Importance\n",
        "    rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "    rf_model.fit(x_chunk_scaled, chunk_y)\n",
        "    rf_feature_importance += rf_model.feature_importances_\n",
        "\n",
        "    lasso_model = Lasso(alpha=0.1, random_state=42)  #Lasso Regression Feature Importance\n",
        "    lasso_model.fit(x_chunk_scaled, chunk_y)\n",
        "    lasso_feature_coefficients += lasso_model.coef_\n",
        "\n",
        "rf_feature_importance /= num_chunks\n",
        "lasso_feature_coefficients /= num_chunks\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "l4iCQEp6WRSg",
        "outputId": "de38cbbb-a836-4230-984a-dd012519b9d3"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Feature Names: 10\n",
            "Coefficients: 10\n",
            "Length of feature importances array: 10\n",
            "Feature Names: ['amt', 'gender', 'zip', 'lat', 'long', 'city_pop', 'merch_lat', 'merch_long', 'tx_time', 'age']\n",
            "Coefficients: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            "Length of feature_nms: 10\n",
            "Length of lasso_feature_coefficients: 10\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "def plot_feature_importances(rf_feature_importance, feature_nms, title):\n",
        "  sorted_idx = rf_feature_importance.argsort()[::-1]\n",
        "  top_10 = sorted_idx[:10]\n",
        "  sns.barplot(x=rf_feature_importance[top_10], y=pd.Series(feature_nms)[top_10])\n",
        "  plt.xlabel(\"Feature Importance\")\n",
        "  plt.ylabel(\"Feature\")\n",
        "  plt.title(title)\n",
        "  plt.show()\n",
        "\n",
        "def plot_coefficients(lasso_feature_coefficients, feature_nms, title):\n",
        "    #assert len(feature_nms)==len(lasso_feature_coefficients),\"Lengths of feature importance must match\"\n",
        "\n",
        "    print(\"Length of feature_nms:\", len(X.columns.tolist()))\n",
        "    print(\"Length of lasso_feature_coefficients:\", len(lasso_feature_coefficients))\n",
        "\n",
        "    coef_df = pd.DataFrame({\"Feature\": feature_nms,\"Coefficient\": lasso_feature_coefficients})\n",
        "    coef_df = coef_df.sort_values(by=\"Coefficient\", ascending=False)\n",
        "    top_10_co =coef_df.head(10)\n",
        "    plt.figure(figsize =(10, 6))\n",
        "    sns.barplot(x=\"Coefficient\", y = \"Feature\", data=top_10_co)\n",
        "    plt.xlabel(\"Coefficient\")\n",
        "    plt.ylabel(\"Feature\")\n",
        "    plt.title(title)\n",
        "    plt.show()\n",
        "\n",
        "feature_importances_scaled = scaler.fit_transform(rf_feature_importance.reshape(-1, 1))\n",
        "coefficients_scaled = scaler.fit_transform(lasso_feature_coefficients.reshape(-1, 1))\n",
        "\n",
        "feature_nms = X.columns.tolist()\n",
        "plot_feature_importances(rf_feature_importance, feature_nms, \"Feature Importance for Random Forest (Scaled)\")\n",
        "\n",
        "feature_nms = X.columns.tolist()\n",
        "\n",
        "print(\"Feature Names:\", len(feature_nms))\n",
        "print(\"Coefficients:\", len(lasso_feature_coefficients))\n",
        "\n",
        "feature_importances_length = len(rf_feature_importance)\n",
        "print(\"Length of feature importances array:\", feature_importances_length)\n",
        "\n",
        "print(\"Feature Names:\", feature_nms)\n",
        "print(\"Coefficients:\", lasso_feature_coefficients)\n",
        "\n",
        "plot_coefficients(lasso_feature_coefficients, feature_nms, \"Lasso Regression Feature Coefficients (Scaled)\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        },
        "id": "r6gZw0PeKNb6",
        "outputId": "9e22a6dd-2b12-4127-c8d6-12e02cae1ca8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(50000, 11)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   is_fraud  gender_F  gender_M     amt      zip      lat     long  city_pop  \\\n",
              "0         1       0.0       1.0  312.51  55771.0  48.1439 -92.8561    1680.0   \n",
              "1         1       1.0       0.0   20.53   7060.0  40.6152 -74.4150   71485.0   \n",
              "2         1       0.0       1.0  264.10  76248.0  32.9276 -97.2489   95035.0   \n",
              "3         1       0.0       1.0  987.73  48206.0  42.3749 -83.1087  673342.0   \n",
              "4         1       1.0       0.0  868.00  43136.0  39.8013 -82.8125     460.0   \n",
              "\n",
              "   merch_lat  merch_long   age  \n",
              "0  48.488032  -92.519786  47.0  \n",
              "1  40.151652  -75.278513  49.0  \n",
              "2  33.098306  -97.968694  36.0  \n",
              "3  42.814546  -82.624587  77.0  \n",
              "4  38.819028  -82.364296  19.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c3902d75-4447-457a-8067-374a686ea2a5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_fraud</th>\n",
              "      <th>gender_F</th>\n",
              "      <th>gender_M</th>\n",
              "      <th>amt</th>\n",
              "      <th>zip</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>city_pop</th>\n",
              "      <th>merch_lat</th>\n",
              "      <th>merch_long</th>\n",
              "      <th>age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>312.51</td>\n",
              "      <td>55771.0</td>\n",
              "      <td>48.1439</td>\n",
              "      <td>-92.8561</td>\n",
              "      <td>1680.0</td>\n",
              "      <td>48.488032</td>\n",
              "      <td>-92.519786</td>\n",
              "      <td>47.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>20.53</td>\n",
              "      <td>7060.0</td>\n",
              "      <td>40.6152</td>\n",
              "      <td>-74.4150</td>\n",
              "      <td>71485.0</td>\n",
              "      <td>40.151652</td>\n",
              "      <td>-75.278513</td>\n",
              "      <td>49.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>264.10</td>\n",
              "      <td>76248.0</td>\n",
              "      <td>32.9276</td>\n",
              "      <td>-97.2489</td>\n",
              "      <td>95035.0</td>\n",
              "      <td>33.098306</td>\n",
              "      <td>-97.968694</td>\n",
              "      <td>36.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>987.73</td>\n",
              "      <td>48206.0</td>\n",
              "      <td>42.3749</td>\n",
              "      <td>-83.1087</td>\n",
              "      <td>673342.0</td>\n",
              "      <td>42.814546</td>\n",
              "      <td>-82.624587</td>\n",
              "      <td>77.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>868.00</td>\n",
              "      <td>43136.0</td>\n",
              "      <td>39.8013</td>\n",
              "      <td>-82.8125</td>\n",
              "      <td>460.0</td>\n",
              "      <td>38.819028</td>\n",
              "      <td>-82.364296</td>\n",
              "      <td>19.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c3902d75-4447-457a-8067-374a686ea2a5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c3902d75-4447-457a-8067-374a686ea2a5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c3902d75-4447-457a-8067-374a686ea2a5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ee93c63e-88c2-4120-8008-feac455b2008\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ee93c63e-88c2-4120-8008-feac455b2008')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ee93c63e-88c2-4120-8008-feac455b2008 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "real_data",
              "summary": "{\n  \"name\": \"real_data\",\n  \"rows\": 50000,\n  \"fields\": [\n    {\n      \"column\": \"is_fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.49863113727506153,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_M\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4986311372750615,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 255.4663762952516,\n        \"min\": 1.0,\n        \"max\": 9999.39,\n        \"num_unique_values\": 20338,\n        \"samples\": [\n          293.68,\n          48.43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26997.39801727495,\n        \"min\": 1257.0,\n        \"max\": 99783.0,\n        \"num_unique_values\": 970,\n        \"samples\": [\n          4616.0,\n          4364.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.087477249777939,\n        \"min\": 20.0271,\n        \"max\": 66.6933,\n        \"num_unique_values\": 968,\n        \"samples\": [\n          44.3566,\n          44.3229\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.923274548779187,\n        \"min\": -165.6723,\n        \"max\": -67.9503,\n        \"num_unique_values\": 969,\n        \"samples\": [\n          -103.6999,\n          -69.9576\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 303761.32655676507,\n        \"min\": 23.0,\n        \"max\": 2906700.0,\n        \"num_unique_values\": 879,\n        \"samples\": [\n          459921.0,\n          6025.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.120583086725056,\n        \"min\": 19.04188,\n        \"max\": 67.510267,\n        \"num_unique_values\": 49916,\n        \"samples\": [\n          39.973882,\n          32.861662\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.93709910275609,\n        \"min\": -166.65656,\n        \"max\": -66.962913,\n        \"num_unique_values\": 49970,\n        \"samples\": [\n          -86.000404,\n          -98.567552\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.651335672957465,\n        \"min\": 19.0,\n        \"max\": 99.0,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          64.0,\n          47.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "real_data = df_train_contd.select_dtypes(include={\"number\"})\n",
        "print(real_data.shape)\n",
        "real_data.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Balance the data using SMOTE"
      ],
      "metadata": {
        "id": "AC-4Tqm5S2h9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Separate features and target variable\n",
        "real_data = df_train_contd.select_dtypes(include={\"number\"})\n",
        "\n",
        "\n",
        "X = real_data.drop(columns=['is_fraud'])\n",
        "y = real_data['is_fraud']\n",
        "\n",
        "#Apply SMOTE to generate synthetic samples\n",
        "smote = SMOTE()\n",
        "X_balanced, y_balanced = smote.fit_resample(X, y)\n",
        "\n",
        "#Combine original and synthetic samples\n",
        "balanced_data = pd.concat([pd.DataFrame(X_balanced, columns=X.columns), pd.Series(y_balanced, name='is_fraud')], axis=1)\n",
        "\n",
        "#Split train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_balanced, y_balanced, test_size=0.2, random_state=42)\n",
        "\n",
        "#Print balanced dataset shape\n",
        "print(balanced_data.shape)\n",
        "print(balanced_data.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sdk-dfoxQ7zJ",
        "outputId": "6d131656-5c7b-41ad-9b3c-ab9521ac6d50"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(84988, 11)\n",
            "   gender_F  gender_M     amt      zip      lat     long  city_pop  merch_lat  \\\n",
            "0       0.0       1.0  312.51  55771.0  48.1439 -92.8561    1680.0  48.488032   \n",
            "1       1.0       0.0   20.53   7060.0  40.6152 -74.4150   71485.0  40.151652   \n",
            "2       0.0       1.0  264.10  76248.0  32.9276 -97.2489   95035.0  33.098306   \n",
            "3       0.0       1.0  987.73  48206.0  42.3749 -83.1087  673342.0  42.814546   \n",
            "4       1.0       0.0  868.00  43136.0  39.8013 -82.8125     460.0  38.819028   \n",
            "\n",
            "   merch_long   age  is_fraud  \n",
            "0  -92.519786  47.0         1  \n",
            "1  -75.278513  49.0         1  \n",
            "2  -97.968694  36.0         1  \n",
            "3  -82.624587  77.0         1  \n",
            "4  -82.364296  19.0         1  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Before balancing\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.countplot(x='is_fraud', data=real_data)\n",
        "plt.title('Distribution of Target Variable (Before Balancing)')\n",
        "plt.xlabel('is_fraud')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "# After balancing\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.countplot(x='is_fraud', data=balanced_data)\n",
        "plt.title('Distribution of Target Variable (After Balancing)')\n",
        "plt.xlabel('is_fraud')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "LylEewy5TJl6",
        "outputId": "72c7b42a-5e95-4e4b-d72b-f00fef022893"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corr_real = real_data.corr()\n",
        "\n",
        "corr_balanced = balanced_data.corr()\n",
        "\n",
        "# Plot correlation matrix for real data\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(corr_real, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\n",
        "plt.title('Correlation Matrix - Real Data')\n",
        "plt.show()\n",
        "\n",
        "# Plot correlation matrix for balanced data\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(corr_balanced, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\n",
        "plt.title('Correlation Matrix - Balanced Data (SMOTE)')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Ci1X6PZlxBey",
        "outputId": "d40ab09a-ed36-4c42-eb68-926b4251d576"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "import pandas as pd\n",
        "\n",
        "X = real_data.drop(columns=['is_fraud'])\n",
        "y = real_data['is_fraud']\n",
        "\n",
        "smote = SMOTE()\n",
        "X_balanced, y_balanced = smote.fit_resample(X, y)\n",
        "\n",
        "balanced_data = pd.concat([pd.DataFrame(X_balanced, columns=X.columns), pd.Series(y_balanced, name='is_fraud')], axis=1)\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_balanced, y_balanced, test_size=0.2, random_state=42)\n",
        "\n",
        "svm_model = SVC(kernel='rbf', random_state=42)  # You can choose different kernels like 'linear', 'poly', 'sigmoid', etc.\n",
        "svm_model.fit(X_train, y_train)\n",
        "\n",
        "y_pred = svm_model.predict(X_test)\n",
        "\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"Accuracy:\", accuracy)\n",
        "\n",
        "print(classification_report(y_test, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rO_EikQVwwxB",
        "outputId": "08ee7a3c-351f-423d-dc2a-5aff19ec1fe5"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.5379456406636075\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.53      0.68      0.60      8496\n",
            "           1       0.55      0.40      0.46      8502\n",
            "\n",
            "    accuracy                           0.54     16998\n",
            "   macro avg       0.54      0.54      0.53     16998\n",
            "weighted avg       0.54      0.54      0.53     16998\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Definition of GAN Parameters"
      ],
      "metadata": {
        "id": "Ej7T9yA42Onb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "0YiHj-xB21NF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import logging\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import tensorflow as tf\n",
        "\n",
        "tf.get_logger().setLevel(logging.ERROR)\n",
        "\n",
        "latent_dim = 100\n",
        "\n",
        "class Gan():\n",
        "    def __init__(self, real_data, latent_dim):\n",
        "        self.real_data = real_data\n",
        "        self.latent_dim = latent_dim\n",
        "        self.n_epochs = 20000\n",
        "\n",
        "    # Generate random noise in a latent space\n",
        "def _noise(self):\n",
        "        noise = np.random.normal(0, 1, (self.real_data.shape[0], self.real_data.shape[1]))\n",
        "        return noise\n",
        "\n",
        "def _generator(self):\n",
        "        model = tf.keras.Sequential(name=\"Generator_model\")\n",
        "        model.add(tf.keras.layers.Dense(5000, activation='relu',input_shape =(self.latent_dim,),\n",
        "                                         kernel_initializer='he_uniform',\n",
        "                                         input_dim=self.latent_dim))\n",
        "        model.add(tf.keras.layer.BatchNormalization())\n",
        "        model.add(tf.keras.layers.LeakyReLU(alpha=0.2))\n",
        "        model.add(tf.keras.layers.Dense(1000, activation='relu'))\n",
        "        model.add(tf.keras.layers.Dense(self.real_data.shape[1], activation='linear'))\n",
        "        return model\n",
        "\n",
        "def _discriminator(self):\n",
        "        model = tf.keras.Sequential(name=\"Discriminator_model\")\n",
        "        model.add(tf.keras.layers.Dense(5000, input_shape=(self.real_data.shape[1],), kernel_initializer='he_uniform'))\n",
        "        model.add(tf.keras.layers.LeakyReLU(alpha=0.2))\n",
        "        model.add(tf.keras.layers.Dense(2500))\n",
        "        model.add(tf.keras.layers.LeakyReLU(alpha=0.2))\n",
        "        model.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n",
        "        model.compile(loss='binary_crossentropy', optimizer=tf.keras.optimizers.Adam(lr=0.0002), metrics=['accuracy'])\n",
        "        return model\n",
        "\n",
        "        return model\n",
        "\n",
        "    # Define the combined generator and discriminator model for updating the generator\n",
        "def _GAN(self, generator, discriminator):\n",
        "        discriminator.trainable = False\n",
        "        generator.trainable = True\n",
        "        model = tf.keras.Sequential(name=\"GAN\")\n",
        "        model.add(generator)\n",
        "        model.add(discriminator)\n",
        "        model.compile(loss='binary_crossentropy', optimizer=tf.keras.optimizers.Adam(lr=0.0002))\n",
        "        return model\n",
        "\n",
        "    # Train the generator and discriminator\n",
        "def train(self, generator, discriminator, gan):\n",
        "        # Manually enumerate epochs\n",
        "        for epoch in range(self.n_epochs):\n",
        "            # Train the discriminator\n",
        "            generated_data = generator.predict(self._noise())\n",
        "            labels = np.concatenate([np.ones(self.real_data.shape[0]), np.zeros(self.real_data.shape[0])])\n",
        "            X = np.concatenate([self.real_data, generated_data])\n",
        "            discriminator.trainable = True\n",
        "            d_loss , _ = discriminator.train_on_batch(X, labels)\n",
        "\n",
        "            # Train the generator\n",
        "            noise = self._noise()\n",
        "            g_loss = gan.train_on_batch(noise, np.ones(self.real_data.shape[0]))\n",
        "\n",
        "            print('>%d, d1=%.3f, d2=%.3f' %(epoch+1, d_loss, g_loss))\n",
        "        return generator\n"
      ],
      "metadata": {
        "id": "loWqH3WKQeL6"
      },
      "execution_count": 91,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Generate random noise in the latent space\n",
        "num_synthetic_samples = 50000\n",
        "noise = np.random.normal(0, 1, (num_synthetic_samples, latent_dim))\n",
        "\n",
        "# Generate synthetic data using the trained generator\n",
        "synthetic_data = trained_generator.predict(noise)\n",
        "\n",
        "# If necessary, inverse transform the synthetic data to its original scale\n",
        "# For example, if you used MinMaxScaler for preprocessing, you would need to inverse transform it\n",
        "synthetic_data = scaler.inverse_transform(synthetic_data)\n",
        "\n",
        "# Convert synthetic data to a DataFrame\n",
        "synthetic_data_df = pd.DataFrame(synthetic_data, columns=real_data.columns)\n",
        "\n",
        "# Display the synthetic data\n",
        "print(\"Synthetic Data Shape:\", synthetic_data_df.shape)\n",
        "print(synthetic_data_df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1LstndKjUbSe",
        "outputId": "d085fc0f-f77e-4540-b552-95bbd0e79815"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1563/1563 [==============================] - 11s 7ms/step\n",
            "Synthetic Data Shape: (50000, 11)\n",
            "   is_fraud  gender_F  gender_M        amt           zip        lat  \\\n",
            "0  0.987549  0.041613  0.840142 -23.232859  62773.835938  37.434113   \n",
            "1  1.015584  0.076016  0.927577 -57.150127  71666.390625  38.189198   \n",
            "2  1.033109 -0.006864  0.938682 -16.166695  62252.421875  38.841190   \n",
            "3  0.976749  0.041594  0.795930 -46.093037  65777.414062  36.434109   \n",
            "4  0.906518  0.077347  1.265886 -91.707863  99196.718750  40.182018   \n",
            "\n",
            "        long      city_pop  merch_lat  merch_long        age  \n",
            "0 -87.007462   8787.500977  36.711685  -87.726959  43.309731  \n",
            "1 -86.069328  11487.063477  37.436790  -85.714302  46.355495  \n",
            "2 -84.157997  10465.509766  37.537983  -84.890877  47.596935  \n",
            "3 -89.293663   3270.582764  36.946106  -89.630951  44.618542  \n",
            "4 -84.607353   4464.034668  40.705841  -83.470879  56.583118  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "synthetic_data_df['is_fraud'] = synthetic_data_df['is_fraud'].round().astype(int)\n",
        "\n",
        "combined_data = pd.concat([real_data, synthetic_data_df], ignore_index=True)\n",
        "\n",
        "print(\"Combined Data Shape:\", combined_data.shape)\n",
        "print(combined_data.head())\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-YsAMvXzVGs1",
        "outputId": "91072119-e8fa-45fa-8d20-988eb10b7952"
      },
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Combined Data Shape: (100000, 11)\n",
            "   is_fraud  gender_F  gender_M     amt      zip      lat     long  city_pop  \\\n",
            "0         1       0.0       1.0  312.51  55771.0  48.1439 -92.8561    1680.0   \n",
            "1         1       1.0       0.0   20.53   7060.0  40.6152 -74.4150   71485.0   \n",
            "2         1       0.0       1.0  264.10  76248.0  32.9276 -97.2489   95035.0   \n",
            "3         1       0.0       1.0  987.73  48206.0  42.3749 -83.1087  673342.0   \n",
            "4         1       1.0       0.0  868.00  43136.0  39.8013 -82.8125     460.0   \n",
            "\n",
            "   merch_lat  merch_long   age  \n",
            "0  48.488032  -92.519786  47.0  \n",
            "1  40.151652  -75.278513  49.0  \n",
            "2  33.098306  -97.968694  36.0  \n",
            "3  42.814546  -82.624587  77.0  \n",
            "4  38.819028  -82.364296  19.0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "combined_data['is_fraud'] = combined_data['is_fraud'].replace(2, 1)\n",
        "fraud_counts = combined_data['is_fraud'].value_counts()\n",
        "\n",
        "print(\"Counts of is_fraud:\")\n",
        "print(fraud_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V_N1szA8WeUI",
        "outputId": "92229a8e-7efd-41c5-e807-4cd91ceb245d"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Counts of is_fraud:\n",
            "1    57506\n",
            "0    42494\n",
            "Name: is_fraud, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.decomposition import PCA\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Perform PCA on real data before GAN\n",
        "pca_real_before = PCA(n_components=2)\n",
        "pca_real_before_result = pca_real_before.fit_transform(real_data)\n",
        "\n",
        "# Perform PCA on real data after GAN\n",
        "pca_real_after = PCA(n_components=2)\n",
        "pca_real_after_result = pca_real_after.fit_transform(combined_data)\n",
        "\n",
        "# Perform PCA on generated data\n",
        "pca_generated = PCA(n_components=2)\n",
        "pca_generated_result = pca_generated.fit_transform(synthetic_data)\n",
        "\n",
        "# Plot the PCA results\n",
        "plt.figure(figsize=(18, 6))\n",
        "\n",
        "# Plot real data before GAN\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.scatter(pca_real_before_result[:, 0], pca_real_before_result[:, 1], label='Real Data Before GAN', alpha=0.5)\n",
        "plt.title('PCA Plot of Real Data Before GAN')\n",
        "plt.xlabel('Principal Component 1')\n",
        "plt.ylabel('Principal Component 2')\n",
        "plt.legend()\n",
        "\n",
        "# Plot real data after GAN and generated data\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.scatter(pca_real_after_result[:, 0], pca_real_after_result[:, 1], label='Real Data After GAN', alpha=0.5)\n",
        "plt.scatter(pca_generated_result[:, 0], pca_generated_result[:, 1], label='Generated Data', alpha=0.5)\n",
        "plt.title('PCA Plot of Real Data After GAN and Generated Data')\n",
        "plt.xlabel('Principal Component 1')\n",
        "plt.ylabel('Principal Component 2')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 346
        },
        "id": "4pPC3ltvYIQJ",
        "outputId": "e7a432e4-3663-44d3-bc68-c2aed985f94c"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plot is_fraud distribution before GAN\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.hist(real_data['is_fraud'], bins=2, color='skyblue', alpha=0.7)\n",
        "plt.title('is_fraud Distribution Before GAN')\n",
        "plt.xlabel('is_fraud')\n",
        "plt.ylabel('Frequency')\n",
        "\n",
        "# Plot is_fraud distribution after GAN\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.hist(combined_data['is_fraud'], bins=2, color='salmon', alpha=0.7)\n",
        "plt.title('is_fraud Distribution After GAN')\n",
        "plt.xlabel('is_fraud')\n",
        "plt.ylabel('Frequency')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "tF2zhAruYwAy",
        "outputId": "b26e1696-2b41-47fe-aa96-d28a4b5b09b4"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import logging\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import pandas as pd\n",
        "\n",
        "tf.get_logger().setLevel(logging.ERROR)\n",
        "\n",
        "class Gan():\n",
        "    def __init__(self, real_data, latent_dim):\n",
        "        self.real_data = real_data\n",
        "        self.latent_dim = latent_dim\n",
        "        self.n_epochs = 1000  # Adjust the number of epochs\n",
        "        self.learning_rate = 0.0002  # Adjust the learning rate\n",
        "\n",
        "    # Generate random noise in a latent space\n",
        "    def _noise(self):\n",
        "        noise = np.random.normal(0, 1, (self.real_data.shape[0], self.latent_dim))\n",
        "        return noise\n",
        "\n",
        "    def _generator(self):\n",
        "        model = tf.keras.Sequential(name=\"Generator_model\")\n",
        "        model.add(tf.keras.layers.Dense(5000, activation='relu', input_shape=(self.latent_dim,),\n",
        "                                         kernel_initializer='he_uniform',\n",
        "                                         input_dim=self.latent_dim))\n",
        "        model.add(tf.keras.layers.Dense(1000, activation='relu'))\n",
        "        model.add(tf.keras.layers.Dense(self.real_data.shape[1], activation='linear'))\n",
        "        return model\n",
        "\n",
        "    def _discriminator(self):\n",
        "        model = tf.keras.Sequential(name=\"Discriminator_model\")\n",
        "        model.add(tf.keras.layers.Dense(5000, activation='relu',\n",
        "                                         kernel_initializer='he_uniform',\n",
        "                                         input_dim=self.real_data.shape[1]))\n",
        "        model.add(tf.keras.layers.Dense(2500, activation='relu'))\n",
        "        # Sigmoid => Real or fake\n",
        "        model.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n",
        "        model.compile(loss='binary_crossentropy',\n",
        "                      optimizer=tf.keras.optimizers.Adam(learning_rate=self.learning_rate),\n",
        "                      metrics=['accuracy'])\n",
        "        return model\n",
        "\n",
        "    # Define the combined GAN model for updating generator\n",
        "    def _GAN(self, generator, discriminator):\n",
        "        discriminator.trainable = False\n",
        "        generator.trainable = True\n",
        "        model = tf.keras.Sequential(name=\"GAN\")\n",
        "        model.add(generator)\n",
        "        model.add(discriminator)\n",
        "        model.compile(loss='binary_crossentropy', optimizer=tf.keras.optimizers.Adam(learning_rate=self.learning_rate))\n",
        "        return model\n",
        "\n",
        "    # Generator and discriminator training\n",
        "    def train(self, generator, discriminator, gan):\n",
        "        # Batch size\n",
        "        batch_size = 64  # Adjust batch size\n",
        "\n",
        "        # Training loop\n",
        "        for epoch in range(self.n_epochs):\n",
        "            # Train discriminator\n",
        "            generated_data = generator.predict(self._noise())\n",
        "            labels = np.concatenate([np.ones(self.real_data.shape[0]), np.zeros(self.real_data.shape[0])])\n",
        "            X = np.concatenate([self.real_data, generated_data])\n",
        "            discriminator.trainable = True\n",
        "            d_loss, _ = discriminator.train_on_batch(X, labels)\n",
        "\n",
        "            # Train generator\n",
        "            noise = self._noise()\n",
        "            g_loss = gan.train_on_batch(noise, np.concatenate([np.ones(self.real_data.shape[0]), np.zeros(self.real_data.shape[0])]))\n",
        "\n",
        "            # Print progress\n",
        "            print('Epoch %d/%d: Discriminator Loss=%.3f, Generator Loss=%.3f' % (epoch + 1, self.n_epochs, d_loss, g_loss))\n",
        "\n",
        "        return generator\n",
        "\n",
        "\n",
        "# Assuming real_data is defined\n",
        "# Identify minority class samples\n",
        "minority_samples = real_data[real_data['is_fraud'] == 1]\n",
        "gen_data = minority_samples.sample(n=15, replace=True, random_state=42)\n",
        "\n",
        "# Normalize minority samples\n",
        "scaler = MinMaxScaler()\n",
        "gen_data_norm = scaler.fit_transform(gen_data)\n",
        "\n",
        "# Define GAN class and instantiate with minority samples and latent dimension\n",
        "latent_dim = 11\n",
        "gan_instance = Gan(gen_data_norm, latent_dim)\n",
        "\n",
        "# Train GAN model with optimized parameters\n",
        "generator = gan_instance._generator()\n",
        "discriminator = gan_instance._discriminator()\n",
        "gan = gan_instance._GAN(generator, discriminator)\n",
        "trained_generator = gan_instance.train(generator, discriminator, gan)\n",
        "\n",
        "# Generate synthetic data using the trained generator\n",
        "num_synthetic_samples = len(real_data)\n",
        "noise = np.random.normal(0, 1, (num_synthetic_samples, latent_dim))\n",
        "synthetic_minority_data = trained_generator.predict(noise)\n",
        "\n",
        "# Convert synthetic data to DataFrame and inverse transform\n",
        "augmented_data_df = pd.DataFrame(scaler.inverse_transform(synthetic_minority_data), columns=gen_data.columns)\n",
        "augmented_data_df = augmented_data_df[:len(real_data)]\n",
        "\n",
        "# Print the augmented synthetic data\n",
        "print(augmented_data_df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "o2O3Zk4iP0qz",
        "outputId": "12a17496-acc7-48ec-a800-598f988eaead"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 52ms/step\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Data cardinality is ambiguous:\n  x sizes: 15\n  y sizes: 30\nMake sure all arrays contain the same number of samples.",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-92-2888494bd7bd>\u001b[0m in \u001b[0;36m<cell line: 95>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     93\u001b[0m \u001b[0mdiscriminator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgan_instance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_discriminator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     94\u001b[0m \u001b[0mgan\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgan_instance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_GAN\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdiscriminator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 95\u001b[0;31m \u001b[0mtrained_generator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgan_instance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdiscriminator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgan\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     96\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m \u001b[0;31m# Generate synthetic data using the trained generator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-92-2888494bd7bd>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(self, generator, discriminator, gan)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;31m# Train generator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0mnoise\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_noise\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0mg_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgan\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_on_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnoise\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mones\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreal_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreal_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0;31m# Print progress\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mtrain_on_batch\u001b[0;34m(self, x, y, sample_weight, class_weight, reset_metrics, return_dict)\u001b[0m\n\u001b[1;32m   2781\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2782\u001b[0m         ):\n\u001b[0;32m-> 2783\u001b[0;31m             iterator = data_adapter.single_batch_iterator(\n\u001b[0m\u001b[1;32m   2784\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdistribute_strategy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_weight\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2785\u001b[0m             )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/data_adapter.py\u001b[0m in \u001b[0;36msingle_batch_iterator\u001b[0;34m(strategy, x, y, sample_weight, class_weight)\u001b[0m\n\u001b[1;32m   1938\u001b[0m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1939\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1940\u001b[0;31m     \u001b[0m_check_data_cardinality\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1941\u001b[0m     \u001b[0mdataset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_tensors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1942\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mclass_weight\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/data_adapter.py\u001b[0m in \u001b[0;36m_check_data_cardinality\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m   1958\u001b[0m             )\n\u001b[1;32m   1959\u001b[0m         \u001b[0mmsg\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"Make sure all arrays contain the same number of samples.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1960\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1961\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1962\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Data cardinality is ambiguous:\n  x sizes: 15\n  y sizes: 30\nMake sure all arrays contain the same number of samples."
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 87,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "fTomV0i4lXXm",
        "outputId": "c64bbbbe-171d-460e-9bec-ed99a5671bae"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 55ms/step\n",
            ">1, d1=0.519, d2=63.001\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            ">2, d1=370.222, d2=0.000\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            ">3, d1=97.620, d2=540.626\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            ">4, d1=4.500, d2=581.730\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            ">5, d1=6.344, d2=612.586\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            ">6, d1=7.356, d2=483.758\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            ">7, d1=7.878, d2=292.718\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            ">8, d1=8.038, d2=120.768\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            ">9, d1=7.958, d2=83.752\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            ">10, d1=11.946, d2=147.585\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            ">11, d1=17.008, d2=128.442\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            ">12, d1=18.564, d2=102.514\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            ">13, d1=8.955, d2=163.719\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            ">14, d1=10.022, d2=206.868\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            ">15, d1=11.079, d2=262.415\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            ">16, d1=12.034, d2=269.561\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            ">17, d1=12.702, d2=238.671\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            ">18, d1=12.957, d2=213.908\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            ">19, d1=12.788, d2=234.640\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            ">20, d1=12.265, d2=224.502\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            ">21, d1=11.510, d2=177.790\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            ">22, d1=10.616, d2=157.118\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            ">23, d1=9.642, d2=130.620\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            ">24, d1=8.622, d2=94.380\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            ">25, d1=7.588, d2=59.234\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            ">26, d1=6.556, d2=26.149\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            ">27, d1=5.512, d2=1.962\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            ">28, d1=7.771, d2=3.897\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            ">29, d1=5.335, d2=11.013\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            ">30, d1=4.312, d2=20.936\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            ">31, d1=4.264, d2=31.329\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            ">32, d1=4.128, d2=33.900\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            ">33, d1=3.911, d2=43.306\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            ">34, d1=3.625, d2=45.226\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            ">35, d1=3.278, d2=49.135\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            ">36, d1=2.881, d2=50.836\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            ">37, d1=2.450, d2=47.200\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            ">38, d1=1.992, d2=36.390\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            ">39, d1=1.520, d2=34.233\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            ">40, d1=1.069, d2=20.892\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            ">41, d1=0.680, d2=12.147\n",
            "1/1 [==============================] - 0s 31ms/step\n",
            ">42, d1=0.460, d2=6.540\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            ">43, d1=1.126, d2=12.641\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            ">44, d1=0.214, d2=18.103\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            ">45, d1=0.165, d2=21.753\n",
            "1/1 [==============================] - 0s 20ms/step\n",
            ">46, d1=0.143, d2=26.260\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            ">47, d1=0.126, d2=23.937\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            ">48, d1=0.111, d2=21.790\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            ">49, d1=0.099, d2=17.282\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            ">50, d1=0.088, d2=15.403\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            ">51, d1=0.103, d2=14.571\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            ">52, d1=0.125, d2=19.581\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            ">53, d1=0.092, d2=22.591\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            ">54, d1=0.110, d2=24.402\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            ">55, d1=0.119, d2=27.105\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            ">56, d1=0.115, d2=16.697\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            ">57, d1=0.109, d2=14.378\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            ">58, d1=0.617, d2=24.373\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            ">59, d1=0.485, d2=37.927\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            ">60, d1=0.583, d2=46.166\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            ">61, d1=0.939, d2=46.719\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            ">62, d1=1.139, d2=39.656\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            ">63, d1=1.329, d2=31.209\n",
            "1/1 [==============================] - 0s 27ms/step\n",
            ">64, d1=4.334, d2=49.233\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            ">65, d1=2.440, d2=63.519\n",
            "1/1 [==============================] - 0s 28ms/step\n",
            ">66, d1=2.749, d2=52.505\n",
            "1/1 [==============================] - 0s 26ms/step\n",
            ">67, d1=3.272, d2=49.849\n",
            "1/1 [==============================] - 0s 25ms/step\n",
            ">68, d1=3.512, d2=45.045\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            ">69, d1=3.481, d2=36.204\n",
            "1/1 [==============================] - 0s 24ms/step\n",
            ">70, d1=3.223, d2=31.409\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            ">71, d1=2.814, d2=24.513\n",
            "1/1 [==============================] - 0s 21ms/step\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-87-f17485e69d66>\u001b[0m in \u001b[0;36m<cell line: 22>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0mdiscriminator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgan_instance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_discriminator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0mgan\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgan_instance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_GAN\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdiscriminator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m \u001b[0mtrained_generator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgan_instance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdiscriminator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgan\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;31m# Generate synthetic data using the trained generator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-86-2035380c0740>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(self, generator, discriminator, gan)\u001b[0m\n\u001b[1;32m     59\u001b[0m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreal_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgenerated_data\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m             \u001b[0mdiscriminator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrainable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m             \u001b[0md_loss\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdiscriminator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_on_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     62\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m             \u001b[0;31m# Train the generator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mtrain_on_batch\u001b[0;34m(self, x, y, sample_weight, class_weight, reset_metrics, return_dict)\u001b[0m\n\u001b[1;32m   2785\u001b[0m             )\n\u001b[1;32m   2786\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake_train_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2787\u001b[0;31m             \u001b[0mlogs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2788\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2789\u001b[0m         \u001b[0mlogs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msync_to_numpy_or_python_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    830\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    831\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 832\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    833\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    834\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    866\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    867\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 868\u001b[0;31m       return tracing_compilation.call_function(\n\u001b[0m\u001b[1;32m    869\u001b[0m           \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_no_variable_creation_config\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    870\u001b[0m       )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py\u001b[0m in \u001b[0;36mcall_function\u001b[0;34m(args, kwargs, tracing_options)\u001b[0m\n\u001b[1;32m    137\u001b[0m   \u001b[0mbound_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m   \u001b[0mflat_inputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munpack_inputs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbound_args\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m   return function._call_flat(  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m    140\u001b[0m       \u001b[0mflat_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m   )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/concrete_function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, tensor_inputs, captured_inputs)\u001b[0m\n\u001b[1;32m   1321\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1322\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1323\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_inference_function\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_preflattened\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1324\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1325\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py\u001b[0m in \u001b[0;36mcall_preflattened\u001b[0;34m(self, args)\u001b[0m\n\u001b[1;32m    214\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mcall_preflattened\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mSequence\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;34m\"\"\"Calls with flattened tensor inputs and returns the structured output.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m     \u001b[0mflat_outputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcall_flat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpack_output\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflat_outputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py\u001b[0m in \u001b[0;36mcall_flat\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m    249\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mrecord\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_recording\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m           \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_bound_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 251\u001b[0;31m             outputs = self._bound_context.call_function(\n\u001b[0m\u001b[1;32m    252\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    253\u001b[0m                 \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/context.py\u001b[0m in \u001b[0;36mcall_function\u001b[0;34m(self, name, tensor_inputs, num_outputs)\u001b[0m\n\u001b[1;32m   1484\u001b[0m     \u001b[0mcancellation_context\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcancellation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1485\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcancellation_context\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1486\u001b[0;31m       outputs = execute.execute(\n\u001b[0m\u001b[1;32m   1487\u001b[0m           \u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"utf-8\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1488\u001b[0m           \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     51\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 53\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     54\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     55\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "# Identify minority class samples\n",
        "minority_samples = real_data[real_data['is_fraud'] == 1]\n",
        "gen_data = minority_samples.sample(n=15, replace=True, random_state=42)\n",
        "\n",
        "# Normalize minority samples\n",
        "scaler = MinMaxScaler()\n",
        "gen_data_norm = scaler.fit_transform(gen_data)\n",
        "\n",
        "gen_data_tensor = tf.convert_to_tensor(gen_data_norm, dtype=tf.float32)\n",
        "\n",
        "# Define GAN class and instantiate with minority samples and latent dimension\n",
        "latent_dim = 11\n",
        "gan_instance = Gan(gen_data_tensor, latent_dim)\n",
        "gen_data_tensor = tf.stack(gen_data_norm)\n",
        "\n",
        "# Train GAN model with optimized parameters\n",
        "generator = gan_instance._generator()\n",
        "discriminator = gan_instance._discriminator()\n",
        "gan = gan_instance._GAN(generator, discriminator)\n",
        "trained_generator = gan_instance.train(generator, discriminator, gan)\n",
        "\n",
        "# Generate synthetic data using the trained generator\n",
        "num_synthetic_samples = len(real_data)\n",
        "noise = np.random.normal(0, 1, (num_synthetic_samples, latent_dim))\n",
        "synthetic_minority_data = trained_generator.predict(noise)\n",
        "\n",
        "# Convert synthetic data to DataFrame and inverse transform\n",
        "augmented_data_df = pd.DataFrame(scaler.inverse_transform(synthetic_minority_data), columns=gen_data.columns)\n",
        "augmented_data_df = augmented_data_df[:len(real_data)]\n",
        "\n",
        "combined_data = pd.concat([real_data, augmented_data_df], axis=0)\n",
        "\n",
        "print(combined_data)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Real Data Shape:\", real_data.shape)\n",
        "print(\"Augmented Data Shape:\", augmented_data_df.shape)\n",
        "print(\"Combined Data PCA Shape:\", combined_data_pca.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zDISOCEmIjqw",
        "outputId": "de5e7f5c-3e33-4d8b-adf7-25c7119900d1"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Real Data Shape: (50000, 11)\n",
            "Augmented Data Shape: (50000, 11)\n",
            "Combined Data PCA Shape: (100000, 2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert continuous values to binary labels based on a threshold (e.g., 0.5)\n",
        "combined_data['is_fraud'] = (combined_data['is_fraud'] > 0.5).astype(int)\n",
        "print(combined_data['is_fraud'].value_counts())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_SRUUGfxFC1W",
        "outputId": "c4e1cbe4-9146-417b-c476-be2165be2e4a"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    100000\n",
            "Name: is_fraud, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.decomposition import PCA\n",
        "\n",
        "# Assuming real_data, gen_data_norm, and augmented_data_df are defined\n",
        "\n",
        "# Plot original data before GAN\n",
        "plt.figure(figsize=(10, 8))\n",
        "plt.title('Original Data Before GAN')\n",
        "for feature in real_data.columns:\n",
        "    plt.hist(real_data[feature], bins=30, alpha=0.5, label=feature)\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Plot original + synthetic data after GAN\n",
        "# Perform dimensionality reduction for visualization (e.g., PCA)\n",
        "pca = PCA(n_components=2)\n",
        "\n",
        "# Generate synthetic samples using the trained generator\n",
        "num_synthetic_samples = 50000\n",
        "noise = np.random.normal(0, 1, (num_synthetic_samples, latent_dim))\n",
        "synthetic_minority_data = trained_generator.predict(noise)\n",
        "\n",
        "# Convert synthetic data to DataFrame and inverse transform\n",
        "augmented_data_df = pd.DataFrame(scaler.inverse_transform(synthetic_minority_data), columns=gen_data.columns)\n",
        "\n",
        "# Concatenate original and synthetic data\n",
        "combined_data = pd.concat([real_data, augmented_data_df], axis=0)\n",
        "\n",
        "# Apply PCA to combined data\n",
        "combined_data_pca = pca.fit_transform(combined_data)\n",
        "\n",
        "# Plot the data in 2D space\n",
        "plt.figure(figsize=(10, 8))\n",
        "plt.title('Original + Synthetic Data After GAN')\n",
        "plt.scatter(combined_data_pca[:, 0], combined_data_pca[:, 1], c=['blue']*len(real_data) + ['red']*len(augmented_data_df), alpha=0.5)\n",
        "plt.xlabel('Principal Component 1')\n",
        "plt.ylabel('Principal Component 2')\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "3GwwJPjw8AFM",
        "outputId": "35b8e220-1f1f-4695-d9b7-df5336ab464a"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1563/1563 [==============================] - 11s 7ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Convert labels to binary format (1 for fraud, 0 for non-fraud)\n",
        "combined_data['is_fraud'] = combined_data['is_fraud'].apply(lambda x: 1 if x == 'fraud' else 0)\n",
        "\n",
        "# Splitting the data into features and labels\n",
        "X = combined_data.drop(columns=['is_fraud'])\n",
        "y = combined_data['is_fraud']\n",
        "\n",
        "# Splitting the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Training an SVC model\n",
        "svc_model = SVC(kernel='linear')\n",
        "svc_model.fit(X_train, y_train)\n",
        "\n",
        "# Making predictions on the test set\n",
        "y_pred = svc_model.predict(X_test)\n",
        "\n",
        "# Calculating evaluation metrics\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "precision = precision_score(y_test, y_pred)\n",
        "recall = recall_score(y_test, y_pred)\n",
        "f1 = f1_score(y_test, y_pred)\n",
        "\n",
        "# Printing the evaluation metrics\n",
        "print(\"Accuracy:\", accuracy)\n",
        "print(\"Precision:\", precision)\n",
        "print(\"Recall:\", recall)\n",
        "print(\"F1 Score:\", f1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 375
        },
        "id": "mXUhkdU1EMjD",
        "outputId": "a3ba8646-1f0e-4f5c-9bbc-dbb07ef436fd"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "The number of classes has to be greater than one; got 1 class",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-60-a41a2f024d6f>\u001b[0m in \u001b[0;36m<cell line: 13>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# Training an SVC model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0msvc_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSVC\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkernel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'linear'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0msvc_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;31m# Making predictions on the test set\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    199\u001b[0m             )\n\u001b[1;32m    200\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 201\u001b[0;31m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    202\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    203\u001b[0m         sample_weight = np.asarray(\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36m_validate_targets\u001b[0;34m(self, y)\u001b[0m\n\u001b[1;32m    747\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclass_weight_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompute_class_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclass_weight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclasses\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    748\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcls\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 749\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    750\u001b[0m                 \u001b[0;34m\"The number of classes has to be greater than one; got %d class\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    751\u001b[0m                 \u001b[0;34m%\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcls\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: The number of classes has to be greater than one; got 1 class"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot class distributions before and after GAN\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "# Plot class distribution before GAN\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.title('Class Distribution Before GAN')\n",
        "real_data['is_fraud'].value_counts().plot(kind='bar', color=['blue', 'red'])\n",
        "plt.xlabel('Class')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "# Plot class distribution after GAN\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.title('Class Distribution After GAN')\n",
        "combined_data['is_fraud'].value_counts().plot(kind='bar', color=['blue', 'red'])\n",
        "plt.xlabel('Class')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 560
        },
        "id": "NTD0Waa6CbaT",
        "outputId": "eb04388b-26fa-4676-e329-5bce6ab6844e"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "9nbiiTuuEKGc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "id": "cH74M0Tp3QII",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "e7865d67-b58d-4457-bd3d-2c2606334c66"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   is_fraud  gender_F  gender_M     amt      zip      lat     long  city_pop  \\\n",
              "0         1       0.0       1.0  312.51  55771.0  48.1439 -92.8561    1680.0   \n",
              "1         1       1.0       0.0   20.53   7060.0  40.6152 -74.4150   71485.0   \n",
              "2         1       0.0       1.0  264.10  76248.0  32.9276 -97.2489   95035.0   \n",
              "3         1       0.0       1.0  987.73  48206.0  42.3749 -83.1087  673342.0   \n",
              "4         1       1.0       0.0  868.00  43136.0  39.8013 -82.8125     460.0   \n",
              "\n",
              "   merch_lat  merch_long   age  \n",
              "0  48.488032  -92.519786  47.0  \n",
              "1  40.151652  -75.278513  49.0  \n",
              "2  33.098306  -97.968694  36.0  \n",
              "3  42.814546  -82.624587  77.0  \n",
              "4  38.819028  -82.364296  19.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ff722b9a-9c37-4e52-a501-4d697930b7e7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_fraud</th>\n",
              "      <th>gender_F</th>\n",
              "      <th>gender_M</th>\n",
              "      <th>amt</th>\n",
              "      <th>zip</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>city_pop</th>\n",
              "      <th>merch_lat</th>\n",
              "      <th>merch_long</th>\n",
              "      <th>age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>312.51</td>\n",
              "      <td>55771.0</td>\n",
              "      <td>48.1439</td>\n",
              "      <td>-92.8561</td>\n",
              "      <td>1680.0</td>\n",
              "      <td>48.488032</td>\n",
              "      <td>-92.519786</td>\n",
              "      <td>47.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>20.53</td>\n",
              "      <td>7060.0</td>\n",
              "      <td>40.6152</td>\n",
              "      <td>-74.4150</td>\n",
              "      <td>71485.0</td>\n",
              "      <td>40.151652</td>\n",
              "      <td>-75.278513</td>\n",
              "      <td>49.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>264.10</td>\n",
              "      <td>76248.0</td>\n",
              "      <td>32.9276</td>\n",
              "      <td>-97.2489</td>\n",
              "      <td>95035.0</td>\n",
              "      <td>33.098306</td>\n",
              "      <td>-97.968694</td>\n",
              "      <td>36.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>987.73</td>\n",
              "      <td>48206.0</td>\n",
              "      <td>42.3749</td>\n",
              "      <td>-83.1087</td>\n",
              "      <td>673342.0</td>\n",
              "      <td>42.814546</td>\n",
              "      <td>-82.624587</td>\n",
              "      <td>77.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>868.00</td>\n",
              "      <td>43136.0</td>\n",
              "      <td>39.8013</td>\n",
              "      <td>-82.8125</td>\n",
              "      <td>460.0</td>\n",
              "      <td>38.819028</td>\n",
              "      <td>-82.364296</td>\n",
              "      <td>19.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ff722b9a-9c37-4e52-a501-4d697930b7e7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ff722b9a-9c37-4e52-a501-4d697930b7e7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ff722b9a-9c37-4e52-a501-4d697930b7e7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9f3914aa-aea8-46cf-9273-85614621d8dc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9f3914aa-aea8-46cf-9273-85614621d8dc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9f3914aa-aea8-46cf-9273-85614621d8dc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "real_data",
              "summary": "{\n  \"name\": \"real_data\",\n  \"rows\": 50000,\n  \"fields\": [\n    {\n      \"column\": \"is_fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.49863113727506153,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_M\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4986311372750615,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 255.4663762952516,\n        \"min\": 1.0,\n        \"max\": 9999.39,\n        \"num_unique_values\": 20338,\n        \"samples\": [\n          293.68,\n          48.43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26997.39801727495,\n        \"min\": 1257.0,\n        \"max\": 99783.0,\n        \"num_unique_values\": 970,\n        \"samples\": [\n          4616.0,\n          4364.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.087477249777939,\n        \"min\": 20.0271,\n        \"max\": 66.6933,\n        \"num_unique_values\": 968,\n        \"samples\": [\n          44.3566,\n          44.3229\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.923274548779187,\n        \"min\": -165.6723,\n        \"max\": -67.9503,\n        \"num_unique_values\": 969,\n        \"samples\": [\n          -103.6999,\n          -69.9576\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 303761.32655676507,\n        \"min\": 23.0,\n        \"max\": 2906700.0,\n        \"num_unique_values\": 879,\n        \"samples\": [\n          459921.0,\n          6025.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.120583086725056,\n        \"min\": 19.04188,\n        \"max\": 67.510267,\n        \"num_unique_values\": 49916,\n        \"samples\": [\n          39.973882,\n          32.861662\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.93709910275609,\n        \"min\": -166.65656,\n        \"max\": -66.962913,\n        \"num_unique_values\": 49970,\n        \"samples\": [\n          -86.000404,\n          -98.567552\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.651335672957465,\n        \"min\": 19.0,\n        \"max\": 99.0,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          64.0,\n          47.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ],
      "source": [
        "real_data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "id": "IAuCGhm11DVj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "outputId": "b76e9579-abf2-4bf4-853c-565fd0c834bc"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'synthetic_data' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-44-8fffafad2497>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msynthetic_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mreal_synth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mreal_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maugmented_data\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mignore_index\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mreal_synth\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreal_synth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'synthetic_data' is not defined"
          ]
        }
      ],
      "source": [
        "synthetic_data.reset_index(drop=True, inplace=True)\n",
        "real_synth = pd.concat([real_data, augmented_data], ignore_index=True)\n",
        "real_synth.reset_index(drop=True, inplace=True)\n",
        "print(real_synth)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nMfsFIk12MKa"
      },
      "outputs": [],
      "source": [
        "real_synth.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-exrR-WGTRtV"
      },
      "outputs": [],
      "source": [
        "# Step 1: Generate Synthetic Data\n",
        "\n",
        "latent_dim = 5000\n",
        "\n",
        "def generate_synthetic_data(generator, num_samples, latent_dim):\n",
        "    noise = np.random.normal(0, 1, size=(num_samples, latent_dim))\n",
        "    synthetic_data = generator.predict(noise)\n",
        "    return synthetic_data\n",
        "\n",
        "# Step 2: Evaluate the Generated Data\n",
        "def evaluate_generated_data(real_data, synthetic_data):\n",
        "    # Compute statistical measures or evaluation metrics\n",
        "    # For example, you can compute mean, standard deviation, or use a KS-test\n",
        "    # You can also visualize distributions or compare summary statistics\n",
        "\n",
        "    # Here's an example of comparing means of real and synthetic data\n",
        "    real_mean = np.mean(real_data, axis=0)\n",
        "    synthetic_mean = np.mean(synthetic_data, axis=0)\n",
        "\n",
        "    print(\"Mean of Real Data:\", real_mean)\n",
        "    print(\"Mean of Synthetic Data:\", synthetic_mean)\n",
        "\n",
        "\n",
        "def compare_correlation(real_data, synthetic_data):\n",
        "    real_df = pd.DataFrame(real_data, columns=[f'Feature_{i}' for i in range(real_data.shape[1])])\n",
        "    synthetic_df = pd.DataFrame(synthetic_data, columns=[f'Feature_{i}' for i in range(synthetic_data.shape[1])])\n",
        "    # Compute correlation matrices\n",
        "    real_corr = real_df.corr()\n",
        "    synthetic_corr = synthetic_df.corr()\n",
        "\n",
        "    # Compare correlation matrices\n",
        "    corr_diff = synthetic_corr - real_corr\n",
        "\n",
        "    print(\"Difference in Correlation Matrices:\")\n",
        "    print(corr_diff)\n",
        "\n",
        "# Assuming real_data and synthetic_data are pandas DataFrames\n",
        "correlation_diff = compare_correlation(real_data, synthetic_data)\n",
        "print(\"Difference in Correlation Matrices:\")\n",
        "print(correlation_diff)\n",
        "# Generate synthetic data using the trained generator\n",
        "num_synthetic_samples = 1000  # Define the number of synthetic samples to generate\n",
        "latent_dim =64\n",
        "\n",
        "gan_instance =Gan(real_data, latent_dim)\n",
        "generator =gan_instance._generator()\n",
        "synthetic_data = generate_synthetic_data(generator, num_synthetic_samples, latent_dim)\n",
        "\n",
        "# Evaluate the generated data\n",
        "evaluate_generated_data(real_data, synthetic_data)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ixcwFfnlbubs"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def generate_synthetic_data(generator, num_samples, latent_dim):\n",
        "    noise = np.random.normal(0, 1, size=(num_samples, latent_dim))\n",
        "    synthetic_data = generator.predict(noise)\n",
        "    return synthetic_data\n",
        "\n",
        "def evaluate_generated_data(real_data, synthetic_data):\n",
        "    real_mean = np.mean(real_data, axis=0)\n",
        "    synthetic_mean = np.mean(synthetic_data, axis=0)\n",
        "    real_std = np.std(real_data, axis=0)\n",
        "    synthetic_std = np.std(synthetic_data, axis=0)\n",
        "    real_min = np.min(real_data, axis=0)\n",
        "    synthetic_min = np.min(synthetic_data, axis=0)\n",
        "    real_max = np.max(real_data, axis=0)\n",
        "    synthetic_max = np.max(synthetic_data, axis=0)\n",
        "\n",
        "    summary_df = pd.DataFrame({\n",
        "        'Statistic': ['Mean', 'Standard Deviation', 'Min', 'Max'],\n",
        "        'Real Data': [real_mean, real_std, real_min, real_max],\n",
        "        'Synthetic Data': [synthetic_mean, synthetic_std, synthetic_min, synthetic_max]\n",
        "    })\n",
        "\n",
        "    print(\"Summary Statistics:\")\n",
        "    print(summary_df)\n",
        "\n",
        "    # Plotting\n",
        "    fig, ax = plt.subplots(figsize=(10, 6))\n",
        "    index = np.arange(real_data.shape[1])\n",
        "    bar_width = 0.35\n",
        "    opacity = 0.8\n",
        "\n",
        "    rects1 = plt.bar(index, real_mean, bar_width, alpha=opacity, color='b', label='Real Data')\n",
        "    rects2 = plt.bar(index + bar_width, synthetic_mean, bar_width, alpha=opacity, color='g', label='Synthetic Data')\n",
        "\n",
        "    plt.xlabel('Features')\n",
        "    plt.ylabel('Values')\n",
        "    plt.title('Mean Comparison')\n",
        "    plt.xticks(index + bar_width / 2, [f'Feature_{i}' for i in range(real_data.shape[1])])\n",
        "    plt.legend()\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "def compare_correlation(real_data, synthetic_data):\n",
        "    real_df = pd.DataFrame(real_data, columns=[f'Feature_{i}' for i in range(real_data.shape[1])])\n",
        "    synthetic_df = pd.DataFrame(synthetic_data, columns=[f'Feature_{i}' for i in range(synthetic_data.shape[1])])\n",
        "    real_corr = real_df.corr()\n",
        "    synthetic_corr = synthetic_df.corr()\n",
        "    corr_diff = synthetic_corr - real_corr\n",
        "\n",
        "    print(\"Difference in Correlation Matrices:\")\n",
        "    print(corr_diff)\n",
        "\n",
        "latent_dim = 64\n",
        "num_synthetic_samples = 1000\n",
        "\n",
        "# Generate synthetic data using the trained generator\n",
        "gan_instance = Gan(real_data, latent_dim)\n",
        "generator = gan_instance._generator()\n",
        "synthetic_data = generate_synthetic_data(generator, num_synthetic_samples, latent_dim)\n",
        "\n",
        "# Evaluate the generated data\n",
        "evaluate_generated_data(real_data, synthetic_data)\n",
        "\n",
        "# Compare correlation matrices\n",
        "compare_correlation(real_data, synthetic_data)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-kZ_7QYAhCUm"
      },
      "outputs": [],
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "from imblearn.keras import balanced_batch_generator\n",
        "from ssgan import SSGAN # Assuming you have an SSGAN implementation\n",
        "\n",
        "# 1. Balancing using SSGAN\n",
        "def balance_with_ssgan(real_data, latent_dim, num_epochs):\n",
        "    # Assuming real_data is a pandas DataFrame with 'is_fraud' column indicating fraud or not fraud\n",
        "\n",
        "    # Separate fraud and not fraud samples\n",
        "    fraud_data = real_data[real_data['is_fraud'] == 1]\n",
        "    not_fraud_data = real_data[real_data['is_fraud'] == 0]\n",
        "\n",
        "    # Train SSGAN model\n",
        "    ssgan = SSGAN(real_data.shape[1], latent_dim)\n",
        "    ssgan.train(real_data.values, num_epochs=num_epochs)\n",
        "\n",
        "    # Generate synthetic samples for fraud class\n",
        "    num_synthetic_samples = len(fraud_data)\n",
        "    synthetic_fraud_data = ssgan.generate_samples(num_synthetic_samples)\n",
        "\n",
        "    # Combine synthetic fraud data with original not fraud data\n",
        "    balanced_data = pd.concat([not_fraud_data, pd.DataFrame(synthetic_fraud_data, columns=real_data.columns)], axis=0)\n",
        "\n",
        "    return balanced_data\n",
        "\n",
        "# 2. Balancing using SMOTE\n",
        "def balance_with_smote(real_data):\n",
        "    # Separate features and target\n",
        "    X = real_data.drop('is_fraud', axis=1)\n",
        "    y = real_data['is_fraud']\n",
        "\n",
        "    # Apply SMOTE\n",
        "    smote = SMOTE()\n",
        "    X_resampled, y_resampled = smote.fit_resample(X, y)\n",
        "\n",
        "    # Combine resampled data\n",
        "    balanced_data = pd.concat([pd.DataFrame(X_resampled, columns=X.columns), pd.Series(y_resampled, name='is_fraud')], axis=1)\n",
        "\n",
        "    return balanced_data\n",
        "\n",
        "# Usage\n",
        "balanced_data_ssgan = balance_with_ssgan(real_data, latent_dim=64, num_epochs=200)\n",
        "balanced_data_smote = balance_with_smote(real_data)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FAQ0OFE_iltL"
      },
      "outputs": [],
      "source": [
        "fraud_counts = real_data['is_fraud'].value_counts()\n",
        "\n",
        "# Plotting the distribution\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.barplot(x=fraud_counts.index, y=fraud_counts.values)\n",
        "plt.title('Distribution of Fraud vs Not Fraud')\n",
        "plt.xlabel('Class')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks([0, 1], ['Not Fraud', 'Fraud'])\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "machine_shape": "hm",
      "provenance": [],
      "authorship_tag": "ABX9TyMkHq8nAbbXW31DVTNarMcn",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}