{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MicroPyscho/Credit-Card-Fraud-Prediction-using-GAN/blob/main/last%20updated%20copy%20of%20code\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zN3SdubUnBqo",
        "outputId": "ea8ee02b-70d7-444a-f3ca-be3267d267a4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: tensorflow-gan in /usr/local/lib/python3.10/dist-packages (2.1.0)\n",
            "Requirement already satisfied: tensorflow-hub>=0.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow-gan) (0.16.1)\n",
            "Requirement already satisfied: tensorflow-probability>=0.7 in /usr/local/lib/python3.10/dist-packages (from tensorflow-gan) (0.23.0)\n",
            "Requirement already satisfied: numpy>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow-hub>=0.2->tensorflow-gan) (1.25.2)\n",
            "Requirement already satisfied: protobuf>=3.19.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow-hub>=0.2->tensorflow-gan) (3.20.3)\n",
            "Requirement already satisfied: tf-keras>=2.14.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow-hub>=0.2->tensorflow-gan) (2.15.1)\n",
            "Requirement already satisfied: absl-py in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (1.4.0)\n",
            "Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (1.16.0)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (4.4.2)\n",
            "Requirement already satisfied: cloudpickle>=1.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (2.2.1)\n",
            "Requirement already satisfied: gast>=0.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (0.5.4)\n",
            "Requirement already satisfied: dm-tree in /usr/local/lib/python3.10/dist-packages (from tensorflow-probability>=0.7->tensorflow-gan) (0.1.8)\n",
            "Requirement already satisfied: tensorflow<2.16,>=2.15 in /usr/local/lib/python3.10/dist-packages (from tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.15.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=23.5.26 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (24.3.7)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.2.0)\n",
            "Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.9.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (18.1.1)\n",
            "Requirement already satisfied: ml-dtypes~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.2.0)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.3.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (24.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (67.7.2)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.4.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (4.10.0)\n",
            "Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (1.14.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.36.0)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (1.62.1)\n",
            "Requirement already satisfied: tensorboard<2.16,>=2.15 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.15.2)\n",
            "Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.15.0)\n",
            "Requirement already satisfied: keras<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.15.0)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.43.0)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.27.0)\n",
            "Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (1.2.0)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.6)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.31.0)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.0.1)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (5.3.3)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.3.0)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (4.9)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (1.4.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2024.2.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (2.1.5)\n",
            "Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (0.5.1)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow<2.16,>=2.15->tf-keras>=2.14.1->tensorflow-hub>=0.2->tensorflow-gan) (3.2.2)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.8.3)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.13.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.50.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n",
            "Requirement already satisfied: numpy<2,>=1.21 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.0)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.10/dist-packages (from seaborn) (1.5.3)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2023.4)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n",
            "\u001b[31mERROR: Could not find a version that satisfies the requirement ssgan (from versions: none)\u001b[0m\u001b[31m\n",
            "\u001b[0m\u001b[31mERROR: No matching distribution found for ssgan\u001b[0m\u001b[31m\n",
            "\u001b[0m"
          ]
        }
      ],
      "source": [
        "!pip install tensorflow-gan\n",
        "!pip install matplotlib seaborn\n",
        "!pip install ssgan\n",
        "!pip install pyarrow\n",
        "#!pip install tabgan\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import tensorflow_gan as tfgan\n",
        "import tensorflow_datasets as tfds\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "%matplotlib inline\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.linear_model import Lasso\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "from torchvision import transforms\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from scipy.sparse import hstack\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.linear_model import Lasso\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "import pandas as pd\n",
        "from keras.models import Model\n",
        "from keras.layers import Input\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Flatten\n",
        "from keras.layers import LeakyReLU\n",
        "from keras.layers import Dense\n",
        "from keras.optimizers import Adam\n",
        "from tensorflow.keras.utils import plot_model\n",
        "#from keras.utils.vis_utils import plot_model\n",
        "#from ssgan.ssgan import SemiSupervisedGAN\n",
        "from datetime import datetime"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wu8Juc4pnJkC",
        "outputId": "5ae493e5-f31d-49ac-a0d5-3d2690f53498"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "import os\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 68,
      "metadata": {
        "id": "4xBRGYX6nO1x"
      },
      "outputs": [],
      "source": [
        "file_path = '/content/drive/MyDrive/df_train.csv'\n",
        "df_train_contd = pd.read_csv(file_path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        },
        "id": "40-usPNMnS4L",
        "outputId": "f07fc4e9-e615-41f4-f87d-7095c2cc19bd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0            cc_num       category     amt gender    zip      lat  \\\n",
              "0           0  2703186189652095       misc_net    4.97      F  28654  36.0788   \n",
              "1           1      630423337322    grocery_pos  107.23      F  99160  48.8878   \n",
              "2           2    38859492057661  entertainment  220.11      M  83252  42.1808   \n",
              "3           3  3534093764340240  gas_transport   45.00      M  59632  46.2306   \n",
              "4           4   375534208663984       misc_pos   41.96      M  24433  38.4207   \n",
              "\n",
              "       long  city_pop  merch_lat  merch_long  is_fraud   tx_time  age  \n",
              "0  -81.1781      3495  36.011293  -82.048315         0  00:00:18   36  \n",
              "1 -118.2105       149  49.159047 -118.186462         0  00:00:44   45  \n",
              "2 -112.2620      4154  43.150704 -112.154481         0  00:00:51   62  \n",
              "3 -112.1138      1939  47.034331 -112.561071         0  00:01:16   57  \n",
              "4  -79.4629        99  38.674999  -78.632459         0  00:03:06   37  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cc212629-c6c4-4b7f-890d-3898ff4a2eb6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>cc_num</th>\n",
              "      <th>category</th>\n",
              "      <th>amt</th>\n",
              "      <th>gender</th>\n",
              "      <th>zip</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>city_pop</th>\n",
              "      <th>merch_lat</th>\n",
              "      <th>merch_long</th>\n",
              "      <th>is_fraud</th>\n",
              "      <th>tx_time</th>\n",
              "      <th>age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>2703186189652095</td>\n",
              "      <td>misc_net</td>\n",
              "      <td>4.97</td>\n",
              "      <td>F</td>\n",
              "      <td>28654</td>\n",
              "      <td>36.0788</td>\n",
              "      <td>-81.1781</td>\n",
              "      <td>3495</td>\n",
              "      <td>36.011293</td>\n",
              "      <td>-82.048315</td>\n",
              "      <td>0</td>\n",
              "      <td>00:00:18</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>630423337322</td>\n",
              "      <td>grocery_pos</td>\n",
              "      <td>107.23</td>\n",
              "      <td>F</td>\n",
              "      <td>99160</td>\n",
              "      <td>48.8878</td>\n",
              "      <td>-118.2105</td>\n",
              "      <td>149</td>\n",
              "      <td>49.159047</td>\n",
              "      <td>-118.186462</td>\n",
              "      <td>0</td>\n",
              "      <td>00:00:44</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>38859492057661</td>\n",
              "      <td>entertainment</td>\n",
              "      <td>220.11</td>\n",
              "      <td>M</td>\n",
              "      <td>83252</td>\n",
              "      <td>42.1808</td>\n",
              "      <td>-112.2620</td>\n",
              "      <td>4154</td>\n",
              "      <td>43.150704</td>\n",
              "      <td>-112.154481</td>\n",
              "      <td>0</td>\n",
              "      <td>00:00:51</td>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>3534093764340240</td>\n",
              "      <td>gas_transport</td>\n",
              "      <td>45.00</td>\n",
              "      <td>M</td>\n",
              "      <td>59632</td>\n",
              "      <td>46.2306</td>\n",
              "      <td>-112.1138</td>\n",
              "      <td>1939</td>\n",
              "      <td>47.034331</td>\n",
              "      <td>-112.561071</td>\n",
              "      <td>0</td>\n",
              "      <td>00:01:16</td>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>375534208663984</td>\n",
              "      <td>misc_pos</td>\n",
              "      <td>41.96</td>\n",
              "      <td>M</td>\n",
              "      <td>24433</td>\n",
              "      <td>38.4207</td>\n",
              "      <td>-79.4629</td>\n",
              "      <td>99</td>\n",
              "      <td>38.674999</td>\n",
              "      <td>-78.632459</td>\n",
              "      <td>0</td>\n",
              "      <td>00:03:06</td>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cc212629-c6c4-4b7f-890d-3898ff4a2eb6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cc212629-c6c4-4b7f-890d-3898ff4a2eb6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cc212629-c6c4-4b7f-890d-3898ff4a2eb6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ce1b17de-72d7-4959-9201-578c0b085cc8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ce1b17de-72d7-4959-9201-578c0b085cc8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ce1b17de-72d7-4959-9201-578c0b085cc8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_train_contd"
            }
          },
          "metadata": {},
          "execution_count": 69
        }
      ],
      "source": [
        "df_train_contd.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Create a sample of dataset"
      ],
      "metadata": {
        "id": "cEXl_74z89kK"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b4mrmlcenT_m",
        "outputId": "6ddca416-47ef-4435-c133-83c4971bc966"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pyarrow in /usr/local/lib/python3.10/dist-packages (14.0.2)\n",
            "Requirement already satisfied: numpy>=1.16.6 in /usr/local/lib/python3.10/dist-packages (from pyarrow) (1.25.2)\n",
            "Sampled dataset info:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 50000 entries, 0 to 49999\n",
            "Data columns (total 14 columns):\n",
            " #   Column      Non-Null Count  Dtype  \n",
            "---  ------      --------------  -----  \n",
            " 0   Unnamed: 0  50000 non-null  int64  \n",
            " 1   cc_num      50000 non-null  int64  \n",
            " 2   category    50000 non-null  object \n",
            " 3   amt         50000 non-null  float64\n",
            " 4   gender      50000 non-null  object \n",
            " 5   zip         50000 non-null  int64  \n",
            " 6   lat         50000 non-null  float64\n",
            " 7   long        50000 non-null  float64\n",
            " 8   city_pop    50000 non-null  int64  \n",
            " 9   merch_lat   50000 non-null  float64\n",
            " 10  merch_long  50000 non-null  float64\n",
            " 11  is_fraud    50000 non-null  int64  \n",
            " 12  tx_time     50000 non-null  object \n",
            " 13  age         50000 non-null  int64  \n",
            "dtypes: float64(5), int64(6), object(3)\n",
            "memory usage: 5.3+ MB\n",
            "None\n"
          ]
        }
      ],
      "source": [
        "df_train_contd.reset_index(drop=True, inplace=True)\n",
        "\n",
        "minor_class = df_train_contd[df_train_contd['is_fraud'] == 1]\n",
        "major_class = df_train_contd[df_train_contd['is_fraud'] == 0]\n",
        "\n",
        "num_minority = minor_class.shape[0]\n",
        "num_majority = major_class.shape[0]\n",
        "\n",
        "minor_sample_prop = 0.7\n",
        "\n",
        "num_minor_samples = min(int(50000 * minor_sample_prop), num_minority)\n",
        "num_major_samples = 50000 - num_minor_samples\n",
        "\n",
        "# Sample from each class separately\n",
        "minor_samp = minor_class.sample(n=num_minor_samples, random_state=42, replace=num_minor_samples > num_minority)\n",
        "major_samp = major_class.sample(n=num_major_samples, random_state=42, replace=num_major_samples > num_majority)\n",
        "\n",
        "# Concatenate the samples\n",
        "df_train_contd_eg = pd.concat([minor_samp, major_samp], ignore_index=True)\n",
        "\n",
        "print(\"Sampled dataset info:\")\n",
        "print(df_train_contd_eg.info())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 71,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "id": "DQlHJA3BsKw2",
        "outputId": "9ce00846-63cb-4459-8739-de3935709160"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Group by category and count fraud cases in each category\n",
        "fraud_by_category = df_train_contd_eg.groupby(\"category\")[\"is_fraud\"].agg(fraud_cases='sum', total_cases='count').sort_values(by=\"fraud_cases\")\n",
        "\n",
        "# Plot the graph\n",
        "plt.figure(figsize=(12, 8))\n",
        "fraud_by_category.plot(kind='bar', color=['blue', 'lightgrey'])\n",
        "plt.xlabel(\"Transaction Category\")\n",
        "plt.ylabel(\"Number of Cases\")\n",
        "plt.title(\"Fraud Distribution and Total Transactions by Transaction Category\")\n",
        "plt.legend([\"Fraud Cases\", \"Total Cases\"], loc=\"upper right\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 72,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        },
        "id": "rVcfGaN0oOF3",
        "outputId": "0dd33a6f-90ef-4e4f-a3f4-c97b9da7102a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0               cc_num      category     amt gender    zip  \\\n",
              "0      758837     4365382885912355   grocery_pos  312.51      M  55771   \n",
              "1      981412      180048185037117     kids_pets   20.53      F   7060   \n",
              "2      799445  4102003771126577611   grocery_pos  264.10      M  76248   \n",
              "3      112813     2657850734909997  shopping_net  987.73      M  48206   \n",
              "4      833901     3557442674264531  shopping_net  868.00      F  43136   \n",
              "\n",
              "       lat     long  city_pop  merch_lat  merch_long  is_fraud   tx_time  age  \n",
              "0  48.1439 -92.8561      1680  48.488032  -92.519786         1  22:18:56   47  \n",
              "1  40.6152 -74.4150     71485  40.151652  -75.278513         1  23:13:33   49  \n",
              "2  32.9276 -97.2489     95035  33.098306  -97.968694         1  01:53:21   36  \n",
              "3  42.3749 -83.1087    673342  42.814546  -82.624587         1  22:11:30   77  \n",
              "4  39.8013 -82.8125       460  38.819028  -82.364296         1  22:37:25   19  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d659dfad-1617-46b5-a372-02e93632471f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>cc_num</th>\n",
              "      <th>category</th>\n",
              "      <th>amt</th>\n",
              "      <th>gender</th>\n",
              "      <th>zip</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>city_pop</th>\n",
              "      <th>merch_lat</th>\n",
              "      <th>merch_long</th>\n",
              "      <th>is_fraud</th>\n",
              "      <th>tx_time</th>\n",
              "      <th>age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>758837</td>\n",
              "      <td>4365382885912355</td>\n",
              "      <td>grocery_pos</td>\n",
              "      <td>312.51</td>\n",
              "      <td>M</td>\n",
              "      <td>55771</td>\n",
              "      <td>48.1439</td>\n",
              "      <td>-92.8561</td>\n",
              "      <td>1680</td>\n",
              "      <td>48.488032</td>\n",
              "      <td>-92.519786</td>\n",
              "      <td>1</td>\n",
              "      <td>22:18:56</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>981412</td>\n",
              "      <td>180048185037117</td>\n",
              "      <td>kids_pets</td>\n",
              "      <td>20.53</td>\n",
              "      <td>F</td>\n",
              "      <td>7060</td>\n",
              "      <td>40.6152</td>\n",
              "      <td>-74.4150</td>\n",
              "      <td>71485</td>\n",
              "      <td>40.151652</td>\n",
              "      <td>-75.278513</td>\n",
              "      <td>1</td>\n",
              "      <td>23:13:33</td>\n",
              "      <td>49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>799445</td>\n",
              "      <td>4102003771126577611</td>\n",
              "      <td>grocery_pos</td>\n",
              "      <td>264.10</td>\n",
              "      <td>M</td>\n",
              "      <td>76248</td>\n",
              "      <td>32.9276</td>\n",
              "      <td>-97.2489</td>\n",
              "      <td>95035</td>\n",
              "      <td>33.098306</td>\n",
              "      <td>-97.968694</td>\n",
              "      <td>1</td>\n",
              "      <td>01:53:21</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>112813</td>\n",
              "      <td>2657850734909997</td>\n",
              "      <td>shopping_net</td>\n",
              "      <td>987.73</td>\n",
              "      <td>M</td>\n",
              "      <td>48206</td>\n",
              "      <td>42.3749</td>\n",
              "      <td>-83.1087</td>\n",
              "      <td>673342</td>\n",
              "      <td>42.814546</td>\n",
              "      <td>-82.624587</td>\n",
              "      <td>1</td>\n",
              "      <td>22:11:30</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>833901</td>\n",
              "      <td>3557442674264531</td>\n",
              "      <td>shopping_net</td>\n",
              "      <td>868.00</td>\n",
              "      <td>F</td>\n",
              "      <td>43136</td>\n",
              "      <td>39.8013</td>\n",
              "      <td>-82.8125</td>\n",
              "      <td>460</td>\n",
              "      <td>38.819028</td>\n",
              "      <td>-82.364296</td>\n",
              "      <td>1</td>\n",
              "      <td>22:37:25</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d659dfad-1617-46b5-a372-02e93632471f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d659dfad-1617-46b5-a372-02e93632471f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d659dfad-1617-46b5-a372-02e93632471f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-68d4201b-efff-49ae-8d6f-358f3f23ec08\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-68d4201b-efff-49ae-8d6f-358f3f23ec08')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-68d4201b-efff-49ae-8d6f-358f3f23ec08 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_train_contd_eg",
              "summary": "{\n  \"name\": \"df_train_contd_eg\",\n  \"rows\": 50000,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 376924,\n        \"min\": 23,\n        \"max\": 1296642,\n        \"num_unique_values\": 50000,\n        \"samples\": [\n          1247665,\n          1136263,\n          626399\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cc_num\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1303686051489968896,\n        \"min\": 60416207185,\n        \"max\": 4992346398065154184,\n        \"num_unique_values\": 983,\n        \"samples\": [\n          4570636521433188,\n          4427805710168,\n          374125201044065\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"health_fitness\",\n          \"grocery_net\",\n          \"grocery_pos\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 255.4663762952516,\n        \"min\": 1.0,\n        \"max\": 9999.39,\n        \"num_unique_values\": 20338,\n        \"samples\": [\n          293.68,\n          48.43,\n          985.41\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"F\",\n          \"M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26997,\n        \"min\": 1257,\n        \"max\": 99783,\n        \"num_unique_values\": 970,\n        \"samples\": [\n          4616,\n          4364\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.087477249777939,\n        \"min\": 20.0271,\n        \"max\": 66.6933,\n        \"num_unique_values\": 968,\n        \"samples\": [\n          44.3566,\n          44.3229\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.923274548779187,\n        \"min\": -165.6723,\n        \"max\": -67.9503,\n        \"num_unique_values\": 969,\n        \"samples\": [\n          -103.6999,\n          -69.9576\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 303761,\n        \"min\": 23,\n        \"max\": 2906700,\n        \"num_unique_values\": 879,\n        \"samples\": [\n          459921,\n          6025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.120583086725056,\n        \"min\": 19.04188,\n        \"max\": 67.510267,\n        \"num_unique_values\": 49916,\n        \"samples\": [\n          39.973882,\n          32.861662\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.93709910275609,\n        \"min\": -166.65656,\n        \"max\": -66.962913,\n        \"num_unique_values\": 49970,\n        \"samples\": [\n          -86.000404,\n          -98.567552\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tx_time\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 37098,\n        \"samples\": [\n          \"20:07:18\",\n          \"06:30:49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 19,\n        \"max\": 99,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          64,\n          47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 72
        }
      ],
      "source": [
        "df_train_contd_eg.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 108,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lSUMrIFFxVqD",
        "outputId": "721bfd7f-5da6-4b84-9758-79d52deb8d8b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "missing values per column:\n",
            "Unnamed: 0    0\n",
            "cc_num        0\n",
            "category      0\n",
            "amt           0\n",
            "gender        0\n",
            "zip           0\n",
            "lat           0\n",
            "long          0\n",
            "city_pop      0\n",
            "merch_lat     0\n",
            "merch_long    0\n",
            "is_fraud      0\n",
            "tx_time       0\n",
            "age           0\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "#check for missing values\n",
        "missing_values = df_train_contd_eg.isna().sum()\n",
        "\n",
        "df_train_contd = df_train_contd_eg.reset_index(drop=True)\n",
        "print(\"missing values per column:\")\n",
        "print (missing_values)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Drop all problematic columns\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "CB10qIsk80_C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#drop problematic columns\n",
        "real_dataset = df_train_contd.drop(columns=[\"Unnamed: 0\", \"cc_num\", \"category\"])\n",
        "print(real_dataset.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P2la9CKGhz4r",
        "outputId": "ff73b6ee-21b2-4e53-cb46-6d450fe4c279"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(50000, 11)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Scale and Transform the dataset"
      ],
      "metadata": {
        "id": "_t1INprW8qqp"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 111,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "mDapEgIx3k5L",
        "outputId": "e08c8acd-75d4-4d1f-8ba2-f10225f1e3f3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Dataframe shape: (50000, 11)\n",
            "Encoded DataFrame shape: (50000, 11)\n",
            "feature_names length: 11\n",
            "z_encoded shape: 11\n",
            "First few rows of z_encoded:\n",
            "Original Dataframe shape: (50000, 11)\n",
            "Encoded DataFrame shape: (50000, 12)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   is_fraud  gender_F  gender_M     amt      zip      lat     long  city_pop  \\\n",
              "0         1       0.0       1.0  312.51  55771.0  48.1439 -92.8561    1680.0   \n",
              "1         1       1.0       0.0   20.53   7060.0  40.6152 -74.4150   71485.0   \n",
              "2         1       0.0       1.0  264.10  76248.0  32.9276 -97.2489   95035.0   \n",
              "3         1       0.0       1.0  987.73  48206.0  42.3749 -83.1087  673342.0   \n",
              "4         1       1.0       0.0  868.00  43136.0  39.8013 -82.8125     460.0   \n",
              "\n",
              "   merch_lat  merch_long   age  tx_time  \n",
              "0  48.488032  -92.519786  47.0      0.0  \n",
              "1  40.151652  -75.278513  49.0      0.0  \n",
              "2  33.098306  -97.968694  36.0      0.0  \n",
              "3  42.814546  -82.624587  77.0      0.0  \n",
              "4  38.819028  -82.364296  19.0      0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c9dcf6eb-7234-45e4-9a90-8ab1859d7a30\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_fraud</th>\n",
              "      <th>gender_F</th>\n",
              "      <th>gender_M</th>\n",
              "      <th>amt</th>\n",
              "      <th>zip</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>city_pop</th>\n",
              "      <th>merch_lat</th>\n",
              "      <th>merch_long</th>\n",
              "      <th>age</th>\n",
              "      <th>tx_time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>312.51</td>\n",
              "      <td>55771.0</td>\n",
              "      <td>48.1439</td>\n",
              "      <td>-92.8561</td>\n",
              "      <td>1680.0</td>\n",
              "      <td>48.488032</td>\n",
              "      <td>-92.519786</td>\n",
              "      <td>47.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>20.53</td>\n",
              "      <td>7060.0</td>\n",
              "      <td>40.6152</td>\n",
              "      <td>-74.4150</td>\n",
              "      <td>71485.0</td>\n",
              "      <td>40.151652</td>\n",
              "      <td>-75.278513</td>\n",
              "      <td>49.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>264.10</td>\n",
              "      <td>76248.0</td>\n",
              "      <td>32.9276</td>\n",
              "      <td>-97.2489</td>\n",
              "      <td>95035.0</td>\n",
              "      <td>33.098306</td>\n",
              "      <td>-97.968694</td>\n",
              "      <td>36.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>987.73</td>\n",
              "      <td>48206.0</td>\n",
              "      <td>42.3749</td>\n",
              "      <td>-83.1087</td>\n",
              "      <td>673342.0</td>\n",
              "      <td>42.814546</td>\n",
              "      <td>-82.624587</td>\n",
              "      <td>77.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>868.00</td>\n",
              "      <td>43136.0</td>\n",
              "      <td>39.8013</td>\n",
              "      <td>-82.8125</td>\n",
              "      <td>460.0</td>\n",
              "      <td>38.819028</td>\n",
              "      <td>-82.364296</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c9dcf6eb-7234-45e4-9a90-8ab1859d7a30')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c9dcf6eb-7234-45e4-9a90-8ab1859d7a30 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c9dcf6eb-7234-45e4-9a90-8ab1859d7a30');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2f143247-312d-4c7d-a3ee-82475f6f567f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2f143247-312d-4c7d-a3ee-82475f6f567f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2f143247-312d-4c7d-a3ee-82475f6f567f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_train_contd",
              "summary": "{\n  \"name\": \"df_train_contd\",\n  \"rows\": 50000,\n  \"fields\": [\n    {\n      \"column\": \"is_fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.49863113727506153,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_M\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4986311372750615,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 255.4663762952516,\n        \"min\": 1.0,\n        \"max\": 9999.39,\n        \"num_unique_values\": 20338,\n        \"samples\": [\n          293.68,\n          48.43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26997.39801727495,\n        \"min\": 1257.0,\n        \"max\": 99783.0,\n        \"num_unique_values\": 970,\n        \"samples\": [\n          4616.0,\n          4364.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.087477249777939,\n        \"min\": 20.0271,\n        \"max\": 66.6933,\n        \"num_unique_values\": 968,\n        \"samples\": [\n          44.3566,\n          44.3229\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.923274548779187,\n        \"min\": -165.6723,\n        \"max\": -67.9503,\n        \"num_unique_values\": 969,\n        \"samples\": [\n          -103.6999,\n          -69.9576\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 303761.32655676507,\n        \"min\": 23.0,\n        \"max\": 2906700.0,\n        \"num_unique_values\": 879,\n        \"samples\": [\n          459921.0,\n          6025.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.120583086725056,\n        \"min\": 19.04188,\n        \"max\": 67.510267,\n        \"num_unique_values\": 49916,\n        \"samples\": [\n          39.973882,\n          32.861662\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.93709910275609,\n        \"min\": -166.65656,\n        \"max\": -66.962913,\n        \"num_unique_values\": 49970,\n        \"samples\": [\n          -86.000404,\n          -98.567552\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.651335672957465,\n        \"min\": 19.0,\n        \"max\": 99.0,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          64.0,\n          47.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tx_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 111
        }
      ],
      "source": [
        "#Scale, one hot encode and transform data\n",
        "cat_features = [\"gender\"]\n",
        "cat_transformer = OneHotEncoder()\n",
        "\n",
        "num_features = [\"amt\", \"zip\", \"lat\", \"long\", \"city_pop\", \"merch_lat\", \"merch_long\", \"age\", \"tx_time\"]\n",
        "num_transformer =StandardScaler()\n",
        "\n",
        "preprocessor =ColumnTransformer(\n",
        "    transformers=[\n",
        "        (\"cat\", cat_transformer, cat_features),\n",
        "        (\"num\", num_transformer, num_features)\n",
        "    ]\n",
        ")\n",
        "\n",
        "cat_encoded = cat_transformer.fit_transform(real_dataset[cat_features])\n",
        "\n",
        "z_encoded = hstack([cat_encoded, real_dataset[num_features].values])\n",
        "\n",
        "encoded_cat_feat = cat_transformer.get_feature_names_out(input_features=cat_features)\n",
        "\n",
        "#encoded_cat_feat = preprocessor.named_transformers_[\"cat\"].get_feature_names_out(cat_features)\n",
        "feature_names = list(encoded_cat_feat) + num_features\n",
        "\n",
        "print(\"Original Dataframe shape:\", real_dataset.shape)\n",
        "print(\"Encoded DataFrame shape:\", z_encoded.shape)\n",
        "print(\"feature_names length:\", len(feature_names))\n",
        "print(\"z_encoded shape:\", z_encoded.shape[1])\n",
        "print(\"First few rows of z_encoded:\")\n",
        "\n",
        "encoded_df = pd.DataFrame(data=z_encoded.toarray(), columns=feature_names)\n",
        "\n",
        "df_train_encoded = pd.concat([real_dataset.drop(columns=cat_features + num_features), encoded_df], axis=1)\n",
        "print(\"Original Dataframe shape:\", real_dataset.shape)\n",
        "print(\"Encoded DataFrame shape:\", df_train_encoded.shape)\n",
        "\n",
        "df_train_encoded.reset_index(drop=True, inplace=True)\n",
        "df_train_contd = df_train_encoded\n",
        "df_train_contd.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Scale Data using StandardScaler and RandomForestClassifier"
      ],
      "metadata": {
        "id": "5634piCz-Hxx"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 120,
      "metadata": {
        "id": "N9Y7Hbcn4xdD"
      },
      "outputs": [],
      "source": [
        "real_dataset = real_dataset\n",
        "\n",
        "#Load data into chunks and preprocess in chunks due to size\n",
        "num_chunks = 10\n",
        "\n",
        "#Feature importance containers\n",
        "num_feats = real_dataset.shape[1]-1\n",
        "rf_feature_importance = np.zeros(num_feats)\n",
        "lasso_feature_coefficients = np.zeros(num_feats)\n",
        "\n",
        "#separate target from class columns\n",
        "X = real_dataset.drop(columns=[\"is_fraud\"])\n",
        "y = real_dataset[\"is_fraud\"]\n",
        "\n",
        "scaler = StandardScaler()\n",
        "\n",
        "for i in range(num_chunks):\n",
        "  chunk_size = len(real_dataset)//num_chunks\n",
        "  start_idx = i * chunk_size\n",
        "  end_idx = start_idx + chunk_size\n",
        "  start_idx = start_idx + chunk_size\n",
        "  chunk_x = X.iloc[start_idx:end_idx]\n",
        "  chunk_y = y.iloc[start_idx:end_idx]\n",
        "\n",
        "  if len(chunk_x) > 0:\n",
        "    x_chunk_scaled = scaler.fit_transform(chunk_x) #Random Forest Feature Importance\n",
        "    rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "    rf_model.fit(x_chunk_scaled, chunk_y)\n",
        "    rf_feature_importance += rf_model.feature_importances_\n",
        "\n",
        "    lasso_model = Lasso(alpha=0.1, random_state=42)  #Lasso Regression Feature Importance\n",
        "    lasso_model.fit(x_chunk_scaled, chunk_y)\n",
        "    lasso_feature_coefficients += lasso_model.coef_\n",
        "\n",
        "rf_feature_importance /= num_chunks\n",
        "lasso_feature_coefficients /= num_chunks\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 126,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "l4iCQEp6WRSg",
        "outputId": "68910071-a643-44de-fa67-0dc1cca95d56"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Feature Names: 10\n",
            "Coefficients: 10\n",
            "Length of feature importances array: 10\n",
            "Feature Names: ['amt', 'gender', 'zip', 'lat', 'long', 'city_pop', 'merch_lat', 'merch_long', 'tx_time', 'age']\n",
            "Coefficients: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            "Length of feature_nms: 10\n",
            "Length of lasso_feature_coefficients: 10\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "def plot_feature_importances(rf_feature_importance, feature_nms, title):\n",
        "  sorted_idx = rf_feature_importance.argsort()[::-1]\n",
        "  top_10 = sorted_idx[:10]\n",
        "  sns.barplot(x=rf_feature_importance[top_10], y=pd.Series(feature_nms)[top_10])\n",
        "  plt.xlabel(\"Feature Importance\")\n",
        "  plt.ylabel(\"Feature\")\n",
        "  plt.title(title)\n",
        "  plt.show()\n",
        "\n",
        "def plot_coefficients(lasso_feature_coefficients, feature_nms, title):\n",
        "    #assert len(feature_nms)==len(lasso_feature_coefficients),\"Lengths of feature importance must match\"\n",
        "\n",
        "    print(\"Length of feature_nms:\", len(X.columns.tolist()))\n",
        "    print(\"Length of lasso_feature_coefficients:\", len(lasso_feature_coefficients))\n",
        "\n",
        "    coef_df = pd.DataFrame({\"Feature\": feature_nms,\"Coefficient\": lasso_feature_coefficients})\n",
        "    coef_df = coef_df.sort_values(by=\"Coefficient\", ascending=False)\n",
        "    top_10_co =coef_df.head(10)\n",
        "    plt.figure(figsize =(10, 6))\n",
        "    sns.barplot(x=\"Coefficient\", y = \"Feature\", data=top_10_co)\n",
        "    plt.xlabel(\"Coefficient\")\n",
        "    plt.ylabel(\"Feature\")\n",
        "    plt.title(title)\n",
        "    plt.show()\n",
        "\n",
        "feature_importances_scaled = scaler.fit_transform(rf_feature_importance.reshape(-1, 1))\n",
        "coefficients_scaled = scaler.fit_transform(lasso_feature_coefficients.reshape(-1, 1))\n",
        "\n",
        "feature_nms = X.columns.tolist()\n",
        "plot_feature_importances(rf_feature_importance, feature_nms, \"Feature Importance for Random Forest (Scaled)\")\n",
        "\n",
        "feature_nms = X.columns.tolist()\n",
        "\n",
        "print(\"Feature Names:\", len(feature_nms))\n",
        "print(\"Coefficients:\", len(lasso_feature_coefficients))\n",
        "\n",
        "feature_importances_length = len(rf_feature_importance)\n",
        "print(\"Length of feature importances array:\", feature_importances_length)\n",
        "\n",
        "print(\"Feature Names:\", feature_nms)\n",
        "print(\"Coefficients:\", lasso_feature_coefficients)\n",
        "\n",
        "plot_coefficients(lasso_feature_coefficients, feature_nms, \"Lasso Regression Feature Coefficients (Scaled)\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 127,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        },
        "id": "r6gZw0PeKNb6",
        "outputId": "8c6d6a8f-362e-4ca3-a362-65b9060618e0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(50000, 12)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   is_fraud  gender_F  gender_M     amt      zip      lat     long  city_pop  \\\n",
              "0         1       0.0       1.0  312.51  55771.0  48.1439 -92.8561    1680.0   \n",
              "1         1       1.0       0.0   20.53   7060.0  40.6152 -74.4150   71485.0   \n",
              "2         1       0.0       1.0  264.10  76248.0  32.9276 -97.2489   95035.0   \n",
              "3         1       0.0       1.0  987.73  48206.0  42.3749 -83.1087  673342.0   \n",
              "4         1       1.0       0.0  868.00  43136.0  39.8013 -82.8125     460.0   \n",
              "\n",
              "   merch_lat  merch_long   age  tx_time  \n",
              "0  48.488032  -92.519786  47.0      0.0  \n",
              "1  40.151652  -75.278513  49.0      0.0  \n",
              "2  33.098306  -97.968694  36.0      0.0  \n",
              "3  42.814546  -82.624587  77.0      0.0  \n",
              "4  38.819028  -82.364296  19.0      0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-22c87ef5-3020-48e8-bfdc-67291681e4de\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_fraud</th>\n",
              "      <th>gender_F</th>\n",
              "      <th>gender_M</th>\n",
              "      <th>amt</th>\n",
              "      <th>zip</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>city_pop</th>\n",
              "      <th>merch_lat</th>\n",
              "      <th>merch_long</th>\n",
              "      <th>age</th>\n",
              "      <th>tx_time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>312.51</td>\n",
              "      <td>55771.0</td>\n",
              "      <td>48.1439</td>\n",
              "      <td>-92.8561</td>\n",
              "      <td>1680.0</td>\n",
              "      <td>48.488032</td>\n",
              "      <td>-92.519786</td>\n",
              "      <td>47.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>20.53</td>\n",
              "      <td>7060.0</td>\n",
              "      <td>40.6152</td>\n",
              "      <td>-74.4150</td>\n",
              "      <td>71485.0</td>\n",
              "      <td>40.151652</td>\n",
              "      <td>-75.278513</td>\n",
              "      <td>49.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>264.10</td>\n",
              "      <td>76248.0</td>\n",
              "      <td>32.9276</td>\n",
              "      <td>-97.2489</td>\n",
              "      <td>95035.0</td>\n",
              "      <td>33.098306</td>\n",
              "      <td>-97.968694</td>\n",
              "      <td>36.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>987.73</td>\n",
              "      <td>48206.0</td>\n",
              "      <td>42.3749</td>\n",
              "      <td>-83.1087</td>\n",
              "      <td>673342.0</td>\n",
              "      <td>42.814546</td>\n",
              "      <td>-82.624587</td>\n",
              "      <td>77.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>868.00</td>\n",
              "      <td>43136.0</td>\n",
              "      <td>39.8013</td>\n",
              "      <td>-82.8125</td>\n",
              "      <td>460.0</td>\n",
              "      <td>38.819028</td>\n",
              "      <td>-82.364296</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-22c87ef5-3020-48e8-bfdc-67291681e4de')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-22c87ef5-3020-48e8-bfdc-67291681e4de button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-22c87ef5-3020-48e8-bfdc-67291681e4de');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5029669d-3a0a-4569-b28d-3938df552ad2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5029669d-3a0a-4569-b28d-3938df552ad2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5029669d-3a0a-4569-b28d-3938df552ad2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "real_data",
              "summary": "{\n  \"name\": \"real_data\",\n  \"rows\": 50000,\n  \"fields\": [\n    {\n      \"column\": \"is_fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.49863113727506153,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender_M\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4986311372750615,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 255.4663762952516,\n        \"min\": 1.0,\n        \"max\": 9999.39,\n        \"num_unique_values\": 20338,\n        \"samples\": [\n          293.68,\n          48.43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26997.39801727495,\n        \"min\": 1257.0,\n        \"max\": 99783.0,\n        \"num_unique_values\": 970,\n        \"samples\": [\n          4616.0,\n          4364.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.087477249777939,\n        \"min\": 20.0271,\n        \"max\": 66.6933,\n        \"num_unique_values\": 968,\n        \"samples\": [\n          44.3566,\n          44.3229\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.923274548779187,\n        \"min\": -165.6723,\n        \"max\": -67.9503,\n        \"num_unique_values\": 969,\n        \"samples\": [\n          -103.6999,\n          -69.9576\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 303761.32655676507,\n        \"min\": 23.0,\n        \"max\": 2906700.0,\n        \"num_unique_values\": 879,\n        \"samples\": [\n          459921.0,\n          6025.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.120583086725056,\n        \"min\": 19.04188,\n        \"max\": 67.510267,\n        \"num_unique_values\": 49916,\n        \"samples\": [\n          39.973882,\n          32.861662\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.93709910275609,\n        \"min\": -166.65656,\n        \"max\": -66.962913,\n        \"num_unique_values\": 49970,\n        \"samples\": [\n          -86.000404,\n          -98.567552\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.651335672957465,\n        \"min\": 19.0,\n        \"max\": 99.0,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          64.0,\n          47.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tx_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 127
        }
      ],
      "source": [
        "real_data = df_train_contd.select_dtypes(include={\"number\"})\n",
        "print(real_data.shape)\n",
        "real_data.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Balance the data using SMOTE"
      ],
      "metadata": {
        "id": "AC-4Tqm5S2h9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Separate features and target variable\n",
        "real_data = df_train_contd.select_dtypes(include={\"number\"})\n",
        "\n",
        "\n",
        "X = real_data.drop(columns=['is_fraud'])\n",
        "y = real_data['is_fraud']\n",
        "\n",
        "#Apply SMOTE to generate synthetic samples\n",
        "smote = SMOTE()\n",
        "X_balanced, y_balanced = smote.fit_resample(X, y)\n",
        "\n",
        "#Combine original and synthetic samples\n",
        "balanced_data = pd.concat([pd.DataFrame(X_balanced, columns=X.columns), pd.Series(y_balanced, name='is_fraud')], axis=1)\n",
        "\n",
        "#Split train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_balanced, y_balanced, test_size=0.2, random_state=42)\n",
        "\n",
        "#Print balanced dataset shape\n",
        "print(balanced_data.shape)\n",
        "print(balanced_data.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sdk-dfoxQ7zJ",
        "outputId": "0aa039d7-04c5-45b6-fd5d-01395e3ec12a"
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(84988, 12)\n",
            "   gender_F  gender_M     amt      zip      lat     long  city_pop  merch_lat  \\\n",
            "0       0.0       1.0  312.51  55771.0  48.1439 -92.8561    1680.0  48.488032   \n",
            "1       1.0       0.0   20.53   7060.0  40.6152 -74.4150   71485.0  40.151652   \n",
            "2       0.0       1.0  264.10  76248.0  32.9276 -97.2489   95035.0  33.098306   \n",
            "3       0.0       1.0  987.73  48206.0  42.3749 -83.1087  673342.0  42.814546   \n",
            "4       1.0       0.0  868.00  43136.0  39.8013 -82.8125     460.0  38.819028   \n",
            "\n",
            "   merch_long   age  tx_time  is_fraud  \n",
            "0  -92.519786  47.0      0.0         1  \n",
            "1  -75.278513  49.0      0.0         1  \n",
            "2  -97.968694  36.0      0.0         1  \n",
            "3  -82.624587  77.0      0.0         1  \n",
            "4  -82.364296  19.0      0.0         1  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Before balancing\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.countplot(x='is_fraud', data=real_data)\n",
        "plt.title('Distribution of Target Variable (Before Balancing)')\n",
        "plt.xlabel('is_fraud')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "# After balancing\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.countplot(x='is_fraud', data=balanced_data)\n",
        "plt.title('Distribution of Target Variable (After Balancing)')\n",
        "plt.xlabel('is_fraud')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "LylEewy5TJl6",
        "outputId": "ecc7c4ad-08b1-49eb-b528-d6869889b54a"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corr_real = real_data.corr()\n",
        "\n",
        "corr_balanced = balanced_data.corr()\n",
        "\n",
        "# Plot correlation matrix for real data\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(corr_real, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\n",
        "plt.title('Correlation Matrix - Real Data')\n",
        "plt.show()\n",
        "\n",
        "# Plot correlation matrix for balanced data\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(corr_balanced, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\n",
        "plt.title('Correlation Matrix - Balanced Data (SMOTE)')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Ci1X6PZlxBey",
        "outputId": "a1594812-e8b7-4074-8701-0c80357b0397"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "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uPce6aa491YkjowsJvfv30dQUBAaNGiA+Ph4LFq0CADQtWtXBUdGRERERGUFm0pKnspVqK5evYr2n1njITExMd/XvtaqVasQHBwMTU1N1KtXD1evXkXFihW/vCERERERESkllatQ1a9fH35+fiX+vnXq1MHdu3dL/H2JiIiIiEhxVK5CVb58edjb572mBxERERGRKmOXv5In12nTiYiIiIiIVJnKtVAREREREZVVYrZQlTi2UBERERERERURW6iIiIiIiFSEYpeYFXw5iwpiCxUREREREVERsUJFRERERERUROzyR0RERESkIjhtesljCxUREREREVERsYWKiIiIiEhFiMWKjqDsYQsVERERERFREbFCRUREREREVETs8kdEREREpCI4KUXJYwsVERERERGVWrGxsRgwYAD09fVhaGiI4cOHIzEx8bPbtGzZEgKBQOYxatQomTzh4eHo2LEjdHR0UKlSJUybNg3p6emFjo8tVEREREREKkKsgi1UAwYMQGRkJM6dO4e0tDQMHToUP/30E37//ffPbjdixAgsWrRI+lxHR0f6/4yMDHTs2BFmZmb4559/EBkZiUGDBkFDQwPLli0rVHysUBERERER0VdLTU1FamqqTJqWlha0tLSKvM9Hjx7hzJkzuH37NurXrw8A2LhxIzp06IBVq1bBwsIi3211dHRgZmaW52tnz57Fw4cPcf78eVSuXBmurq5YvHgxZsyYgQULFkBTU7PAMQokEva0JCIiIiJSBauPKe6n/Tu/hVi4cKFM2vz587FgwYIi79PLywtTpkyBSCSSpqWnp0NbWxuHDh1C9+7d89yuZcuWCAwMhEQigZmZGTp37oy5c+dKW6nmzZuH48ePw8/PT7rN06dPIRQKce/ePdSpU6fAMbKFqpR6Eham6BCKhdDODmFPnig6jGJjJxQiMshP0WEUG3NHV5U5PnZCIZ6FPlZ0GMXGxr46QsKeKzqMYlPNzhoPQ18pOoxi4WxvoXLnWmjYU0WHUWzs7WxxSsNB0WEUi45pwYoOodhFBd1XdAjFxsyx4D+4y4pZs2Zh8uTJMmlf0zoFAFFRUahUqZJMWrly5WBsbIyoqKh8t+vfvz+sra1hYWGBgIAAzJgxA8HBwThy5Ih0v5UrV5bZJuv55/abF1aoiIiIiIjoqxWme9/MmTOxYsWKz+Z59OhRkWP56aef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tVB16dIl376UOac8JyIiIiJSNSrUVqI0VKpCpaenBz09PUWHQUREREREZYRKVaiIiIiIiMoysZgtVCWt1E+bTkREREREVFqxhYqIiIiISEVI2EJV4thCRUREREREVESsUBERERERERURu/wREREREakITpte8thCRUREREREVERsoSIiIiIiUhESsVjRIZQ5bKEiIiIiIiIqIlaoiIiIiIiIiohd/oiIiIiIVISY61CVOLZQERERERERFRFbqIiIiIiIVASnTS95bKEiIiIiIiIqIrZQERERERGpCAnHUJU4tlAREREREREVEStURERERERERcQuf6XUo7CXig6hWDjZVcGLx/8pOoxiU7V6DbyeM1TRYRQb0yU7ERL2XNFhFItqdtZ4Ghaq6DCKja2dPZ6FPlZ0GMXGxr66yhwfWzt7PAkLU3QYxUZoZ6dy51pU0H1Fh1EszBzrKDqEYndKw0HRIRSbjmnBig4hT+zyV/LYQkVERERERFREbKEiIiIiIlIRYolY0SGUOWyhIiIiIiIiKiJWqIiIiIiIiIqIXf6IiIiIiFQEJ6UoeWyhIiIiIiIiKiK2UBERERERqQi2UJU8tlAREREREREVEVuoiIiIiIhUhETCFqqSxhYqIiIiIiKiImKFioiIiIiIqIjY5Y+IiIiISEWIxWJFh1DmsIWKiIiIiIioiNhCRURERESkIjhtesljCxUREREREVERsUJFRERERERUROzyR0RERESkIiQSTkpR0thCRUREREREVESlskLVsmVL/Pzzz1+1D4lEgp9++gnGxsYQCATw8/MrltgKY8iQIejWrVuJvy8RERERlU0SsURhj7KqVHb5O3LkCDQ0NL5qH2fOnMGuXbtw6dIlCIVCVKxYsZiiK50kEgn2792Fc2dOISkpEY7ONTBq7M+wqFL1s9v9feIYjv55EHGiWNjY2mHE6PGo7uAkfX32jEkIfOAvs0279p0xevwkuZQjy7FTp/HHkb8QK4qDna0Nxo8cDsfq1fLNf/naP9i5dz+iYl6jqoU5Rgz5AQ3r15O+vmLtRpz1vSSzzTd1XeGxcK68iiCl3bAVdJq2h1oFA6RHhSPx5D6kv3yab36BdnnotukJTZd6UCuvi4y4t0j6ez8+PA7Ilbd88w6o4NYbyf+cRdLf++VZDCmJRIJ9e73hc+Y0kpIS4eTsgjFjJ6BK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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "import pandas as pd\n",
        "\n",
        "X = real_data.drop(columns=['is_fraud'])\n",
        "y = real_data['is_fraud']\n",
        "\n",
        "smote = SMOTE()\n",
        "X_balanced, y_balanced = smote.fit_resample(X, y)\n",
        "\n",
        "balanced_data = pd.concat([pd.DataFrame(X_balanced, columns=X.columns), pd.Series(y_balanced, name='is_fraud')], axis=1)\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_balanced, y_balanced, test_size=0.2, random_state=42)\n",
        "\n",
        "svm_model = SVC(kernel='rbf', random_state=42)  # You can choose different kernels like 'linear', 'poly', 'sigmoid', etc.\n",
        "svm_model.fit(X_train, y_train)\n",
        "\n",
        "y_pred = svm_model.predict(X_test)\n",
        "\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"Accuracy:\", accuracy)\n",
        "\n",
        "print(classification_report(y_test, y_pred))\n"
      ],
      "metadata": {
        "id": "rO_EikQVwwxB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Definition of GAN Parameters"
      ],
      "metadata": {
        "id": "Ej7T9yA42Onb"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 132,
      "metadata": {
        "id": "uvKMH_bPQGtx"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import logging\n",
        "tf.get_logger().setLevel(logging.ERROR)\n",
        "\n",
        "latent_dim =5000\n",
        "\n",
        "class Gan():\n",
        "    def __init__(self, real_data, latent_dim):\n",
        "        self.real_data = real_data\n",
        "        self.latent_dim = latent_dim\n",
        "        self.n_epochs = 10000\n",
        "\n",
        "    # Generate random noise in a latent space\n",
        "    def _noise(self):\n",
        "        noise = np.random.normal(0, 1, (self.real_data.shape[0], self.real_data.shape[1]))\n",
        "        return noise\n",
        "\n",
        "    def _generator(self):\n",
        "        model = tf.keras.Sequential(name=\"Generator_model\")\n",
        "        model.add(tf.keras.layers.Dense(5000, activation='relu',input_shape =(self.latent_dim,),\n",
        "                                         kernel_initializer='he_uniform',\n",
        "                                         input_dim=self.latent_dim))\n",
        "        model.add(tf.keras.layers.Dense(1000, activation='relu'))\n",
        "        model.add(tf.keras.layers.Dense(self.real_data.shape[1], activation='linear'))\n",
        "        return model\n",
        "\n",
        "    def _discriminator(self):\n",
        "        model = tf.keras.Sequential(name=\"Discriminator_model\")\n",
        "        model.add(tf.keras.layers.Dense(5000, activation='relu',\n",
        "                                         kernel_initializer='he_uniform',\n",
        "                                         input_dim=self.real_data.shape[1]))\n",
        "        model.add(tf.keras.layers.Dense(2500, activation='relu'))\n",
        "        # Sigmoid => Real or fake\n",
        "        model.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n",
        "        model.compile(loss='binary_crossentropy',\n",
        "                      optimizer='adam',\n",
        "                      metrics=['accuracy'])\n",
        "        return model\n",
        "\n",
        "    # Define the combined GAN model for updating generator\n",
        "    def _GAN(self, generator, discriminator):\n",
        "        discriminator.trainable = False\n",
        "        generator.trainable = True\n",
        "        model = tf.keras.Sequential(name=\"GAN\")\n",
        "        model.add(generator)\n",
        "        model.add(discriminator)\n",
        "        model.compile(loss='binary_crossentropy', optimizer='adam')\n",
        "        return model\n",
        "\n",
        "    # generator and discriminator training\n",
        "    def train(self, generator, discriminator, gan):\n",
        "        # enumerate epochs\n",
        "        for epoch in range(self.n_epochs):\n",
        "            # Train discriminator\n",
        "            generated_data = generator.predict(self._noise())\n",
        "            labels = np.concatenate([np.ones(self.real_data.shape[0]), np.zeros(self.real_data.shape[0])])\n",
        "            X = np.concatenate([self.real_data, generated_data])\n",
        "            discriminator.trainable = True\n",
        "            d_loss , _ = discriminator.train_on_batch(X, labels)\n",
        "\n",
        "            # Train generator\n",
        "            noise = self._noise()\n",
        "            g_loss = gan.train_on_batch(noise, np.ones(self.real_data.shape[0]))\n",
        "\n",
        "            print('>%d, d1=%.3f, d2=%.3f' %(epoch+1, d_loss, g_loss))\n",
        "        return generator\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "0YiHj-xB21NF"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "fTomV0i4lXXm",
        "outputId": "ddb06712-f908-496a-ae45-76d32a727c5d"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-8961d772d310>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mtensorflow\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreprocessing\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mMinMaxScaler\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0m_tf2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     47\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 48\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_api\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mv2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0m__internal__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     49\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_api\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mv2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0m__operators__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_api\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mv2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0maudio\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/_api/v2/__internal__/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0msys\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0m_sys\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_api\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__internal__\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mautograph\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_api\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__internal__\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdecorator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_api\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__internal__\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdispatch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/_api/v2/__internal__/autograph/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0msys\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0m_sys\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mag_ctx\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcontrol_status_ctx\u001b[0m \u001b[0;31m# line: 34\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimpl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapi\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtf_convert\u001b[0m \u001b[0;31m# line: 493\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/core/ag_ctx.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mthreading\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mag_logging\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtf_export\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtf_export\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/utils/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\"\"\"Utility module that contains APIs usable in the generated code.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontext_managers\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcontrol_dependency_on_returns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmisc\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0malias_tensors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor_list\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdynamic_list_append\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/autograph/utils/context_managers.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcontextlib\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mframework\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mops\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtensor_array_ops\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;31m# (b/143110113)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0;31m# pylint: disable=invalid-import-order,g-bad-import-order,unused-import\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpywrap_tensorflow\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpywrap_tfe\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;31m# pylint: enable=invalid-import-order,g-bad-import-order,unused-import\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/pywrap_tensorflow.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;31m# Perform pre-load sanity checks in order to produce a more actionable error.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 34\u001b[0;31m \u001b[0mself_check\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreload_check\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;31m# pylint: disable=wildcard-import,g-import-not-at-top,unused-import,line-too-long\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/platform/self_check.py\u001b[0m in \u001b[0;36mpreload_check\u001b[0;34m()\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;31m# incompatibilities before we trigger them (which would typically result in\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;31m# SIGILL).\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m     \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplatform\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0m_pywrap_cpu_feature_guard\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m     \u001b[0m_pywrap_cpu_feature_guard\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInfoAboutUnusedCPUFeatures\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "real_data = real_data\n",
        "\n",
        "# Identify minority class samples\n",
        "minority_samples = real_data[real_data['is_fraud'] == 1]\n",
        "gen_data = minority_samples.sample(n=50, replace=True, random_state=42)\n",
        "\n",
        "# Normalize minority samples\n",
        "scaler = MinMaxScaler()\n",
        "gen_data_norm = scaler.fit_transform(gen_data)\n",
        "\n",
        "# Define GAN class and instantiate with minority samples and latent dimension\n",
        "latent_dim = 12\n",
        "gan_instance = Gan(gen_data_norm, latent_dim)\n",
        "\n",
        "# Train GAN model\n",
        "generator = gan_instance._generator()\n",
        "discriminator = gan_instance._discriminator()\n",
        "gan = gan_instance._GAN(generator, discriminator)\n",
        "trained_generator = gan_instance.train(generator, discriminator, gan)\n",
        "\n",
        "# Generate synthetic data for the minority class using trained generator\n",
        "num_synthetic_samples = 50000  # Adjust the number of synthetic samples as needed\n",
        "synthetic_minority_data = generate_synthetic_data(trained_generator, num_synthetic_samples, latent_dim)\n",
        "\n",
        "# Convert synthetic data to DataFrame and inverse transform\n",
        "augmented_data_df = pd.DataFrame(scaler.inverse_transform(synthetic_minority_data), columns=gen_data.columns)\n",
        "\n",
        "print(augmented_data_df)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cH74M0Tp3QII"
      },
      "outputs": [],
      "source": [
        "real_data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IAuCGhm11DVj"
      },
      "outputs": [],
      "source": [
        "augmented_data_df.reset_index(drop=True, inplace=True)\n",
        "real_synth = pd.concat([real_data, augmented_data], ignore_index=True)\n",
        "real_synth.reset_index(drop=True, inplace=True)\n",
        "print(real_synth)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nMfsFIk12MKa"
      },
      "outputs": [],
      "source": [
        "real_synth.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-exrR-WGTRtV"
      },
      "outputs": [],
      "source": [
        "# Step 1: Generate Synthetic Data\n",
        "\n",
        "latent_dim = 5000\n",
        "\n",
        "def generate_synthetic_data(generator, num_samples, latent_dim):\n",
        "    noise = np.random.normal(0, 1, size=(num_samples, latent_dim))\n",
        "    synthetic_data = generator.predict(noise)\n",
        "    return synthetic_data\n",
        "\n",
        "# Step 2: Evaluate the Generated Data\n",
        "def evaluate_generated_data(real_data, synthetic_data):\n",
        "    # Compute statistical measures or evaluation metrics\n",
        "    # For example, you can compute mean, standard deviation, or use a KS-test\n",
        "    # You can also visualize distributions or compare summary statistics\n",
        "\n",
        "    # Here's an example of comparing means of real and synthetic data\n",
        "    real_mean = np.mean(real_data, axis=0)\n",
        "    synthetic_mean = np.mean(synthetic_data, axis=0)\n",
        "\n",
        "    print(\"Mean of Real Data:\", real_mean)\n",
        "    print(\"Mean of Synthetic Data:\", synthetic_mean)\n",
        "\n",
        "\n",
        "def compare_correlation(real_data, synthetic_data):\n",
        "    real_df = pd.DataFrame(real_data, columns=[f'Feature_{i}' for i in range(real_data.shape[1])])\n",
        "    synthetic_df = pd.DataFrame(synthetic_data, columns=[f'Feature_{i}' for i in range(synthetic_data.shape[1])])\n",
        "    # Compute correlation matrices\n",
        "    real_corr = real_df.corr()\n",
        "    synthetic_corr = synthetic_df.corr()\n",
        "\n",
        "    # Compare correlation matrices\n",
        "    corr_diff = synthetic_corr - real_corr\n",
        "\n",
        "    print(\"Difference in Correlation Matrices:\")\n",
        "    print(corr_diff)\n",
        "\n",
        "# Assuming real_data and synthetic_data are pandas DataFrames\n",
        "correlation_diff = compare_correlation(real_data, synthetic_data)\n",
        "print(\"Difference in Correlation Matrices:\")\n",
        "print(correlation_diff)\n",
        "# Generate synthetic data using the trained generator\n",
        "num_synthetic_samples = 1000  # Define the number of synthetic samples to generate\n",
        "latent_dim =64\n",
        "\n",
        "gan_instance =Gan(real_data, latent_dim)\n",
        "generator =gan_instance._generator()\n",
        "synthetic_data = generate_synthetic_data(generator, num_synthetic_samples, latent_dim)\n",
        "\n",
        "# Evaluate the generated data\n",
        "evaluate_generated_data(real_data, synthetic_data)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ixcwFfnlbubs"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def generate_synthetic_data(generator, num_samples, latent_dim):\n",
        "    noise = np.random.normal(0, 1, size=(num_samples, latent_dim))\n",
        "    synthetic_data = generator.predict(noise)\n",
        "    return synthetic_data\n",
        "\n",
        "def evaluate_generated_data(real_data, synthetic_data):\n",
        "    real_mean = np.mean(real_data, axis=0)\n",
        "    synthetic_mean = np.mean(synthetic_data, axis=0)\n",
        "    real_std = np.std(real_data, axis=0)\n",
        "    synthetic_std = np.std(synthetic_data, axis=0)\n",
        "    real_min = np.min(real_data, axis=0)\n",
        "    synthetic_min = np.min(synthetic_data, axis=0)\n",
        "    real_max = np.max(real_data, axis=0)\n",
        "    synthetic_max = np.max(synthetic_data, axis=0)\n",
        "\n",
        "    summary_df = pd.DataFrame({\n",
        "        'Statistic': ['Mean', 'Standard Deviation', 'Min', 'Max'],\n",
        "        'Real Data': [real_mean, real_std, real_min, real_max],\n",
        "        'Synthetic Data': [synthetic_mean, synthetic_std, synthetic_min, synthetic_max]\n",
        "    })\n",
        "\n",
        "    print(\"Summary Statistics:\")\n",
        "    print(summary_df)\n",
        "\n",
        "    # Plotting\n",
        "    fig, ax = plt.subplots(figsize=(10, 6))\n",
        "    index = np.arange(real_data.shape[1])\n",
        "    bar_width = 0.35\n",
        "    opacity = 0.8\n",
        "\n",
        "    rects1 = plt.bar(index, real_mean, bar_width, alpha=opacity, color='b', label='Real Data')\n",
        "    rects2 = plt.bar(index + bar_width, synthetic_mean, bar_width, alpha=opacity, color='g', label='Synthetic Data')\n",
        "\n",
        "    plt.xlabel('Features')\n",
        "    plt.ylabel('Values')\n",
        "    plt.title('Mean Comparison')\n",
        "    plt.xticks(index + bar_width / 2, [f'Feature_{i}' for i in range(real_data.shape[1])])\n",
        "    plt.legend()\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "def compare_correlation(real_data, synthetic_data):\n",
        "    real_df = pd.DataFrame(real_data, columns=[f'Feature_{i}' for i in range(real_data.shape[1])])\n",
        "    synthetic_df = pd.DataFrame(synthetic_data, columns=[f'Feature_{i}' for i in range(synthetic_data.shape[1])])\n",
        "    real_corr = real_df.corr()\n",
        "    synthetic_corr = synthetic_df.corr()\n",
        "    corr_diff = synthetic_corr - real_corr\n",
        "\n",
        "    print(\"Difference in Correlation Matrices:\")\n",
        "    print(corr_diff)\n",
        "\n",
        "latent_dim = 64\n",
        "num_synthetic_samples = 1000\n",
        "\n",
        "# Generate synthetic data using the trained generator\n",
        "gan_instance = Gan(real_data, latent_dim)\n",
        "generator = gan_instance._generator()\n",
        "synthetic_data = generate_synthetic_data(generator, num_synthetic_samples, latent_dim)\n",
        "\n",
        "# Evaluate the generated data\n",
        "evaluate_generated_data(real_data, synthetic_data)\n",
        "\n",
        "# Compare correlation matrices\n",
        "compare_correlation(real_data, synthetic_data)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-kZ_7QYAhCUm"
      },
      "outputs": [],
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "from imblearn.keras import balanced_batch_generator\n",
        "from ssgan import SSGAN # Assuming you have an SSGAN implementation\n",
        "\n",
        "# 1. Balancing using SSGAN\n",
        "def balance_with_ssgan(real_data, latent_dim, num_epochs):\n",
        "    # Assuming real_data is a pandas DataFrame with 'is_fraud' column indicating fraud or not fraud\n",
        "\n",
        "    # Separate fraud and not fraud samples\n",
        "    fraud_data = real_data[real_data['is_fraud'] == 1]\n",
        "    not_fraud_data = real_data[real_data['is_fraud'] == 0]\n",
        "\n",
        "    # Train SSGAN model\n",
        "    ssgan = SSGAN(real_data.shape[1], latent_dim)\n",
        "    ssgan.train(real_data.values, num_epochs=num_epochs)\n",
        "\n",
        "    # Generate synthetic samples for fraud class\n",
        "    num_synthetic_samples = len(fraud_data)\n",
        "    synthetic_fraud_data = ssgan.generate_samples(num_synthetic_samples)\n",
        "\n",
        "    # Combine synthetic fraud data with original not fraud data\n",
        "    balanced_data = pd.concat([not_fraud_data, pd.DataFrame(synthetic_fraud_data, columns=real_data.columns)], axis=0)\n",
        "\n",
        "    return balanced_data\n",
        "\n",
        "# 2. Balancing using SMOTE\n",
        "def balance_with_smote(real_data):\n",
        "    # Separate features and target\n",
        "    X = real_data.drop('is_fraud', axis=1)\n",
        "    y = real_data['is_fraud']\n",
        "\n",
        "    # Apply SMOTE\n",
        "    smote = SMOTE()\n",
        "    X_resampled, y_resampled = smote.fit_resample(X, y)\n",
        "\n",
        "    # Combine resampled data\n",
        "    balanced_data = pd.concat([pd.DataFrame(X_resampled, columns=X.columns), pd.Series(y_resampled, name='is_fraud')], axis=1)\n",
        "\n",
        "    return balanced_data\n",
        "\n",
        "# Usage\n",
        "balanced_data_ssgan = balance_with_ssgan(real_data, latent_dim=64, num_epochs=200)\n",
        "balanced_data_smote = balance_with_smote(real_data)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FAQ0OFE_iltL"
      },
      "outputs": [],
      "source": [
        "fraud_counts = real_data['is_fraud'].value_counts()\n",
        "\n",
        "# Plotting the distribution\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.barplot(x=fraud_counts.index, y=fraud_counts.values)\n",
        "plt.title('Distribution of Fraud vs Not Fraud')\n",
        "plt.xlabel('Class')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks([0, 1], ['Not Fraud', 'Fraud'])\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "machine_shape": "hm",
      "provenance": [],
      "authorship_tag": "ABX9TyP9nD2sKIMz1k6svW6dttX5",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}